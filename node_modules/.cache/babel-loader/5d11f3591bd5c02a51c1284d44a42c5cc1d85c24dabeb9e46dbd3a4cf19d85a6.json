{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/View\n */\nimport BaseObject from './Object.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport { DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, createProjection, disableCoordinateWarning, fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent } from './proj.js';\nimport { VOID } from './functions.js';\nimport { add as addCoordinate, equals as coordinatesEqual, equals, rotate as rotateCoordinate } from './coordinate.js';\nimport { assert } from './asserts.js';\nimport { none as centerNone, createExtent } from './centerconstraint.js';\nimport { clamp, modulo } from './math.js';\nimport { createMinMaxResolution, createSnapToPower, createSnapToResolutions } from './resolutionconstraint.js';\nimport { createSnapToN, createSnapToZero, disable, none as rotationNone } from './rotationconstraint.js';\nimport { easeOut, inAndOut } from './easing.js';\nimport { getCenter, getForViewAndSize, getHeight, getWidth, isEmpty } from './extent.js';\nimport { linearFindNearest } from './array.js';\nimport { fromExtent as polygonFromExtent } from './geom/Polygon.js';\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\n * @property {number} [sourceResolution] Source resolution.\n * @property {number} [targetResolution] Target resolution.\n * @property {number} [sourceRotation] Source rotation.\n * @property {number} [targetRotation] Target rotation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\n * @property {number} start Start.\n * @property {number} duration Duration.\n * @property {boolean} complete Complete.\n * @property {function(number):number} easing Easing.\n * @property {function(boolean):void} callback Callback.\n */\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center Center.\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\n */\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions that determine the\n * zoom levels if specified. The index in the array corresponds to the zoom level,\n * therefore the resolution values have to be in descending order. It also constrains\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\n * If the map viewport is partially covered with other content (overlays) along\n * its edges, this setting allows to shift the center of the viewport away from\n * that content. The order of the values is top, right, bottom, left.\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center Center (in view projection coordinates).\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\n * @property {number} resolution Resolution.\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\n * @property {number} [nextResolution] The next resolution during an animation series.\n * @property {number} [nextRotation] The next rotation during an animation series.\n * @property {number} rotation Rotation.\n * @property {number} zoom Zoom.\n */\n\n/**\n * Like {@link import(\"./Map.js\").FrameState}, but just `viewState` and `extent`.\n * @typedef {Object} ViewStateLayerStateExtent\n * @property {State} viewState View state.\n * @property {import(\"./extent.js\").Extent} extent Extent (in user projection coordinates).\n * @property {Array<import(\"./layer/Layer.js\").State>} [layerStatesArray] Layer states.\n */\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nconst DEFAULT_MIN_ZOOM = 0;\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\n */\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Web Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */\nclass View extends BaseObject {\n  /**\n   * @param {ViewOptions} [options] View options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ViewOnSignature<void>}\n     */\n    this.un;\n    options = Object.assign({}, options);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.hints_ = [0, 0];\n\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    this.animations_ = [];\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.updateAnimationKey_;\n\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\n\n    /**\n     * @private\n     * @type {import(\"./size.js\").Size}\n     */\n    this.viewportSize_ = [100, 100];\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.targetCenter_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetResolution_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */\n    this.nextCenter_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.nextResolution_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.nextRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.cancelAnchor_ = undefined;\n    if (options.projection) {\n      disableCoordinateWarning();\n    }\n    if (options.center) {\n      options.center = fromUserCoordinate(options.center, this.projection_);\n    }\n    if (options.extent) {\n      options.extent = fromUserExtent(options.extent, this.projection_);\n    }\n    this.applyOptions_(options);\n  }\n\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  applyOptions_(options) {\n    const properties = Object.assign({}, options);\n    for (const key in ViewProperty) {\n      delete properties[key];\n    }\n    this.setProperties(properties, true);\n    const resolutionConstraintInfo = createResolutionConstraint(options);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n    this.resolutions_ = options.resolutions;\n\n    /**\n     * @type {Array<number>|undefined}\n     * @private\n     */\n    this.padding_ = options.padding;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n    const centerConstraint = createCenterConstraint(options);\n    const resolutionConstraint = resolutionConstraintInfo.constraint;\n    const rotationConstraint = createRotationConstraint(options);\n\n    /**\n     * @private\n     * @type {Constraints}\n     */\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint\n    };\n    this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n    this.setCenterInternal(options.center !== undefined ? options.center : null);\n    if (options.resolution !== undefined) {\n      this.setResolution(options.resolution);\n    } else if (options.zoom !== undefined) {\n      this.setZoom(options.zoom);\n    }\n  }\n\n  /**\n   * Padding (in css pixels).\n   * If the map viewport is partially covered with other content (overlays) along\n   * its edges, this setting allows to shift the center of the viewport away from that\n   * content. The order of the values in the array is top, right, bottom, left.\n   * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\n   * @type {Array<number>|undefined}\n   * @api\n   */\n  get padding() {\n    return this.padding_;\n  }\n  set padding(padding) {\n    let oldPadding = this.padding_;\n    this.padding_ = padding;\n    const center = this.getCenterInternal();\n    if (center) {\n      const newPadding = padding || [0, 0, 0, 0];\n      oldPadding = oldPadding || [0, 0, 0, 0];\n      const resolution = this.getResolution();\n      const offsetX = resolution / 2 * (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\n      const offsetY = resolution / 2 * (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\n      this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);\n    }\n  }\n\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n  getUpdatedOptions_(newOptions) {\n    const options = this.getProperties();\n\n    // preserve resolution (or zoom)\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    }\n\n    // preserve center\n    options.center = this.getCenterInternal();\n\n    // preserve rotation\n    options.rotation = this.getRotation();\n    return Object.assign({}, options, newOptions);\n  }\n\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n  animate(var_args) {\n    if (this.isDef() && !this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n    const args = new Array(arguments.length);\n    for (let i = 0; i < args.length; ++i) {\n      let options = arguments[i];\n      if (options.center) {\n        options = Object.assign({}, options);\n        options.center = fromUserCoordinate(options.center, this.getProjection());\n      }\n      if (options.anchor) {\n        options = Object.assign({}, options);\n        options.anchor = fromUserCoordinate(options.anchor, this.getProjection());\n      }\n      args[i] = options;\n    }\n    this.animateInternal.apply(this, args);\n  }\n\n  /**\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n   */\n  animateInternal(var_args) {\n    let animationCount = arguments.length;\n    let callback;\n    if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n    let i = 0;\n    for (; i < animationCount && !this.isDef(); ++i) {\n      // if view properties are not yet set, shortcut to the final state\n      const state = arguments[i];\n      if (state.center) {\n        this.setCenterInternal(state.center);\n      }\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      } else if (state.resolution) {\n        this.setResolution(state.resolution);\n      }\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n    }\n    if (i === animationCount) {\n      if (callback) {\n        animationCallback(callback, true);\n      }\n      return;\n    }\n    let start = Date.now();\n    let center = this.targetCenter_.slice();\n    let resolution = this.targetResolution_;\n    let rotation = this.targetRotation_;\n    const series = [];\n    for (; i < animationCount; ++i) {\n      const options = /** @type {AnimationOptions} */arguments[i];\n      const animation = {\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut,\n        callback: callback\n      };\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center.slice();\n        center = animation.targetCenter;\n      }\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.getResolutionForZoom(options.zoom);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        const delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      }\n\n      // check if animation is a no-op\n      if (isNoopAnimation(animation)) {\n        animation.complete = true;\n        // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n      series.push(animation);\n    }\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  }\n\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n  getAnimating() {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  }\n\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n  getInteracting() {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  }\n\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n  cancelAnimations() {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    let anchor;\n    for (let i = 0, ii = this.animations_.length; i < ii; ++i) {\n      const series = this.animations_[i];\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n      if (!anchor) {\n        for (let j = 0, jj = series.length; j < jj; ++j) {\n          const animation = series[j];\n          if (!animation.complete) {\n            anchor = animation.anchor;\n            break;\n          }\n        }\n      }\n    }\n    this.animations_.length = 0;\n    this.cancelAnchor_ = anchor;\n    this.nextCenter_ = null;\n    this.nextResolution_ = NaN;\n    this.nextRotation_ = NaN;\n  }\n\n  /**\n   * Update all animations.\n   */\n  updateAnimations_() {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n    if (!this.getAnimating()) {\n      return;\n    }\n    const now = Date.now();\n    let more = false;\n    for (let i = this.animations_.length - 1; i >= 0; --i) {\n      const series = this.animations_[i];\n      let seriesComplete = true;\n      for (let j = 0, jj = series.length; j < jj; ++j) {\n        const animation = series[j];\n        if (animation.complete) {\n          continue;\n        }\n        const elapsed = now - animation.start;\n        let fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n        const progress = animation.easing(fraction);\n        if (animation.sourceCenter) {\n          const x0 = animation.sourceCenter[0];\n          const y0 = animation.sourceCenter[1];\n          const x1 = animation.targetCenter[0];\n          const y1 = animation.targetCenter[1];\n          this.nextCenter_ = animation.targetCenter;\n          const x = x0 + progress * (x1 - x0);\n          const y = y0 + progress * (y1 - y0);\n          this.targetCenter_ = [x, y];\n        }\n        if (animation.sourceResolution && animation.targetResolution) {\n          const resolution = progress === 1 ? animation.targetResolution : animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n          if (animation.anchor) {\n            const size = this.getViewportSize_(this.getRotation());\n            const constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);\n            this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);\n          }\n          this.nextResolution_ = animation.targetResolution;\n          this.targetResolution_ = resolution;\n          this.applyTargetState_(true);\n        }\n        if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n          const rotation = progress === 1 ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI : animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n          if (animation.anchor) {\n            const constrainedRotation = this.constraints_.rotation(rotation, true);\n            this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);\n          }\n          this.nextRotation_ = animation.targetRotation;\n          this.targetRotation_ = rotation;\n        }\n        this.applyTargetState_(true);\n        more = true;\n        if (!animation.complete) {\n          break;\n        }\n      }\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        this.nextCenter_ = null;\n        this.nextResolution_ = NaN;\n        this.nextRotation_ = NaN;\n        const callback = series[0].callback;\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    }\n    // prune completed series\n    this.animations_ = this.animations_.filter(Boolean);\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));\n    }\n  }\n\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n  calculateCenterRotate(rotation, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n    return center;\n  }\n\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n  calculateCenterZoom(resolution, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    const currentResolution = this.getResolution();\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      const x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n      const y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n      center = [x, y];\n    }\n    return center;\n  }\n\n  /**\n   * Returns the current viewport size.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n  getViewportSize_(rotation) {\n    const size = this.viewportSize_;\n    if (rotation) {\n      const w = size[0];\n      const h = size[1];\n      return [Math.abs(w * Math.cos(rotation)) + Math.abs(h * Math.sin(rotation)), Math.abs(w * Math.sin(rotation)) + Math.abs(h * Math.cos(rotation))];\n    }\n    return size;\n  }\n\n  /**\n   * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n   * to avoid performance hit and layout reflow.\n   * This should be done on map size change.\n   * Note: the constraints are not resolved during an animation to avoid stopping it\n   * @param {import(\"./size.js\").Size} [size] Viewport size; if undefined, [100, 100] is assumed\n   */\n  setViewportSize(size) {\n    this.viewportSize_ = Array.isArray(size) ? size.slice() : [100, 100];\n    if (!this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n  }\n\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n  getCenter() {\n    const center = this.getCenterInternal();\n    if (!center) {\n      return center;\n    }\n    return toUserCoordinate(center, this.getProjection());\n  }\n\n  /**\n   * Get the view center without transforming to user projection.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   */\n  getCenterInternal() {\n    return (/** @type {import(\"./coordinate.js\").Coordinate|undefined} */\n      this.get(ViewProperty.CENTER)\n    );\n  }\n\n  /**\n   * @return {Constraints} Constraints.\n   */\n  getConstraints() {\n    return this.constraints_;\n  }\n\n  /**\n   * @return {boolean} Resolution constraint is set\n   */\n  getConstrainResolution() {\n    return this.get('constrainResolution');\n  }\n\n  /**\n   * @param {Array<number>} [hints] Destination array.\n   * @return {Array<number>} Hint.\n   */\n  getHints(hints) {\n    if (hints !== undefined) {\n      hints[0] = this.hints_[0];\n      hints[1] = this.hints_[1];\n      return hints;\n    }\n    return this.hints_.slice();\n  }\n\n  /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided, the size\n   * of the map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n  calculateExtent(size) {\n    const extent = this.calculateExtentInternal(size);\n    return toUserExtent(extent, this.getProjection());\n  }\n\n  /**\n   * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided,\n   * the map's last known viewport size will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n  calculateExtentInternal(size) {\n    size = size || this.getViewportSizeMinusPadding_();\n    const center = /** @type {!import(\"./coordinate.js\").Coordinate} */\n    this.getCenterInternal();\n    assert(center, 'The view center is not defined');\n    const resolution = /** @type {!number} */this.getResolution();\n    assert(resolution !== undefined, 'The view resolution is not defined');\n    const rotation = /** @type {!number} */this.getRotation();\n    assert(rotation !== undefined, 'The view rotation is not defined');\n    return getForViewAndSize(center, resolution, rotation, size);\n  }\n\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n  getMaxResolution() {\n    return this.maxResolution_;\n  }\n\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n  getMinResolution() {\n    return this.minResolution_;\n  }\n\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n  getMaxZoom() {\n    return (/** @type {number} */\n      this.getZoomForResolution(this.minResolution_)\n    );\n  }\n\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n  setMaxZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      maxZoom: zoom\n    }));\n  }\n\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n  getMinZoom() {\n    return (/** @type {number} */\n      this.getZoomForResolution(this.maxResolution_)\n    );\n  }\n\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n  setMinZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      minZoom: zoom\n    }));\n  }\n\n  /**\n   * Set whether the view should allow intermediary zoom levels.\n   * @param {boolean} enabled Whether the resolution is constrained.\n   * @api\n   */\n  setConstrainResolution(enabled) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      constrainResolution: enabled\n    }));\n  }\n\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n  getProjection() {\n    return this.projection_;\n  }\n\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n  getResolution() {\n    return (/** @type {number|undefined} */this.get(ViewProperty.RESOLUTION)\n    );\n  }\n\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n  getResolutionForExtent(extent, size) {\n    return this.getResolutionForExtentInternal(fromUserExtent(extent, this.getProjection()), size);\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   */\n  getResolutionForExtentInternal(extent, size) {\n    size = size || this.getViewportSizeMinusPadding_();\n    const xResolution = getWidth(extent) / size[0];\n    const yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  }\n\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n  getResolutionForValueFunction(power) {\n    power = power || 2;\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function (value) {\n        const resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      }\n    );\n  }\n\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  getRotation() {\n    return (/** @type {number} */this.get(ViewProperty.ROTATION)\n    );\n  }\n\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n  getValueForResolutionFunction(power) {\n    const logPower = Math.log(power || 2);\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / logPower;\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function (resolution) {\n        const value = Math.log(maxResolution / resolution) / logPower / max;\n        return value;\n      }\n    );\n  }\n\n  /**\n   * Returns the size of the viewport minus padding.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\n   */\n  getViewportSizeMinusPadding_(rotation) {\n    let size = this.getViewportSize_(rotation);\n    const padding = this.padding_;\n    if (padding) {\n      size = [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]];\n    }\n    return size;\n  }\n\n  /**\n   * @return {State} View state.\n   */\n  getState() {\n    const projection = this.getProjection();\n    const resolution = this.getResolution();\n    const rotation = this.getRotation();\n    let center = /** @type {import(\"./coordinate.js\").Coordinate} */\n    this.getCenterInternal();\n    const padding = this.padding_;\n    if (padding) {\n      const reducedSize = this.getViewportSizeMinusPadding_();\n      center = calculateCenterOn(center, this.getViewportSize_(), [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]], resolution, rotation);\n    }\n    return {\n      center: center.slice(0),\n      projection: projection !== undefined ? projection : null,\n      resolution: resolution,\n      nextCenter: this.nextCenter_,\n      nextResolution: this.nextResolution_,\n      nextRotation: this.nextRotation_,\n      rotation: rotation,\n      zoom: this.getZoom()\n    };\n  }\n\n  /**\n   * @return {ViewStateLayerStateExtent} Like `FrameState`, but just `viewState` and `extent`.\n   */\n  getViewStateAndExtent() {\n    return {\n      viewState: this.getState(),\n      extent: this.calculateExtent()\n    };\n  }\n\n  /**\n   * Get the current zoom level. This method may return non-integer zoom levels\n   * if the view does not constrain the resolution, or if an interaction or\n   * animation is underway.\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n  getZoom() {\n    let zoom;\n    const resolution = this.getResolution();\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n    return zoom;\n  }\n\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n  getZoomForResolution(resolution) {\n    let offset = this.minZoom_ || 0;\n    let max, zoomFactor;\n    if (this.resolutions_) {\n      const nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  }\n\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n  getResolutionForZoom(zoom) {\n    if (this.resolutions_) {\n      if (this.resolutions_.length <= 1) {\n        return 0;\n      }\n      const baseLevel = clamp(Math.floor(zoom), 0, this.resolutions_.length - 2);\n      const zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n      return this.resolutions_[baseLevel] / Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1));\n    }\n    return this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_);\n  }\n\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions} [options] Options.\n   * @api\n   */\n  fit(geometryOrExtent, options) {\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    let geometry;\n    assert(Array.isArray(geometryOrExtent) || typeof /** @type {?} */geometryOrExtent.getSimplifiedGeometry === 'function', 'Invalid extent or geometry provided as `geometry`');\n    if (Array.isArray(geometryOrExtent)) {\n      assert(!isEmpty(geometryOrExtent), 'Cannot fit empty extent provided as `geometry`');\n      const extent = fromUserExtent(geometryOrExtent, this.getProjection());\n      geometry = polygonFromExtent(extent);\n    } else if (geometryOrExtent.getType() === 'Circle') {\n      const extent = fromUserExtent(geometryOrExtent.getExtent(), this.getProjection());\n      geometry = polygonFromExtent(extent);\n      geometry.rotate(this.getRotation(), getCenter(extent));\n    } else {\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n        geometryOrExtent.clone().transform(userProjection, this.getProjection());\n      } else {\n        geometry = geometryOrExtent;\n      }\n    }\n    this.fitInternal(geometry, options);\n  }\n\n  /**\n   * Calculate rotated extent\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\n   */\n  rotatedExtentForGeometry(geometry) {\n    const rotation = this.getRotation();\n    const cosAngle = Math.cos(rotation);\n    const sinAngle = Math.sin(-rotation);\n    const coords = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    let minRotX = +Infinity;\n    let minRotY = +Infinity;\n    let maxRotX = -Infinity;\n    let maxRotY = -Infinity;\n    for (let i = 0, ii = coords.length; i < ii; i += stride) {\n      const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n    return [minRotX, minRotY, maxRotX, maxRotY];\n  }\n\n  /**\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @param {FitOptions} [options] Options.\n   */\n  fitInternal(geometry, options) {\n    options = options || {};\n    let size = options.size;\n    if (!size) {\n      size = this.getViewportSizeMinusPadding_();\n    }\n    const padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    const nearest = options.nearest !== undefined ? options.nearest : false;\n    let minResolution;\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.getResolutionForZoom(options.maxZoom);\n    } else {\n      minResolution = 0;\n    }\n    const rotatedExtent = this.rotatedExtentForGeometry(geometry);\n\n    // calculate resolution\n    let resolution = this.getResolutionForExtentInternal(rotatedExtent, [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);\n    resolution = isNaN(resolution) ? minResolution : Math.max(resolution, minResolution);\n    resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\n\n    // calculate center\n    const rotation = this.getRotation();\n    const sinAngle = Math.sin(rotation);\n    const cosAngle = Math.cos(rotation);\n    const centerRot = getCenter(rotatedExtent);\n    centerRot[0] += (padding[1] - padding[3]) / 2 * resolution;\n    centerRot[1] += (padding[0] - padding[2]) / 2 * resolution;\n    const centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\n    const centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\n    const center = this.getConstrainedCenter([centerX, centerY], resolution);\n    const callback = options.callback ? options.callback : VOID;\n    if (options.duration !== undefined) {\n      this.animateInternal({\n        resolution: resolution,\n        center: center,\n        duration: options.duration,\n        easing: options.easing\n      }, callback);\n    } else {\n      this.targetResolution_ = resolution;\n      this.targetCenter_ = center;\n      this.applyTargetState_(false, true);\n      animationCallback(callback, true);\n    }\n  }\n\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n  centerOn(coordinate, size, position) {\n    this.centerOnInternal(fromUserCoordinate(coordinate, this.getProjection()), size, position);\n  }\n\n  /**\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   */\n  centerOnInternal(coordinate, size, position) {\n    this.setCenterInternal(calculateCenterOn(coordinate, size, position, this.getResolution(), this.getRotation()));\n  }\n\n  /**\n   * Calculates the shift between map and viewport center.\n   * @param {import(\"./coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {import(\"./size.js\").Size} size Size.\n   * @return {Array<number>|undefined} Center shift.\n   */\n  calculateCenterShift(center, resolution, rotation, size) {\n    let centerShift;\n    const padding = this.padding_;\n    if (padding && center) {\n      const reducedSize = this.getViewportSizeMinusPadding_(-rotation);\n      const shiftedCenter = calculateCenterOn(center, size, [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]], resolution, rotation);\n      centerShift = [center[0] - shiftedCenter[0], center[1] - shiftedCenter[1]];\n    }\n    return centerShift;\n  }\n\n  /**\n   * @return {boolean} Is defined.\n   */\n  isDef() {\n    return !!this.getCenterInternal() && this.getResolution() !== undefined;\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   * @api\n   */\n  adjustCenter(deltaCoordinates) {\n    const center = toUserCoordinate(this.targetCenter_, this.getProjection());\n    this.setCenter([center[0] + deltaCoordinates[0], center[1] + deltaCoordinates[1]]);\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   */\n  adjustCenterInternal(deltaCoordinates) {\n    const center = this.targetCenter_;\n    this.setCenterInternal([center[0] + deltaCoordinates[0], center[1] + deltaCoordinates[1]]);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  adjustResolution(ratio, anchor) {\n    anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n    this.adjustResolutionInternal(ratio, anchor);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  adjustResolutionInternal(ratio, anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const size = this.getViewportSize_(this.getRotation());\n    const newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);\n    if (anchor) {\n      this.targetCenter_ = this.calculateCenterZoom(newResolution, anchor);\n    }\n    this.targetResolution_ *= ratio;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom level.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  adjustZoom(delta, anchor) {\n    this.adjustResolution(Math.pow(this.zoomFactor_, -delta), anchor);\n  }\n\n  /**\n   * Adds a value to the view rotation, optionally using an anchor. Any rotation\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   * @api\n   */\n  adjustRotation(delta, anchor) {\n    if (anchor) {\n      anchor = fromUserCoordinate(anchor, this.getProjection());\n    }\n    this.adjustRotationInternal(delta, anchor);\n  }\n\n  /**\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   */\n  adjustRotationInternal(delta, anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);\n    if (anchor) {\n      this.targetCenter_ = this.calculateCenterRotate(newRotation, anchor);\n    }\n    this.targetRotation_ += delta;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the center of the current view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n  setCenter(center) {\n    this.setCenterInternal(center ? fromUserCoordinate(center, this.getProjection()) : center);\n  }\n\n  /**\n   * Set the center using the view projection (not the user projection).\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   */\n  setCenterInternal(center) {\n    this.targetCenter_ = center;\n    this.applyTargetState_();\n  }\n\n  /**\n   * @param {import(\"./ViewHint.js\").default} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n  setHint(hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  }\n\n  /**\n   * Set the resolution for this view. Any resolution constraint will apply.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n  setResolution(resolution) {\n    this.targetResolution_ = resolution;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the rotation for this view. Any rotation constraint will apply.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  setRotation(rotation) {\n    this.targetRotation_ = rotation;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Zoom to a specific zoom level. Any resolution constrain will apply.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n  setZoom(zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  }\n\n  /**\n   * Recompute rotation/resolution/center based on target values.\n   * Note: we have to compute rotation first, then resolution and center considering that\n   * parameters can influence one another in case a view extent constraint is present.\n   * @param {boolean} [doNotCancelAnims] Do not cancel animations.\n   * @param {boolean} [forceMoving] Apply constraints as if the view is moving.\n   * @private\n   */\n  applyTargetState_(doNotCancelAnims, forceMoving) {\n    const isMoving = this.getAnimating() || this.getInteracting() || forceMoving;\n\n    // compute rotation\n    const newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);\n    const newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n    if (this.get(ViewProperty.ROTATION) !== newRotation) {\n      this.set(ViewProperty.ROTATION, newRotation);\n    }\n    if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\n      this.set(ViewProperty.RESOLUTION, newResolution);\n      this.set('zoom', this.getZoom(), true);\n    }\n    if (!newCenter || !this.get(ViewProperty.CENTER) || !equals(this.get(ViewProperty.CENTER), newCenter)) {\n      this.set(ViewProperty.CENTER, newCenter);\n    }\n    if (this.getAnimating() && !doNotCancelAnims) {\n      this.cancelAnimations();\n    }\n    this.cancelAnchor_ = undefined;\n  }\n\n  /**\n   * If any constraints need to be applied, an animation will be triggered.\n   * This is typically done on interaction end.\n   * Note: calling this with a duration of 0 will apply the constrained values straight away,\n   * without animation.\n   * @param {number} [duration] The animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  resolveConstraints(duration, resolutionDirection, anchor) {\n    duration = duration !== undefined ? duration : 200;\n    const direction = resolutionDirection || 0;\n    const newRotation = this.constraints_.rotation(this.targetRotation_);\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);\n    const newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, false, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n    if (duration === 0 && !this.cancelAnchor_) {\n      this.targetResolution_ = newResolution;\n      this.targetRotation_ = newRotation;\n      this.targetCenter_ = newCenter;\n      this.applyTargetState_();\n      return;\n    }\n    anchor = anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n    this.cancelAnchor_ = undefined;\n    if (this.getResolution() !== newResolution || this.getRotation() !== newRotation || !this.getCenterInternal() || !equals(this.getCenterInternal(), newCenter)) {\n      if (this.getAnimating()) {\n        this.cancelAnimations();\n      }\n      this.animateInternal({\n        rotation: newRotation,\n        center: newCenter,\n        resolution: newResolution,\n        duration: duration,\n        easing: easeOut,\n        anchor: anchor\n      });\n    }\n  }\n\n  /**\n   * Notify the View that an interaction has started.\n   * The view state will be resolved to a stable one if needed\n   * (depending on its constraints).\n   * @api\n   */\n  beginInteraction() {\n    this.resolveConstraints(0);\n    this.setHint(ViewHint.INTERACTING, 1);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  endInteraction(duration, resolutionDirection, anchor) {\n    anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n    this.endInteractionInternal(duration, resolutionDirection, anchor);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  endInteractionInternal(duration, resolutionDirection, anchor) {\n    if (!this.getInteracting()) {\n      return;\n    }\n    this.setHint(ViewHint.INTERACTING, -1);\n    this.resolveConstraints(duration, resolutionDirection, anchor);\n  }\n\n  /**\n   * Get a valid position for the view center according to the current constraints.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n   * @param {number} [targetResolution] Target resolution. If not supplied, the current one will be used.\n   * This is useful to guess a valid center position at a different zoom level.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n   */\n  getConstrainedCenter(targetCenter, targetResolution) {\n    const size = this.getViewportSize_(this.getRotation());\n    return this.constraints_.center(targetCenter, targetResolution || this.getResolution(), size);\n  }\n\n  /**\n   * Get a valid zoom level according to the current view constraints.\n   * @param {number|undefined} targetZoom Target zoom.\n   * @param {number} [direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid zoom level.\n   */\n  getConstrainedZoom(targetZoom, direction) {\n    const targetRes = this.getResolutionForZoom(targetZoom);\n    return this.getZoomForResolution(this.getConstrainedResolution(targetRes, direction));\n  }\n\n  /**\n   * Get a valid resolution according to the current view constraints.\n   * @param {number|undefined} targetResolution Target resolution.\n   * @param {number} [direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid resolution.\n   */\n  getConstrainedResolution(targetResolution, direction) {\n    direction = direction || 0;\n    const size = this.getViewportSize_(this.getRotation());\n    return this.constraints_.resolution(targetResolution, direction, size);\n  }\n}\n\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function () {\n    callback(returnValue);\n  }, 0);\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    const smooth = options.smoothExtentConstraint !== undefined ? options.smoothExtentConstraint : true;\n    return createExtent(options.extent, options.constrainOnlyCenter, smooth);\n  }\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  if (options.multiWorld !== true && projection.isGlobal()) {\n    const extent = projection.getExtent().slice();\n    extent[0] = -Infinity;\n    extent[2] = Infinity;\n    return createExtent(extent, false, false);\n  }\n  return centerNone;\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  let resolutionConstraint;\n  let maxResolution;\n  let minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  const defaultMaxZoom = 28;\n  const defaultZoomFactor = 2;\n  let minZoom = options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n  let maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n  const zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n  const multiWorld = options.multiWorld !== undefined ? options.multiWorld : false;\n  const smooth = options.smoothResolutionConstraint !== undefined ? options.smoothResolutionConstraint : true;\n  const showFullExtent = options.showFullExtent !== undefined ? options.showFullExtent : false;\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  const projExtent = projection.getExtent();\n  let constrainOnlyCenter = options.constrainOnlyCenter;\n  let extent = options.extent;\n  if (!multiWorld && !extent && projection.isGlobal()) {\n    constrainOnlyCenter = false;\n    extent = projExtent;\n  }\n  if (options.resolutions !== undefined) {\n    const resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution = resolutions[maxZoom] !== undefined ? resolutions[maxZoom] : resolutions[resolutions.length - 1];\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToResolutions(resolutions, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    } else {\n      resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    }\n  } else {\n    // calculate the default min and max resolution\n    const size = !projExtent ?\n    // use an extent that can fit the whole world if need be\n    360 * METERS_PER_UNIT.degrees / projection.getMetersPerUnit() : Math.max(getWidth(projExtent), getHeight(projExtent));\n    const defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n    const defaultMinResolution = defaultMaxResolution / Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom = minZoom + Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToPower(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    } else {\n      resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    }\n  }\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor\n  };\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  const enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;\n  if (enableRotation) {\n    const constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    }\n    if (constrainRotation === false) {\n      return rotationNone;\n    }\n    if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    }\n    return rotationNone;\n  }\n  return disable;\n}\n\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {import(\"./size.js\").Size} size Box pixel size.\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\n */\nfunction calculateCenterOn(coordinate, size, position, resolution, rotation) {\n  // calculate rotated position\n  const cosAngle = Math.cos(-rotation);\n  let sinAngle = Math.sin(-rotation);\n  let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  rotX += (size[0] / 2 - position[0]) * resolution;\n  rotY += (position[1] - size[1] / 2) * resolution;\n\n  // go back to original angle\n  sinAngle = -sinAngle; // go back to original rotation\n  const centerX = rotX * cosAngle - rotY * sinAngle;\n  const centerY = rotY * cosAngle + rotX * sinAngle;\n  return [centerX, centerY];\n}\nexport default View;","map":{"version":3,"names":["BaseObject","ViewHint","ViewProperty","DEFAULT_TILE_SIZE","METERS_PER_UNIT","createProjection","disableCoordinateWarning","fromUserCoordinate","fromUserExtent","getUserProjection","toUserCoordinate","toUserExtent","VOID","add","addCoordinate","equals","coordinatesEqual","rotate","rotateCoordinate","assert","none","centerNone","createExtent","clamp","modulo","createMinMaxResolution","createSnapToPower","createSnapToResolutions","createSnapToN","createSnapToZero","disable","rotationNone","easeOut","inAndOut","getCenter","getForViewAndSize","getHeight","getWidth","isEmpty","linearFindNearest","fromExtent","polygonFromExtent","DEFAULT_MIN_ZOOM","View","constructor","options","on","once","un","Object","assign","hints_","animations_","updateAnimationKey_","projection_","projection","viewportSize_","targetCenter_","targetResolution_","targetRotation_","nextCenter_","nextResolution_","nextRotation_","cancelAnchor_","undefined","center","extent","applyOptions_","properties","key","setProperties","resolutionConstraintInfo","createResolutionConstraint","maxResolution_","maxResolution","minResolution_","minResolution","zoomFactor_","zoomFactor","resolutions_","resolutions","padding_","padding","minZoom_","minZoom","centerConstraint","createCenterConstraint","resolutionConstraint","constraint","rotationConstraint","createRotationConstraint","constraints_","resolution","rotation","setRotation","setCenterInternal","setResolution","zoom","setZoom","oldPadding","getCenterInternal","newPadding","getResolution","offsetX","offsetY","getUpdatedOptions_","newOptions","getProperties","getZoom","getRotation","animate","var_args","isDef","getAnimating","resolveConstraints","args","Array","arguments","length","i","getProjection","anchor","animateInternal","apply","animationCount","callback","state","animationCallback","start","Date","now","slice","series","animation","complete","duration","easing","sourceCenter","targetCenter","sourceResolution","targetResolution","getResolutionForZoom","sourceRotation","delta","Math","PI","targetRotation","isNoopAnimation","push","setHint","ANIMATING","updateAnimations_","getInteracting","INTERACTING","cancelAnimations","ii","j","jj","NaN","cancelAnimationFrame","more","seriesComplete","elapsed","fraction","progress","x0","y0","x1","y1","x","y","size","getViewportSize_","constrainedResolution","calculateCenterZoom","applyTargetState_","constrainedRotation","calculateCenterRotate","filter","Boolean","requestAnimationFrame","bind","currentCenter","currentResolution","w","h","abs","cos","sin","setViewportSize","isArray","get","CENTER","getConstraints","getConstrainResolution","getHints","hints","calculateExtent","calculateExtentInternal","getViewportSizeMinusPadding_","getMaxResolution","getMinResolution","getMaxZoom","getZoomForResolution","setMaxZoom","maxZoom","getMinZoom","setMinZoom","setConstrainResolution","enabled","constrainResolution","RESOLUTION","getResolutions","getResolutionForExtent","getResolutionForExtentInternal","xResolution","yResolution","max","getResolutionForValueFunction","power","getConstrainedResolution","log","value","pow","ROTATION","getValueForResolutionFunction","logPower","getState","reducedSize","calculateCenterOn","nextCenter","nextResolution","nextRotation","getViewStateAndExtent","viewState","offset","nearest","baseLevel","floor","fit","geometryOrExtent","geometry","getSimplifiedGeometry","getType","getExtent","userProjection","clone","transform","fitInternal","rotatedExtentForGeometry","cosAngle","sinAngle","coords","getFlatCoordinates","stride","getStride","minRotX","Infinity","minRotY","maxRotX","maxRotY","rotX","rotY","min","rotatedExtent","isNaN","centerRot","centerX","centerY","getConstrainedCenter","centerOn","coordinate","position","centerOnInternal","calculateCenterShift","centerShift","shiftedCenter","adjustCenter","deltaCoordinates","setCenter","adjustCenterInternal","adjustResolution","ratio","adjustResolutionInternal","isMoving","newResolution","adjustZoom","adjustRotation","adjustRotationInternal","newRotation","hint","changed","doNotCancelAnims","forceMoving","newCenter","set","resolutionDirection","direction","beginInteraction","endInteraction","endInteractionInternal","getConstrainedZoom","targetZoom","targetRes","returnValue","setTimeout","smooth","smoothExtentConstraint","constrainOnlyCenter","multiWorld","isGlobal","defaultMaxZoom","defaultZoomFactor","smoothResolutionConstraint","showFullExtent","projExtent","degrees","getMetersPerUnit","defaultMaxResolution","defaultMinResolution","enableRotation","constrainRotation"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/View.js"],"sourcesContent":["/**\n * @module ol/View\n */\nimport BaseObject from './Object.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport {DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {\n  METERS_PER_UNIT,\n  createProjection,\n  disableCoordinateWarning,\n  fromUserCoordinate,\n  fromUserExtent,\n  getUserProjection,\n  toUserCoordinate,\n  toUserExtent,\n} from './proj.js';\nimport {VOID} from './functions.js';\nimport {\n  add as addCoordinate,\n  equals as coordinatesEqual,\n  equals,\n  rotate as rotateCoordinate,\n} from './coordinate.js';\nimport {assert} from './asserts.js';\nimport {none as centerNone, createExtent} from './centerconstraint.js';\nimport {clamp, modulo} from './math.js';\nimport {\n  createMinMaxResolution,\n  createSnapToPower,\n  createSnapToResolutions,\n} from './resolutionconstraint.js';\nimport {\n  createSnapToN,\n  createSnapToZero,\n  disable,\n  none as rotationNone,\n} from './rotationconstraint.js';\nimport {easeOut, inAndOut} from './easing.js';\nimport {\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n  isEmpty,\n} from './extent.js';\nimport {linearFindNearest} from './array.js';\nimport {fromExtent as polygonFromExtent} from './geom/Polygon.js';\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\n * @property {number} [sourceResolution] Source resolution.\n * @property {number} [targetResolution] Target resolution.\n * @property {number} [sourceRotation] Source rotation.\n * @property {number} [targetRotation] Target rotation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\n * @property {number} start Start.\n * @property {number} duration Duration.\n * @property {boolean} complete Complete.\n * @property {function(number):number} easing Easing.\n * @property {function(boolean):void} callback Callback.\n */\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center Center.\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\n */\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions that determine the\n * zoom levels if specified. The index in the array corresponds to the zoom level,\n * therefore the resolution values have to be in descending order. It also constrains\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\n * If the map viewport is partially covered with other content (overlays) along\n * its edges, this setting allows to shift the center of the viewport away from\n * that content. The order of the values is top, right, bottom, left.\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center Center (in view projection coordinates).\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\n * @property {number} resolution Resolution.\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\n * @property {number} [nextResolution] The next resolution during an animation series.\n * @property {number} [nextRotation] The next rotation during an animation series.\n * @property {number} rotation Rotation.\n * @property {number} zoom Zoom.\n */\n\n/**\n * Like {@link import(\"./Map.js\").FrameState}, but just `viewState` and `extent`.\n * @typedef {Object} ViewStateLayerStateExtent\n * @property {State} viewState View state.\n * @property {import(\"./extent.js\").Extent} extent Extent (in user projection coordinates).\n * @property {Array<import(\"./layer/Layer.js\").State>} [layerStatesArray] Layer states.\n */\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nconst DEFAULT_MIN_ZOOM = 0;\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\n */\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Web Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */\nclass View extends BaseObject {\n  /**\n   * @param {ViewOptions} [options] View options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ViewOnSignature<void>}\n     */\n    this.un;\n\n    options = Object.assign({}, options);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.hints_ = [0, 0];\n\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    this.animations_ = [];\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.updateAnimationKey_;\n\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\n\n    /**\n     * @private\n     * @type {import(\"./size.js\").Size}\n     */\n    this.viewportSize_ = [100, 100];\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.targetCenter_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetResolution_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */\n    this.nextCenter_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.nextResolution_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.nextRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.cancelAnchor_ = undefined;\n\n    if (options.projection) {\n      disableCoordinateWarning();\n    }\n    if (options.center) {\n      options.center = fromUserCoordinate(options.center, this.projection_);\n    }\n    if (options.extent) {\n      options.extent = fromUserExtent(options.extent, this.projection_);\n    }\n\n    this.applyOptions_(options);\n  }\n\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  applyOptions_(options) {\n    const properties = Object.assign({}, options);\n    for (const key in ViewProperty) {\n      delete properties[key];\n    }\n    this.setProperties(properties, true);\n\n    const resolutionConstraintInfo = createResolutionConstraint(options);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n    this.resolutions_ = options.resolutions;\n\n    /**\n     * @type {Array<number>|undefined}\n     * @private\n     */\n    this.padding_ = options.padding;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n\n    const centerConstraint = createCenterConstraint(options);\n    const resolutionConstraint = resolutionConstraintInfo.constraint;\n    const rotationConstraint = createRotationConstraint(options);\n\n    /**\n     * @private\n     * @type {Constraints}\n     */\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint,\n    };\n\n    this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n    this.setCenterInternal(\n      options.center !== undefined ? options.center : null\n    );\n    if (options.resolution !== undefined) {\n      this.setResolution(options.resolution);\n    } else if (options.zoom !== undefined) {\n      this.setZoom(options.zoom);\n    }\n  }\n\n  /**\n   * Padding (in css pixels).\n   * If the map viewport is partially covered with other content (overlays) along\n   * its edges, this setting allows to shift the center of the viewport away from that\n   * content. The order of the values in the array is top, right, bottom, left.\n   * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\n   * @type {Array<number>|undefined}\n   * @api\n   */\n  get padding() {\n    return this.padding_;\n  }\n  set padding(padding) {\n    let oldPadding = this.padding_;\n    this.padding_ = padding;\n    const center = this.getCenterInternal();\n    if (center) {\n      const newPadding = padding || [0, 0, 0, 0];\n      oldPadding = oldPadding || [0, 0, 0, 0];\n      const resolution = this.getResolution();\n      const offsetX =\n        (resolution / 2) *\n        (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\n      const offsetY =\n        (resolution / 2) *\n        (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\n      this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);\n    }\n  }\n\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n  getUpdatedOptions_(newOptions) {\n    const options = this.getProperties();\n\n    // preserve resolution (or zoom)\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    }\n\n    // preserve center\n    options.center = this.getCenterInternal();\n\n    // preserve rotation\n    options.rotation = this.getRotation();\n\n    return Object.assign({}, options, newOptions);\n  }\n\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n  animate(var_args) {\n    if (this.isDef() && !this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n    const args = new Array(arguments.length);\n    for (let i = 0; i < args.length; ++i) {\n      let options = arguments[i];\n      if (options.center) {\n        options = Object.assign({}, options);\n        options.center = fromUserCoordinate(\n          options.center,\n          this.getProjection()\n        );\n      }\n      if (options.anchor) {\n        options = Object.assign({}, options);\n        options.anchor = fromUserCoordinate(\n          options.anchor,\n          this.getProjection()\n        );\n      }\n      args[i] = options;\n    }\n    this.animateInternal.apply(this, args);\n  }\n\n  /**\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n   */\n  animateInternal(var_args) {\n    let animationCount = arguments.length;\n    let callback;\n    if (\n      animationCount > 1 &&\n      typeof arguments[animationCount - 1] === 'function'\n    ) {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n\n    let i = 0;\n    for (; i < animationCount && !this.isDef(); ++i) {\n      // if view properties are not yet set, shortcut to the final state\n      const state = arguments[i];\n      if (state.center) {\n        this.setCenterInternal(state.center);\n      }\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      } else if (state.resolution) {\n        this.setResolution(state.resolution);\n      }\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n    }\n    if (i === animationCount) {\n      if (callback) {\n        animationCallback(callback, true);\n      }\n      return;\n    }\n\n    let start = Date.now();\n    let center = this.targetCenter_.slice();\n    let resolution = this.targetResolution_;\n    let rotation = this.targetRotation_;\n    const series = [];\n    for (; i < animationCount; ++i) {\n      const options = /** @type {AnimationOptions} */ (arguments[i]);\n\n      const animation = {\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut,\n        callback: callback,\n      };\n\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center.slice();\n        center = animation.targetCenter;\n      }\n\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.getResolutionForZoom(options.zoom);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        const delta =\n          modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      }\n\n      // check if animation is a no-op\n      if (isNoopAnimation(animation)) {\n        animation.complete = true;\n        // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n      series.push(animation);\n    }\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  }\n\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n  getAnimating() {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  }\n\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n  getInteracting() {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  }\n\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n  cancelAnimations() {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    let anchor;\n    for (let i = 0, ii = this.animations_.length; i < ii; ++i) {\n      const series = this.animations_[i];\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n      if (!anchor) {\n        for (let j = 0, jj = series.length; j < jj; ++j) {\n          const animation = series[j];\n          if (!animation.complete) {\n            anchor = animation.anchor;\n            break;\n          }\n        }\n      }\n    }\n    this.animations_.length = 0;\n    this.cancelAnchor_ = anchor;\n    this.nextCenter_ = null;\n    this.nextResolution_ = NaN;\n    this.nextRotation_ = NaN;\n  }\n\n  /**\n   * Update all animations.\n   */\n  updateAnimations_() {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n    if (!this.getAnimating()) {\n      return;\n    }\n    const now = Date.now();\n    let more = false;\n    for (let i = this.animations_.length - 1; i >= 0; --i) {\n      const series = this.animations_[i];\n      let seriesComplete = true;\n      for (let j = 0, jj = series.length; j < jj; ++j) {\n        const animation = series[j];\n        if (animation.complete) {\n          continue;\n        }\n        const elapsed = now - animation.start;\n        let fraction =\n          animation.duration > 0 ? elapsed / animation.duration : 1;\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n        const progress = animation.easing(fraction);\n        if (animation.sourceCenter) {\n          const x0 = animation.sourceCenter[0];\n          const y0 = animation.sourceCenter[1];\n          const x1 = animation.targetCenter[0];\n          const y1 = animation.targetCenter[1];\n          this.nextCenter_ = animation.targetCenter;\n          const x = x0 + progress * (x1 - x0);\n          const y = y0 + progress * (y1 - y0);\n          this.targetCenter_ = [x, y];\n        }\n        if (animation.sourceResolution && animation.targetResolution) {\n          const resolution =\n            progress === 1\n              ? animation.targetResolution\n              : animation.sourceResolution +\n                progress *\n                  (animation.targetResolution - animation.sourceResolution);\n          if (animation.anchor) {\n            const size = this.getViewportSize_(this.getRotation());\n            const constrainedResolution = this.constraints_.resolution(\n              resolution,\n              0,\n              size,\n              true\n            );\n            this.targetCenter_ = this.calculateCenterZoom(\n              constrainedResolution,\n              animation.anchor\n            );\n          }\n          this.nextResolution_ = animation.targetResolution;\n          this.targetResolution_ = resolution;\n          this.applyTargetState_(true);\n        }\n        if (\n          animation.sourceRotation !== undefined &&\n          animation.targetRotation !== undefined\n        ) {\n          const rotation =\n            progress === 1\n              ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) -\n                Math.PI\n              : animation.sourceRotation +\n                progress *\n                  (animation.targetRotation - animation.sourceRotation);\n          if (animation.anchor) {\n            const constrainedRotation = this.constraints_.rotation(\n              rotation,\n              true\n            );\n            this.targetCenter_ = this.calculateCenterRotate(\n              constrainedRotation,\n              animation.anchor\n            );\n          }\n          this.nextRotation_ = animation.targetRotation;\n          this.targetRotation_ = rotation;\n        }\n        this.applyTargetState_(true);\n        more = true;\n        if (!animation.complete) {\n          break;\n        }\n      }\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        this.nextCenter_ = null;\n        this.nextResolution_ = NaN;\n        this.nextRotation_ = NaN;\n        const callback = series[0].callback;\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    }\n    // prune completed series\n    this.animations_ = this.animations_.filter(Boolean);\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(\n        this.updateAnimations_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n  calculateCenterRotate(rotation, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n    return center;\n  }\n\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n  calculateCenterZoom(resolution, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    const currentResolution = this.getResolution();\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      const x =\n        anchor[0] -\n        (resolution * (anchor[0] - currentCenter[0])) / currentResolution;\n      const y =\n        anchor[1] -\n        (resolution * (anchor[1] - currentCenter[1])) / currentResolution;\n      center = [x, y];\n    }\n    return center;\n  }\n\n  /**\n   * Returns the current viewport size.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n  getViewportSize_(rotation) {\n    const size = this.viewportSize_;\n    if (rotation) {\n      const w = size[0];\n      const h = size[1];\n      return [\n        Math.abs(w * Math.cos(rotation)) + Math.abs(h * Math.sin(rotation)),\n        Math.abs(w * Math.sin(rotation)) + Math.abs(h * Math.cos(rotation)),\n      ];\n    }\n    return size;\n  }\n\n  /**\n   * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n   * to avoid performance hit and layout reflow.\n   * This should be done on map size change.\n   * Note: the constraints are not resolved during an animation to avoid stopping it\n   * @param {import(\"./size.js\").Size} [size] Viewport size; if undefined, [100, 100] is assumed\n   */\n  setViewportSize(size) {\n    this.viewportSize_ = Array.isArray(size) ? size.slice() : [100, 100];\n    if (!this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n  }\n\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n  getCenter() {\n    const center = this.getCenterInternal();\n    if (!center) {\n      return center;\n    }\n    return toUserCoordinate(center, this.getProjection());\n  }\n\n  /**\n   * Get the view center without transforming to user projection.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   */\n  getCenterInternal() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(ViewProperty.CENTER)\n    );\n  }\n\n  /**\n   * @return {Constraints} Constraints.\n   */\n  getConstraints() {\n    return this.constraints_;\n  }\n\n  /**\n   * @return {boolean} Resolution constraint is set\n   */\n  getConstrainResolution() {\n    return this.get('constrainResolution');\n  }\n\n  /**\n   * @param {Array<number>} [hints] Destination array.\n   * @return {Array<number>} Hint.\n   */\n  getHints(hints) {\n    if (hints !== undefined) {\n      hints[0] = this.hints_[0];\n      hints[1] = this.hints_[1];\n      return hints;\n    }\n    return this.hints_.slice();\n  }\n\n  /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided, the size\n   * of the map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n  calculateExtent(size) {\n    const extent = this.calculateExtentInternal(size);\n    return toUserExtent(extent, this.getProjection());\n  }\n\n  /**\n   * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided,\n   * the map's last known viewport size will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n  calculateExtentInternal(size) {\n    size = size || this.getViewportSizeMinusPadding_();\n    const center = /** @type {!import(\"./coordinate.js\").Coordinate} */ (\n      this.getCenterInternal()\n    );\n    assert(center, 'The view center is not defined');\n    const resolution = /** @type {!number} */ (this.getResolution());\n    assert(resolution !== undefined, 'The view resolution is not defined');\n    const rotation = /** @type {!number} */ (this.getRotation());\n    assert(rotation !== undefined, 'The view rotation is not defined');\n\n    return getForViewAndSize(center, resolution, rotation, size);\n  }\n\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n  getMaxResolution() {\n    return this.maxResolution_;\n  }\n\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n  getMinResolution() {\n    return this.minResolution_;\n  }\n\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (\n      this.getZoomForResolution(this.minResolution_)\n    );\n  }\n\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n  setMaxZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));\n  }\n\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (\n      this.getZoomForResolution(this.maxResolution_)\n    );\n  }\n\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n  setMinZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));\n  }\n\n  /**\n   * Set whether the view should allow intermediary zoom levels.\n   * @param {boolean} enabled Whether the resolution is constrained.\n   * @api\n   */\n  setConstrainResolution(enabled) {\n    this.applyOptions_(this.getUpdatedOptions_({constrainResolution: enabled}));\n  }\n\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n  getProjection() {\n    return this.projection_;\n  }\n\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n  getResolution() {\n    return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));\n  }\n\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n  getResolutionForExtent(extent, size) {\n    return this.getResolutionForExtentInternal(\n      fromUserExtent(extent, this.getProjection()),\n      size\n    );\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   */\n  getResolutionForExtentInternal(extent, size) {\n    size = size || this.getViewportSizeMinusPadding_();\n    const xResolution = getWidth(extent) / size[0];\n    const yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  }\n\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n  getResolutionForValueFunction(power) {\n    power = power || 2;\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function (value) {\n        const resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      }\n    );\n  }\n\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  getRotation() {\n    return /** @type {number} */ (this.get(ViewProperty.ROTATION));\n  }\n\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n  getValueForResolutionFunction(power) {\n    const logPower = Math.log(power || 2);\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / logPower;\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function (resolution) {\n        const value = Math.log(maxResolution / resolution) / logPower / max;\n        return value;\n      }\n    );\n  }\n\n  /**\n   * Returns the size of the viewport minus padding.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\n   */\n  getViewportSizeMinusPadding_(rotation) {\n    let size = this.getViewportSize_(rotation);\n    const padding = this.padding_;\n    if (padding) {\n      size = [\n        size[0] - padding[1] - padding[3],\n        size[1] - padding[0] - padding[2],\n      ];\n    }\n    return size;\n  }\n\n  /**\n   * @return {State} View state.\n   */\n  getState() {\n    const projection = this.getProjection();\n    const resolution = this.getResolution();\n    const rotation = this.getRotation();\n    let center = /** @type {import(\"./coordinate.js\").Coordinate} */ (\n      this.getCenterInternal()\n    );\n    const padding = this.padding_;\n    if (padding) {\n      const reducedSize = this.getViewportSizeMinusPadding_();\n      center = calculateCenterOn(\n        center,\n        this.getViewportSize_(),\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\n        resolution,\n        rotation\n      );\n    }\n    return {\n      center: center.slice(0),\n      projection: projection !== undefined ? projection : null,\n      resolution: resolution,\n      nextCenter: this.nextCenter_,\n      nextResolution: this.nextResolution_,\n      nextRotation: this.nextRotation_,\n      rotation: rotation,\n      zoom: this.getZoom(),\n    };\n  }\n\n  /**\n   * @return {ViewStateLayerStateExtent} Like `FrameState`, but just `viewState` and `extent`.\n   */\n  getViewStateAndExtent() {\n    return {\n      viewState: this.getState(),\n      extent: this.calculateExtent(),\n    };\n  }\n\n  /**\n   * Get the current zoom level. This method may return non-integer zoom levels\n   * if the view does not constrain the resolution, or if an interaction or\n   * animation is underway.\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n  getZoom() {\n    let zoom;\n    const resolution = this.getResolution();\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n    return zoom;\n  }\n\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n  getZoomForResolution(resolution) {\n    let offset = this.minZoom_ || 0;\n    let max, zoomFactor;\n    if (this.resolutions_) {\n      const nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  }\n\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n  getResolutionForZoom(zoom) {\n    if (this.resolutions_) {\n      if (this.resolutions_.length <= 1) {\n        return 0;\n      }\n      const baseLevel = clamp(\n        Math.floor(zoom),\n        0,\n        this.resolutions_.length - 2\n      );\n      const zoomFactor =\n        this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n      return (\n        this.resolutions_[baseLevel] /\n        Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1))\n      );\n    }\n    return (\n      this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_)\n    );\n  }\n\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions} [options] Options.\n   * @api\n   */\n  fit(geometryOrExtent, options) {\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    let geometry;\n    assert(\n      Array.isArray(geometryOrExtent) ||\n        typeof (/** @type {?} */ (geometryOrExtent).getSimplifiedGeometry) ===\n          'function',\n      'Invalid extent or geometry provided as `geometry`'\n    );\n    if (Array.isArray(geometryOrExtent)) {\n      assert(\n        !isEmpty(geometryOrExtent),\n        'Cannot fit empty extent provided as `geometry`'\n      );\n      const extent = fromUserExtent(geometryOrExtent, this.getProjection());\n      geometry = polygonFromExtent(extent);\n    } else if (geometryOrExtent.getType() === 'Circle') {\n      const extent = fromUserExtent(\n        geometryOrExtent.getExtent(),\n        this.getProjection()\n      );\n      geometry = polygonFromExtent(extent);\n      geometry.rotate(this.getRotation(), getCenter(extent));\n    } else {\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n          geometryOrExtent\n            .clone()\n            .transform(userProjection, this.getProjection())\n        );\n      } else {\n        geometry = geometryOrExtent;\n      }\n    }\n\n    this.fitInternal(geometry, options);\n  }\n\n  /**\n   * Calculate rotated extent\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\n   */\n  rotatedExtentForGeometry(geometry) {\n    const rotation = this.getRotation();\n    const cosAngle = Math.cos(rotation);\n    const sinAngle = Math.sin(-rotation);\n    const coords = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    let minRotX = +Infinity;\n    let minRotY = +Infinity;\n    let maxRotX = -Infinity;\n    let maxRotY = -Infinity;\n    for (let i = 0, ii = coords.length; i < ii; i += stride) {\n      const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n    return [minRotX, minRotY, maxRotX, maxRotY];\n  }\n\n  /**\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @param {FitOptions} [options] Options.\n   */\n  fitInternal(geometry, options) {\n    options = options || {};\n    let size = options.size;\n    if (!size) {\n      size = this.getViewportSizeMinusPadding_();\n    }\n    const padding =\n      options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    const nearest = options.nearest !== undefined ? options.nearest : false;\n    let minResolution;\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.getResolutionForZoom(options.maxZoom);\n    } else {\n      minResolution = 0;\n    }\n\n    const rotatedExtent = this.rotatedExtentForGeometry(geometry);\n\n    // calculate resolution\n    let resolution = this.getResolutionForExtentInternal(rotatedExtent, [\n      size[0] - padding[1] - padding[3],\n      size[1] - padding[0] - padding[2],\n    ]);\n    resolution = isNaN(resolution)\n      ? minResolution\n      : Math.max(resolution, minResolution);\n    resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\n\n    // calculate center\n    const rotation = this.getRotation();\n    const sinAngle = Math.sin(rotation);\n    const cosAngle = Math.cos(rotation);\n    const centerRot = getCenter(rotatedExtent);\n    centerRot[0] += ((padding[1] - padding[3]) / 2) * resolution;\n    centerRot[1] += ((padding[0] - padding[2]) / 2) * resolution;\n    const centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\n    const centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\n    const center = this.getConstrainedCenter([centerX, centerY], resolution);\n    const callback = options.callback ? options.callback : VOID;\n\n    if (options.duration !== undefined) {\n      this.animateInternal(\n        {\n          resolution: resolution,\n          center: center,\n          duration: options.duration,\n          easing: options.easing,\n        },\n        callback\n      );\n    } else {\n      this.targetResolution_ = resolution;\n      this.targetCenter_ = center;\n      this.applyTargetState_(false, true);\n      animationCallback(callback, true);\n    }\n  }\n\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n  centerOn(coordinate, size, position) {\n    this.centerOnInternal(\n      fromUserCoordinate(coordinate, this.getProjection()),\n      size,\n      position\n    );\n  }\n\n  /**\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   */\n  centerOnInternal(coordinate, size, position) {\n    this.setCenterInternal(\n      calculateCenterOn(\n        coordinate,\n        size,\n        position,\n        this.getResolution(),\n        this.getRotation()\n      )\n    );\n  }\n\n  /**\n   * Calculates the shift between map and viewport center.\n   * @param {import(\"./coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {import(\"./size.js\").Size} size Size.\n   * @return {Array<number>|undefined} Center shift.\n   */\n  calculateCenterShift(center, resolution, rotation, size) {\n    let centerShift;\n    const padding = this.padding_;\n    if (padding && center) {\n      const reducedSize = this.getViewportSizeMinusPadding_(-rotation);\n      const shiftedCenter = calculateCenterOn(\n        center,\n        size,\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\n        resolution,\n        rotation\n      );\n      centerShift = [\n        center[0] - shiftedCenter[0],\n        center[1] - shiftedCenter[1],\n      ];\n    }\n    return centerShift;\n  }\n\n  /**\n   * @return {boolean} Is defined.\n   */\n  isDef() {\n    return !!this.getCenterInternal() && this.getResolution() !== undefined;\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   * @api\n   */\n  adjustCenter(deltaCoordinates) {\n    const center = toUserCoordinate(this.targetCenter_, this.getProjection());\n    this.setCenter([\n      center[0] + deltaCoordinates[0],\n      center[1] + deltaCoordinates[1],\n    ]);\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   */\n  adjustCenterInternal(deltaCoordinates) {\n    const center = this.targetCenter_;\n    this.setCenterInternal([\n      center[0] + deltaCoordinates[0],\n      center[1] + deltaCoordinates[1],\n    ]);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  adjustResolution(ratio, anchor) {\n    anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n    this.adjustResolutionInternal(ratio, anchor);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  adjustResolutionInternal(ratio, anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const size = this.getViewportSize_(this.getRotation());\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_ * ratio,\n      0,\n      size,\n      isMoving\n    );\n\n    if (anchor) {\n      this.targetCenter_ = this.calculateCenterZoom(newResolution, anchor);\n    }\n\n    this.targetResolution_ *= ratio;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom level.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  adjustZoom(delta, anchor) {\n    this.adjustResolution(Math.pow(this.zoomFactor_, -delta), anchor);\n  }\n\n  /**\n   * Adds a value to the view rotation, optionally using an anchor. Any rotation\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   * @api\n   */\n  adjustRotation(delta, anchor) {\n    if (anchor) {\n      anchor = fromUserCoordinate(anchor, this.getProjection());\n    }\n    this.adjustRotationInternal(delta, anchor);\n  }\n\n  /**\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   */\n  adjustRotationInternal(delta, anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const newRotation = this.constraints_.rotation(\n      this.targetRotation_ + delta,\n      isMoving\n    );\n    if (anchor) {\n      this.targetCenter_ = this.calculateCenterRotate(newRotation, anchor);\n    }\n    this.targetRotation_ += delta;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the center of the current view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n  setCenter(center) {\n    this.setCenterInternal(\n      center ? fromUserCoordinate(center, this.getProjection()) : center\n    );\n  }\n\n  /**\n   * Set the center using the view projection (not the user projection).\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   */\n  setCenterInternal(center) {\n    this.targetCenter_ = center;\n    this.applyTargetState_();\n  }\n\n  /**\n   * @param {import(\"./ViewHint.js\").default} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n  setHint(hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  }\n\n  /**\n   * Set the resolution for this view. Any resolution constraint will apply.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n  setResolution(resolution) {\n    this.targetResolution_ = resolution;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the rotation for this view. Any rotation constraint will apply.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  setRotation(rotation) {\n    this.targetRotation_ = rotation;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Zoom to a specific zoom level. Any resolution constrain will apply.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n  setZoom(zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  }\n\n  /**\n   * Recompute rotation/resolution/center based on target values.\n   * Note: we have to compute rotation first, then resolution and center considering that\n   * parameters can influence one another in case a view extent constraint is present.\n   * @param {boolean} [doNotCancelAnims] Do not cancel animations.\n   * @param {boolean} [forceMoving] Apply constraints as if the view is moving.\n   * @private\n   */\n  applyTargetState_(doNotCancelAnims, forceMoving) {\n    const isMoving =\n      this.getAnimating() || this.getInteracting() || forceMoving;\n\n    // compute rotation\n    const newRotation = this.constraints_.rotation(\n      this.targetRotation_,\n      isMoving\n    );\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_,\n      0,\n      size,\n      isMoving\n    );\n    const newCenter = this.constraints_.center(\n      this.targetCenter_,\n      newResolution,\n      size,\n      isMoving,\n      this.calculateCenterShift(\n        this.targetCenter_,\n        newResolution,\n        newRotation,\n        size\n      )\n    );\n\n    if (this.get(ViewProperty.ROTATION) !== newRotation) {\n      this.set(ViewProperty.ROTATION, newRotation);\n    }\n    if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\n      this.set(ViewProperty.RESOLUTION, newResolution);\n      this.set('zoom', this.getZoom(), true);\n    }\n    if (\n      !newCenter ||\n      !this.get(ViewProperty.CENTER) ||\n      !equals(this.get(ViewProperty.CENTER), newCenter)\n    ) {\n      this.set(ViewProperty.CENTER, newCenter);\n    }\n\n    if (this.getAnimating() && !doNotCancelAnims) {\n      this.cancelAnimations();\n    }\n    this.cancelAnchor_ = undefined;\n  }\n\n  /**\n   * If any constraints need to be applied, an animation will be triggered.\n   * This is typically done on interaction end.\n   * Note: calling this with a duration of 0 will apply the constrained values straight away,\n   * without animation.\n   * @param {number} [duration] The animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  resolveConstraints(duration, resolutionDirection, anchor) {\n    duration = duration !== undefined ? duration : 200;\n    const direction = resolutionDirection || 0;\n\n    const newRotation = this.constraints_.rotation(this.targetRotation_);\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_,\n      direction,\n      size\n    );\n    const newCenter = this.constraints_.center(\n      this.targetCenter_,\n      newResolution,\n      size,\n      false,\n      this.calculateCenterShift(\n        this.targetCenter_,\n        newResolution,\n        newRotation,\n        size\n      )\n    );\n\n    if (duration === 0 && !this.cancelAnchor_) {\n      this.targetResolution_ = newResolution;\n      this.targetRotation_ = newRotation;\n      this.targetCenter_ = newCenter;\n      this.applyTargetState_();\n      return;\n    }\n\n    anchor = anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n    this.cancelAnchor_ = undefined;\n\n    if (\n      this.getResolution() !== newResolution ||\n      this.getRotation() !== newRotation ||\n      !this.getCenterInternal() ||\n      !equals(this.getCenterInternal(), newCenter)\n    ) {\n      if (this.getAnimating()) {\n        this.cancelAnimations();\n      }\n\n      this.animateInternal({\n        rotation: newRotation,\n        center: newCenter,\n        resolution: newResolution,\n        duration: duration,\n        easing: easeOut,\n        anchor: anchor,\n      });\n    }\n  }\n\n  /**\n   * Notify the View that an interaction has started.\n   * The view state will be resolved to a stable one if needed\n   * (depending on its constraints).\n   * @api\n   */\n  beginInteraction() {\n    this.resolveConstraints(0);\n\n    this.setHint(ViewHint.INTERACTING, 1);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  endInteraction(duration, resolutionDirection, anchor) {\n    anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n    this.endInteractionInternal(duration, resolutionDirection, anchor);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  endInteractionInternal(duration, resolutionDirection, anchor) {\n    if (!this.getInteracting()) {\n      return;\n    }\n    this.setHint(ViewHint.INTERACTING, -1);\n    this.resolveConstraints(duration, resolutionDirection, anchor);\n  }\n\n  /**\n   * Get a valid position for the view center according to the current constraints.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n   * @param {number} [targetResolution] Target resolution. If not supplied, the current one will be used.\n   * This is useful to guess a valid center position at a different zoom level.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n   */\n  getConstrainedCenter(targetCenter, targetResolution) {\n    const size = this.getViewportSize_(this.getRotation());\n    return this.constraints_.center(\n      targetCenter,\n      targetResolution || this.getResolution(),\n      size\n    );\n  }\n\n  /**\n   * Get a valid zoom level according to the current view constraints.\n   * @param {number|undefined} targetZoom Target zoom.\n   * @param {number} [direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid zoom level.\n   */\n  getConstrainedZoom(targetZoom, direction) {\n    const targetRes = this.getResolutionForZoom(targetZoom);\n    return this.getZoomForResolution(\n      this.getConstrainedResolution(targetRes, direction)\n    );\n  }\n\n  /**\n   * Get a valid resolution according to the current view constraints.\n   * @param {number|undefined} targetResolution Target resolution.\n   * @param {number} [direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid resolution.\n   */\n  getConstrainedResolution(targetResolution, direction) {\n    direction = direction || 0;\n    const size = this.getViewportSize_(this.getRotation());\n\n    return this.constraints_.resolution(targetResolution, direction, size);\n  }\n}\n\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function () {\n    callback(returnValue);\n  }, 0);\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    const smooth =\n      options.smoothExtentConstraint !== undefined\n        ? options.smoothExtentConstraint\n        : true;\n    return createExtent(options.extent, options.constrainOnlyCenter, smooth);\n  }\n\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  if (options.multiWorld !== true && projection.isGlobal()) {\n    const extent = projection.getExtent().slice();\n    extent[0] = -Infinity;\n    extent[2] = Infinity;\n    return createExtent(extent, false, false);\n  }\n\n  return centerNone;\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  let resolutionConstraint;\n  let maxResolution;\n  let minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  const defaultMaxZoom = 28;\n  const defaultZoomFactor = 2;\n\n  let minZoom =\n    options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n\n  let maxZoom =\n    options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n\n  const zoomFactor =\n    options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n\n  const multiWorld =\n    options.multiWorld !== undefined ? options.multiWorld : false;\n\n  const smooth =\n    options.smoothResolutionConstraint !== undefined\n      ? options.smoothResolutionConstraint\n      : true;\n\n  const showFullExtent =\n    options.showFullExtent !== undefined ? options.showFullExtent : false;\n\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  const projExtent = projection.getExtent();\n  let constrainOnlyCenter = options.constrainOnlyCenter;\n  let extent = options.extent;\n  if (!multiWorld && !extent && projection.isGlobal()) {\n    constrainOnlyCenter = false;\n    extent = projExtent;\n  }\n\n  if (options.resolutions !== undefined) {\n    const resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution =\n      resolutions[maxZoom] !== undefined\n        ? resolutions[maxZoom]\n        : resolutions[resolutions.length - 1];\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToResolutions(\n        resolutions,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    } else {\n      resolutionConstraint = createMinMaxResolution(\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    }\n  } else {\n    // calculate the default min and max resolution\n    const size = !projExtent\n      ? // use an extent that can fit the whole world if need be\n        (360 * METERS_PER_UNIT.degrees) / projection.getMetersPerUnit()\n      : Math.max(getWidth(projExtent), getHeight(projExtent));\n\n    const defaultMaxResolution =\n      size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n\n    const defaultMinResolution =\n      defaultMaxResolution /\n      Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom =\n      minZoom +\n      Math.floor(\n        Math.log(maxResolution / minResolution) / Math.log(zoomFactor)\n      );\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToPower(\n        zoomFactor,\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    } else {\n      resolutionConstraint = createMinMaxResolution(\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    }\n  }\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor,\n  };\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  const enableRotation =\n    options.enableRotation !== undefined ? options.enableRotation : true;\n  if (enableRotation) {\n    const constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    }\n    if (constrainRotation === false) {\n      return rotationNone;\n    }\n    if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    }\n    return rotationNone;\n  }\n  return disable;\n}\n\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {import(\"./size.js\").Size} size Box pixel size.\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\n */\nfunction calculateCenterOn(coordinate, size, position, resolution, rotation) {\n  // calculate rotated position\n  const cosAngle = Math.cos(-rotation);\n  let sinAngle = Math.sin(-rotation);\n  let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  rotX += (size[0] / 2 - position[0]) * resolution;\n  rotY += (position[1] - size[1] / 2) * resolution;\n\n  // go back to original angle\n  sinAngle = -sinAngle; // go back to original rotation\n  const centerX = rotX * cosAngle - rotY * sinAngle;\n  const centerY = rotY * cosAngle + rotX * sinAngle;\n\n  return [centerX, centerY];\n}\n\nexport default View;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}