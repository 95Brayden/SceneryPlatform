{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/geom/MultiPoint\n */\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { closestSquaredDistanceXY, containsXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nclass MultiPoint extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    if (layout && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(layout, /** @type {Array<number>} */coordinates);\n    } else {\n      this.setCoordinates( /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n      coordinates, layout);\n    }\n  }\n\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n  appendPoint(point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @api\n   */\n  clone() {\n    const multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);\n    multiPoint.applyProperties(this);\n    return multiPoint;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const squaredDistance = squaredDx(x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n        for (let j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n        closestPoint.length = stride;\n      }\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  }\n\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n  getPoint(index) {\n    const n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;\n    if (index < 0 || n <= index) {\n      return null;\n    }\n    return new Point(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);\n  }\n\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n  getPoints() {\n    const flatCoordinates = this.flatCoordinates;\n    const layout = this.layout;\n    const stride = this.stride;\n    /** @type {Array<Point>} */\n    const points = [];\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n    return points;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'MultiPoint';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n}\nexport default MultiPoint;","map":{"version":3,"names":["Point","SimpleGeometry","closestSquaredDistanceXY","containsXY","deflateCoordinates","extend","inflateCoordinates","squaredDistance","squaredDx","MultiPoint","constructor","coordinates","layout","Array","isArray","setFlatCoordinates","setCoordinates","appendPoint","point","flatCoordinates","getFlatCoordinates","slice","changed","clone","multiPoint","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","stride","i","ii","length","j","getCoordinates","getPoint","index","n","getPoints","points","push","getType","intersectsExtent","extent","setLayout"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/geom/MultiPoint.js"],"sourcesContent":["/**\n * @module ol/geom/MultiPoint\n */\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {closestSquaredDistanceXY, containsXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nclass MultiPoint extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    if (layout && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n  appendPoint(point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @api\n   */\n  clone() {\n    const multiPoint = new MultiPoint(\n      this.flatCoordinates.slice(),\n      this.layout\n    );\n    multiPoint.applyProperties(this);\n    return multiPoint;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const squaredDistance = squaredDx(\n        x,\n        y,\n        flatCoordinates[i],\n        flatCoordinates[i + 1]\n      );\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n        for (let j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n        closestPoint.length = stride;\n      }\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n  getPoint(index) {\n    const n = !this.flatCoordinates\n      ? 0\n      : this.flatCoordinates.length / this.stride;\n    if (index < 0 || n <= index) {\n      return null;\n    }\n    return new Point(\n      this.flatCoordinates.slice(\n        index * this.stride,\n        (index + 1) * this.stride\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n  getPoints() {\n    const flatCoordinates = this.flatCoordinates;\n    const layout = this.layout;\n    const stride = this.stride;\n    /** @type {Array<Point>} */\n    const points = [];\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n    return points;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'MultiPoint';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default MultiPoint;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}