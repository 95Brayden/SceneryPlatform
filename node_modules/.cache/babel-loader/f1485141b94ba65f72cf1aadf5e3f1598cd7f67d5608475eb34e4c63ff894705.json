{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport BaseDecoder from './basedecoder.js';\nconst MIN_BITS = 9;\nconst CLEAR_CODE = 256; // clear code\nconst EOI_CODE = 257; // end of information\nconst MAX_BYTELENGTH = 12;\nfunction getByte(array, position, length) {\n  const d = position % 8;\n  const a = Math.floor(position / 8);\n  const de = 8 - d;\n  const ef = position + length - (a + 1) * 8;\n  let fg = 8 * (a + 2) - (position + length);\n  const dg = (a + 2) * 8 - position;\n  fg = Math.max(0, fg);\n  if (a >= array.length) {\n    console.warn('ran off the end of the buffer before finding EOI_CODE (end on input code)');\n    return EOI_CODE;\n  }\n  let chunk1 = array[a] & 2 ** (8 - d) - 1;\n  chunk1 <<= length - de;\n  let chunks = chunk1;\n  if (a + 1 < array.length) {\n    let chunk2 = array[a + 1] >>> fg;\n    chunk2 <<= Math.max(0, length - dg);\n    chunks += chunk2;\n  }\n  if (ef > 8 && a + 2 < array.length) {\n    const hi = (a + 3) * 8 - (position + length);\n    const chunk3 = array[a + 2] >>> hi;\n    chunks += chunk3;\n  }\n  return chunks;\n}\nfunction appendReversed(dest, source) {\n  for (let i = source.length - 1; i >= 0; i--) {\n    dest.push(source[i]);\n  }\n  return dest;\n}\nfunction decompress(input) {\n  const dictionaryIndex = new Uint16Array(4093);\n  const dictionaryChar = new Uint8Array(4093);\n  for (let i = 0; i <= 257; i++) {\n    dictionaryIndex[i] = 4096;\n    dictionaryChar[i] = i;\n  }\n  let dictionaryLength = 258;\n  let byteLength = MIN_BITS;\n  let position = 0;\n  function initDictionary() {\n    dictionaryLength = 258;\n    byteLength = MIN_BITS;\n  }\n  function getNext(array) {\n    const byte = getByte(array, position, byteLength);\n    position += byteLength;\n    return byte;\n  }\n  function addToDictionary(i, c) {\n    dictionaryChar[dictionaryLength] = c;\n    dictionaryIndex[dictionaryLength] = i;\n    dictionaryLength++;\n    return dictionaryLength - 1;\n  }\n  function getDictionaryReversed(n) {\n    const rev = [];\n    for (let i = n; i !== 4096; i = dictionaryIndex[i]) {\n      rev.push(dictionaryChar[i]);\n    }\n    return rev;\n  }\n  const result = [];\n  initDictionary();\n  const array = new Uint8Array(input);\n  let code = getNext(array);\n  let oldCode;\n  while (code !== EOI_CODE) {\n    if (code === CLEAR_CODE) {\n      initDictionary();\n      code = getNext(array);\n      while (code === CLEAR_CODE) {\n        code = getNext(array);\n      }\n      if (code === EOI_CODE) {\n        break;\n      } else if (code > CLEAR_CODE) {\n        throw new Error(`corrupted code at scanline ${code}`);\n      } else {\n        const val = getDictionaryReversed(code);\n        appendReversed(result, val);\n        oldCode = code;\n      }\n    } else if (code < dictionaryLength) {\n      const val = getDictionaryReversed(code);\n      appendReversed(result, val);\n      addToDictionary(oldCode, val[val.length - 1]);\n      oldCode = code;\n    } else {\n      const oldVal = getDictionaryReversed(oldCode);\n      if (!oldVal) {\n        throw new Error(`Bogus entry. Not in dictionary, ${oldCode} / ${dictionaryLength}, position: ${position}`);\n      }\n      appendReversed(result, oldVal);\n      result.push(oldVal[oldVal.length - 1]);\n      addToDictionary(oldCode, oldVal[oldVal.length - 1]);\n      oldCode = code;\n    }\n    if (dictionaryLength + 1 >= 2 ** byteLength) {\n      if (byteLength === MAX_BYTELENGTH) {\n        oldCode = undefined;\n      } else {\n        byteLength++;\n      }\n    }\n    code = getNext(array);\n  }\n  return new Uint8Array(result);\n}\nexport default class LZWDecoder extends BaseDecoder {\n  decodeBlock(buffer) {\n    return decompress(buffer, false).buffer;\n  }\n}","map":{"version":3,"names":["BaseDecoder","MIN_BITS","CLEAR_CODE","EOI_CODE","MAX_BYTELENGTH","getByte","array","position","length","d","a","Math","floor","de","ef","fg","dg","max","console","warn","chunk1","chunks","chunk2","hi","chunk3","appendReversed","dest","source","i","push","decompress","input","dictionaryIndex","Uint16Array","dictionaryChar","Uint8Array","dictionaryLength","byteLength","initDictionary","getNext","byte","addToDictionary","c","getDictionaryReversed","n","rev","result","code","oldCode","Error","val","oldVal","undefined","LZWDecoder","decodeBlock","buffer"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/geotiff/dist-module/compression/lzw.js"],"sourcesContent":["import BaseDecoder from './basedecoder.js';\n\nconst MIN_BITS = 9;\nconst CLEAR_CODE = 256; // clear code\nconst EOI_CODE = 257; // end of information\nconst MAX_BYTELENGTH = 12;\n\nfunction getByte(array, position, length) {\n  const d = position % 8;\n  const a = Math.floor(position / 8);\n  const de = 8 - d;\n  const ef = (position + length) - ((a + 1) * 8);\n  let fg = (8 * (a + 2)) - (position + length);\n  const dg = ((a + 2) * 8) - position;\n  fg = Math.max(0, fg);\n  if (a >= array.length) {\n    console.warn('ran off the end of the buffer before finding EOI_CODE (end on input code)');\n    return EOI_CODE;\n  }\n  let chunk1 = array[a] & ((2 ** (8 - d)) - 1);\n  chunk1 <<= (length - de);\n  let chunks = chunk1;\n  if (a + 1 < array.length) {\n    let chunk2 = array[a + 1] >>> fg;\n    chunk2 <<= Math.max(0, (length - dg));\n    chunks += chunk2;\n  }\n  if (ef > 8 && a + 2 < array.length) {\n    const hi = ((a + 3) * 8) - (position + length);\n    const chunk3 = array[a + 2] >>> hi;\n    chunks += chunk3;\n  }\n  return chunks;\n}\n\nfunction appendReversed(dest, source) {\n  for (let i = source.length - 1; i >= 0; i--) {\n    dest.push(source[i]);\n  }\n  return dest;\n}\n\nfunction decompress(input) {\n  const dictionaryIndex = new Uint16Array(4093);\n  const dictionaryChar = new Uint8Array(4093);\n  for (let i = 0; i <= 257; i++) {\n    dictionaryIndex[i] = 4096;\n    dictionaryChar[i] = i;\n  }\n  let dictionaryLength = 258;\n  let byteLength = MIN_BITS;\n  let position = 0;\n\n  function initDictionary() {\n    dictionaryLength = 258;\n    byteLength = MIN_BITS;\n  }\n  function getNext(array) {\n    const byte = getByte(array, position, byteLength);\n    position += byteLength;\n    return byte;\n  }\n  function addToDictionary(i, c) {\n    dictionaryChar[dictionaryLength] = c;\n    dictionaryIndex[dictionaryLength] = i;\n    dictionaryLength++;\n    return dictionaryLength - 1;\n  }\n  function getDictionaryReversed(n) {\n    const rev = [];\n    for (let i = n; i !== 4096; i = dictionaryIndex[i]) {\n      rev.push(dictionaryChar[i]);\n    }\n    return rev;\n  }\n\n  const result = [];\n  initDictionary();\n  const array = new Uint8Array(input);\n  let code = getNext(array);\n  let oldCode;\n  while (code !== EOI_CODE) {\n    if (code === CLEAR_CODE) {\n      initDictionary();\n      code = getNext(array);\n      while (code === CLEAR_CODE) {\n        code = getNext(array);\n      }\n\n      if (code === EOI_CODE) {\n        break;\n      } else if (code > CLEAR_CODE) {\n        throw new Error(`corrupted code at scanline ${code}`);\n      } else {\n        const val = getDictionaryReversed(code);\n        appendReversed(result, val);\n        oldCode = code;\n      }\n    } else if (code < dictionaryLength) {\n      const val = getDictionaryReversed(code);\n      appendReversed(result, val);\n      addToDictionary(oldCode, val[val.length - 1]);\n      oldCode = code;\n    } else {\n      const oldVal = getDictionaryReversed(oldCode);\n      if (!oldVal) {\n        throw new Error(`Bogus entry. Not in dictionary, ${oldCode} / ${dictionaryLength}, position: ${position}`);\n      }\n      appendReversed(result, oldVal);\n      result.push(oldVal[oldVal.length - 1]);\n      addToDictionary(oldCode, oldVal[oldVal.length - 1]);\n      oldCode = code;\n    }\n\n    if (dictionaryLength + 1 >= (2 ** byteLength)) {\n      if (byteLength === MAX_BYTELENGTH) {\n        oldCode = undefined;\n      } else {\n        byteLength++;\n      }\n    }\n    code = getNext(array);\n  }\n  return new Uint8Array(result);\n}\n\nexport default class LZWDecoder extends BaseDecoder {\n  decodeBlock(buffer) {\n    return decompress(buffer, false).buffer;\n  }\n}\n"],"mappings":";;;;AAAA,OAAOA,WAAW,MAAM,kBAAkB;AAE1C,MAAMC,QAAQ,GAAG,CAAC;AAClB,MAAMC,UAAU,GAAG,GAAG,CAAC,CAAC;AACxB,MAAMC,QAAQ,GAAG,GAAG,CAAC,CAAC;AACtB,MAAMC,cAAc,GAAG,EAAE;AAEzB,SAASC,OAAOA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,MAAM,EAAE;EACxC,MAAMC,CAAC,GAAGF,QAAQ,GAAG,CAAC;EACtB,MAAMG,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACL,QAAQ,GAAG,CAAC,CAAC;EAClC,MAAMM,EAAE,GAAG,CAAC,GAAGJ,CAAC;EAChB,MAAMK,EAAE,GAAIP,QAAQ,GAAGC,MAAM,GAAK,CAACE,CAAC,GAAG,CAAC,IAAI,CAAE;EAC9C,IAAIK,EAAE,GAAI,CAAC,IAAIL,CAAC,GAAG,CAAC,CAAC,IAAKH,QAAQ,GAAGC,MAAM,CAAC;EAC5C,MAAMQ,EAAE,GAAI,CAACN,CAAC,GAAG,CAAC,IAAI,CAAC,GAAIH,QAAQ;EACnCQ,EAAE,GAAGJ,IAAI,CAACM,GAAG,CAAC,CAAC,EAAEF,EAAE,CAAC;EACpB,IAAIL,CAAC,IAAIJ,KAAK,CAACE,MAAM,EAAE;IACrBU,OAAO,CAACC,IAAI,CAAC,2EAA2E,CAAC;IACzF,OAAOhB,QAAQ;EACjB;EACA,IAAIiB,MAAM,GAAGd,KAAK,CAACI,CAAC,CAAC,GAAK,CAAC,KAAK,CAAC,GAAGD,CAAC,CAAC,GAAI,CAAE;EAC5CW,MAAM,KAAMZ,MAAM,GAAGK,EAAG;EACxB,IAAIQ,MAAM,GAAGD,MAAM;EACnB,IAAIV,CAAC,GAAG,CAAC,GAAGJ,KAAK,CAACE,MAAM,EAAE;IACxB,IAAIc,MAAM,GAAGhB,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC,KAAKK,EAAE;IAChCO,MAAM,KAAKX,IAAI,CAACM,GAAG,CAAC,CAAC,EAAGT,MAAM,GAAGQ,EAAG,CAAC;IACrCK,MAAM,IAAIC,MAAM;EAClB;EACA,IAAIR,EAAE,GAAG,CAAC,IAAIJ,CAAC,GAAG,CAAC,GAAGJ,KAAK,CAACE,MAAM,EAAE;IAClC,MAAMe,EAAE,GAAI,CAACb,CAAC,GAAG,CAAC,IAAI,CAAC,IAAKH,QAAQ,GAAGC,MAAM,CAAC;IAC9C,MAAMgB,MAAM,GAAGlB,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC,KAAKa,EAAE;IAClCF,MAAM,IAAIG,MAAM;EAClB;EACA,OAAOH,MAAM;AACf;AAEA,SAASI,cAAcA,CAACC,IAAI,EAAEC,MAAM,EAAE;EACpC,KAAK,IAAIC,CAAC,GAAGD,MAAM,CAACnB,MAAM,GAAG,CAAC,EAAEoB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC3CF,IAAI,CAACG,IAAI,CAACF,MAAM,CAACC,CAAC,CAAC,CAAC;EACtB;EACA,OAAOF,IAAI;AACb;AAEA,SAASI,UAAUA,CAACC,KAAK,EAAE;EACzB,MAAMC,eAAe,GAAG,IAAIC,WAAW,CAAC,IAAI,CAAC;EAC7C,MAAMC,cAAc,GAAG,IAAIC,UAAU,CAAC,IAAI,CAAC;EAC3C,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,GAAG,EAAEA,CAAC,EAAE,EAAE;IAC7BI,eAAe,CAACJ,CAAC,CAAC,GAAG,IAAI;IACzBM,cAAc,CAACN,CAAC,CAAC,GAAGA,CAAC;EACvB;EACA,IAAIQ,gBAAgB,GAAG,GAAG;EAC1B,IAAIC,UAAU,GAAGpC,QAAQ;EACzB,IAAIM,QAAQ,GAAG,CAAC;EAEhB,SAAS+B,cAAcA,CAAA,EAAG;IACxBF,gBAAgB,GAAG,GAAG;IACtBC,UAAU,GAAGpC,QAAQ;EACvB;EACA,SAASsC,OAAOA,CAACjC,KAAK,EAAE;IACtB,MAAMkC,IAAI,GAAGnC,OAAO,CAACC,KAAK,EAAEC,QAAQ,EAAE8B,UAAU,CAAC;IACjD9B,QAAQ,IAAI8B,UAAU;IACtB,OAAOG,IAAI;EACb;EACA,SAASC,eAAeA,CAACb,CAAC,EAAEc,CAAC,EAAE;IAC7BR,cAAc,CAACE,gBAAgB,CAAC,GAAGM,CAAC;IACpCV,eAAe,CAACI,gBAAgB,CAAC,GAAGR,CAAC;IACrCQ,gBAAgB,EAAE;IAClB,OAAOA,gBAAgB,GAAG,CAAC;EAC7B;EACA,SAASO,qBAAqBA,CAACC,CAAC,EAAE;IAChC,MAAMC,GAAG,GAAG,EAAE;IACd,KAAK,IAAIjB,CAAC,GAAGgB,CAAC,EAAEhB,CAAC,KAAK,IAAI,EAAEA,CAAC,GAAGI,eAAe,CAACJ,CAAC,CAAC,EAAE;MAClDiB,GAAG,CAAChB,IAAI,CAACK,cAAc,CAACN,CAAC,CAAC,CAAC;IAC7B;IACA,OAAOiB,GAAG;EACZ;EAEA,MAAMC,MAAM,GAAG,EAAE;EACjBR,cAAc,CAAC,CAAC;EAChB,MAAMhC,KAAK,GAAG,IAAI6B,UAAU,CAACJ,KAAK,CAAC;EACnC,IAAIgB,IAAI,GAAGR,OAAO,CAACjC,KAAK,CAAC;EACzB,IAAI0C,OAAO;EACX,OAAOD,IAAI,KAAK5C,QAAQ,EAAE;IACxB,IAAI4C,IAAI,KAAK7C,UAAU,EAAE;MACvBoC,cAAc,CAAC,CAAC;MAChBS,IAAI,GAAGR,OAAO,CAACjC,KAAK,CAAC;MACrB,OAAOyC,IAAI,KAAK7C,UAAU,EAAE;QAC1B6C,IAAI,GAAGR,OAAO,CAACjC,KAAK,CAAC;MACvB;MAEA,IAAIyC,IAAI,KAAK5C,QAAQ,EAAE;QACrB;MACF,CAAC,MAAM,IAAI4C,IAAI,GAAG7C,UAAU,EAAE;QAC5B,MAAM,IAAI+C,KAAK,CAAE,8BAA6BF,IAAK,EAAC,CAAC;MACvD,CAAC,MAAM;QACL,MAAMG,GAAG,GAAGP,qBAAqB,CAACI,IAAI,CAAC;QACvCtB,cAAc,CAACqB,MAAM,EAAEI,GAAG,CAAC;QAC3BF,OAAO,GAAGD,IAAI;MAChB;IACF,CAAC,MAAM,IAAIA,IAAI,GAAGX,gBAAgB,EAAE;MAClC,MAAMc,GAAG,GAAGP,qBAAqB,CAACI,IAAI,CAAC;MACvCtB,cAAc,CAACqB,MAAM,EAAEI,GAAG,CAAC;MAC3BT,eAAe,CAACO,OAAO,EAAEE,GAAG,CAACA,GAAG,CAAC1C,MAAM,GAAG,CAAC,CAAC,CAAC;MAC7CwC,OAAO,GAAGD,IAAI;IAChB,CAAC,MAAM;MACL,MAAMI,MAAM,GAAGR,qBAAqB,CAACK,OAAO,CAAC;MAC7C,IAAI,CAACG,MAAM,EAAE;QACX,MAAM,IAAIF,KAAK,CAAE,mCAAkCD,OAAQ,MAAKZ,gBAAiB,eAAc7B,QAAS,EAAC,CAAC;MAC5G;MACAkB,cAAc,CAACqB,MAAM,EAAEK,MAAM,CAAC;MAC9BL,MAAM,CAACjB,IAAI,CAACsB,MAAM,CAACA,MAAM,CAAC3C,MAAM,GAAG,CAAC,CAAC,CAAC;MACtCiC,eAAe,CAACO,OAAO,EAAEG,MAAM,CAACA,MAAM,CAAC3C,MAAM,GAAG,CAAC,CAAC,CAAC;MACnDwC,OAAO,GAAGD,IAAI;IAChB;IAEA,IAAIX,gBAAgB,GAAG,CAAC,IAAK,CAAC,IAAIC,UAAW,EAAE;MAC7C,IAAIA,UAAU,KAAKjC,cAAc,EAAE;QACjC4C,OAAO,GAAGI,SAAS;MACrB,CAAC,MAAM;QACLf,UAAU,EAAE;MACd;IACF;IACAU,IAAI,GAAGR,OAAO,CAACjC,KAAK,CAAC;EACvB;EACA,OAAO,IAAI6B,UAAU,CAACW,MAAM,CAAC;AAC/B;AAEA,eAAe,MAAMO,UAAU,SAASrD,WAAW,CAAC;EAClDsD,WAAWA,CAACC,MAAM,EAAE;IAClB,OAAOzB,UAAU,CAACyB,MAAM,EAAE,KAAK,CAAC,CAACA,MAAM;EACzC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}