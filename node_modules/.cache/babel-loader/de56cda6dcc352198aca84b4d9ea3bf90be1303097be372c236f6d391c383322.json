{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/source/Cluster\n */\n\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport Point from '../geom/Point.js';\nimport VectorSource from './Vector.js';\nimport { add as addCoordinate, scale as scaleCoordinate } from '../coordinate.js';\nimport { assert } from '../asserts.js';\nimport { buffer, createEmpty, createOrUpdateFromCoordinate, getCenter } from '../extent.js';\nimport { getUid } from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [distance=20] Distance in pixels within which features will\n * be clustered together.\n * @property {number} [minDistance=0] Minimum distance in pixels between clusters.\n * Will be capped at the configured distance.\n * By default no minimum distance is guaranteed. This config can be used to avoid\n * overlapping icons. As a tradoff, the cluster feature's position will no longer be\n * the center of all its features.\n * @property {function(Feature):Point} [geometryFunction]\n * Function that takes an {@link module:ol/Feature~Feature} as argument and returns an\n * {@link module:ol/geom/Point~Point} as cluster calculation point for the feature. When a\n * feature should not be considered for clustering, the function should return\n * `null`. The default, which works when the underlying source contains point\n * features only, is\n * ```js\n * function(feature) {\n *   return feature.getGeometry();\n * }\n * ```\n * See {@link module:ol/geom/Polygon~Polygon#getInteriorPoint} for a way to get a cluster\n * calculation point for polygons.\n * @property {function(Point, Array<Feature>):Feature} [createCluster]\n * Function that takes the cluster's center {@link module:ol/geom/Point~Point} and an array\n * of {@link module:ol/Feature~Feature} included in this cluster. Must return a\n * {@link module:ol/Feature~Feature} that will be used to render. Default implementation is:\n * ```js\n * function(point, features) {\n *   return new Feature({\n *     geometry: point,\n *     features: features\n *   });\n * }\n * ```\n * @property {VectorSource} [source=null] Source.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n */\n\n/**\n * @classdesc\n * Layer source to cluster vector data. Works out of the box with point\n * geometries. For other geometry types, or if not all geometries should be\n * considered for clustering, a custom `geometryFunction` can be defined.\n *\n * If the instance is disposed without also disposing the underlying\n * source `setSource(null)` has to be called to remove the listener reference\n * from the wrapped source.\n * @api\n */\nclass Cluster extends VectorSource {\n  /**\n   * @param {Options} options Cluster options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      wrapX: options.wrapX\n    });\n\n    /**\n     * @type {number|undefined}\n     * @protected\n     */\n    this.resolution = undefined;\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.distance = options.distance !== undefined ? options.distance : 20;\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.minDistance = options.minDistance || 0;\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.interpolationRatio = 0;\n\n    /**\n     * @type {Array<Feature>}\n     * @protected\n     */\n    this.features = [];\n\n    /**\n     * @param {Feature} feature Feature.\n     * @return {Point} Cluster calculation point.\n     * @protected\n     */\n    this.geometryFunction = options.geometryFunction || function (feature) {\n      const geometry = /** @type {Point} */feature.getGeometry();\n      assert(!geometry || geometry.getType() === 'Point', 'The default `geometryFunction` can only handle `Point` or null geometries');\n      return geometry;\n    };\n\n    /**\n     * @type {function(Point, Array<Feature>):Feature}\n     * @private\n     */\n    this.createCustomCluster_ = options.createCluster;\n\n    /**\n     * @type {VectorSource|null}\n     * @protected\n     */\n    this.source = null;\n\n    /**\n     * @private\n     */\n    this.boundRefresh_ = this.refresh.bind(this);\n    this.updateDistance(this.distance, this.minDistance);\n    this.setSource(options.source || null);\n  }\n\n  /**\n   * Remove all features from the source.\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/VectorEventType~VectorEventType#removefeature} events.\n   * @api\n   */\n  clear(fast) {\n    this.features.length = 0;\n    super.clear(fast);\n  }\n\n  /**\n   * Get the distance in pixels between clusters.\n   * @return {number} Distance.\n   * @api\n   */\n  getDistance() {\n    return this.distance;\n  }\n\n  /**\n   * Get a reference to the wrapped source.\n   * @return {VectorSource|null} Source.\n   * @api\n   */\n  getSource() {\n    return this.source;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  loadFeatures(extent, resolution, projection) {\n    this.source.loadFeatures(extent, resolution, projection);\n    if (resolution !== this.resolution) {\n      this.resolution = resolution;\n      this.refresh();\n    }\n  }\n\n  /**\n   * Set the distance within which features will be clusterd together.\n   * @param {number} distance The distance in pixels.\n   * @api\n   */\n  setDistance(distance) {\n    this.updateDistance(distance, this.minDistance);\n  }\n\n  /**\n   * Set the minimum distance between clusters. Will be capped at the\n   * configured distance.\n   * @param {number} minDistance The minimum distance in pixels.\n   * @api\n   */\n  setMinDistance(minDistance) {\n    this.updateDistance(this.distance, minDistance);\n  }\n\n  /**\n   * The configured minimum distance between clusters.\n   * @return {number} The minimum distance in pixels.\n   * @api\n   */\n  getMinDistance() {\n    return this.minDistance;\n  }\n\n  /**\n   * Replace the wrapped source.\n   * @param {VectorSource|null} source The new source for this instance.\n   * @api\n   */\n  setSource(source) {\n    if (this.source) {\n      this.source.removeEventListener(EventType.CHANGE, this.boundRefresh_);\n    }\n    this.source = source;\n    if (source) {\n      source.addEventListener(EventType.CHANGE, this.boundRefresh_);\n    }\n    this.refresh();\n  }\n\n  /**\n   * Handle the source changing.\n   */\n  refresh() {\n    this.clear();\n    this.cluster();\n    this.addFeatures(this.features);\n  }\n\n  /**\n   * Update the distances and refresh the source if necessary.\n   * @param {number} distance The new distance.\n   * @param {number} minDistance The new minimum distance.\n   */\n  updateDistance(distance, minDistance) {\n    const ratio = distance === 0 ? 0 : Math.min(minDistance, distance) / distance;\n    const changed = distance !== this.distance || this.interpolationRatio !== ratio;\n    this.distance = distance;\n    this.minDistance = minDistance;\n    this.interpolationRatio = ratio;\n    if (changed) {\n      this.refresh();\n    }\n  }\n\n  /**\n   * @protected\n   */\n  cluster() {\n    if (this.resolution === undefined || !this.source) {\n      return;\n    }\n    const extent = createEmpty();\n    const mapDistance = this.distance * this.resolution;\n    const features = this.source.getFeatures();\n\n    /** @type {Object<string, true>} */\n    const clustered = {};\n    for (let i = 0, ii = features.length; i < ii; i++) {\n      const feature = features[i];\n      if (!(getUid(feature) in clustered)) {\n        const geometry = this.geometryFunction(feature);\n        if (geometry) {\n          const coordinates = geometry.getCoordinates();\n          createOrUpdateFromCoordinate(coordinates, extent);\n          buffer(extent, mapDistance, extent);\n          const neighbors = this.source.getFeaturesInExtent(extent).filter(function (neighbor) {\n            const uid = getUid(neighbor);\n            if (uid in clustered) {\n              return false;\n            }\n            clustered[uid] = true;\n            return true;\n          });\n          this.features.push(this.createCluster(neighbors, extent));\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {Array<Feature>} features Features\n   * @param {import(\"../extent.js\").Extent} extent The searched extent for these features.\n   * @return {Feature} The cluster feature.\n   * @protected\n   */\n  createCluster(features, extent) {\n    const centroid = [0, 0];\n    for (let i = features.length - 1; i >= 0; --i) {\n      const geometry = this.geometryFunction(features[i]);\n      if (geometry) {\n        addCoordinate(centroid, geometry.getCoordinates());\n      } else {\n        features.splice(i, 1);\n      }\n    }\n    scaleCoordinate(centroid, 1 / features.length);\n    const searchCenter = getCenter(extent);\n    const ratio = this.interpolationRatio;\n    const geometry = new Point([centroid[0] * (1 - ratio) + searchCenter[0] * ratio, centroid[1] * (1 - ratio) + searchCenter[1] * ratio]);\n    if (this.createCustomCluster_) {\n      return this.createCustomCluster_(geometry, features);\n    }\n    return new Feature({\n      geometry,\n      features\n    });\n  }\n}\nexport default Cluster;","map":{"version":3,"names":["EventType","Feature","Point","VectorSource","add","addCoordinate","scale","scaleCoordinate","assert","buffer","createEmpty","createOrUpdateFromCoordinate","getCenter","getUid","Cluster","constructor","options","attributions","wrapX","resolution","undefined","distance","minDistance","interpolationRatio","features","geometryFunction","feature","geometry","getGeometry","getType","createCustomCluster_","createCluster","source","boundRefresh_","refresh","bind","updateDistance","setSource","clear","fast","length","getDistance","getSource","loadFeatures","extent","projection","setDistance","setMinDistance","getMinDistance","removeEventListener","CHANGE","addEventListener","cluster","addFeatures","ratio","Math","min","changed","mapDistance","getFeatures","clustered","i","ii","coordinates","getCoordinates","neighbors","getFeaturesInExtent","filter","neighbor","uid","push","centroid","splice","searchCenter"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/source/Cluster.js"],"sourcesContent":["/**\n * @module ol/source/Cluster\n */\n\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport Point from '../geom/Point.js';\nimport VectorSource from './Vector.js';\nimport {add as addCoordinate, scale as scaleCoordinate} from '../coordinate.js';\nimport {assert} from '../asserts.js';\nimport {\n  buffer,\n  createEmpty,\n  createOrUpdateFromCoordinate,\n  getCenter,\n} from '../extent.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [distance=20] Distance in pixels within which features will\n * be clustered together.\n * @property {number} [minDistance=0] Minimum distance in pixels between clusters.\n * Will be capped at the configured distance.\n * By default no minimum distance is guaranteed. This config can be used to avoid\n * overlapping icons. As a tradoff, the cluster feature's position will no longer be\n * the center of all its features.\n * @property {function(Feature):Point} [geometryFunction]\n * Function that takes an {@link module:ol/Feature~Feature} as argument and returns an\n * {@link module:ol/geom/Point~Point} as cluster calculation point for the feature. When a\n * feature should not be considered for clustering, the function should return\n * `null`. The default, which works when the underlying source contains point\n * features only, is\n * ```js\n * function(feature) {\n *   return feature.getGeometry();\n * }\n * ```\n * See {@link module:ol/geom/Polygon~Polygon#getInteriorPoint} for a way to get a cluster\n * calculation point for polygons.\n * @property {function(Point, Array<Feature>):Feature} [createCluster]\n * Function that takes the cluster's center {@link module:ol/geom/Point~Point} and an array\n * of {@link module:ol/Feature~Feature} included in this cluster. Must return a\n * {@link module:ol/Feature~Feature} that will be used to render. Default implementation is:\n * ```js\n * function(point, features) {\n *   return new Feature({\n *     geometry: point,\n *     features: features\n *   });\n * }\n * ```\n * @property {VectorSource} [source=null] Source.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n */\n\n/**\n * @classdesc\n * Layer source to cluster vector data. Works out of the box with point\n * geometries. For other geometry types, or if not all geometries should be\n * considered for clustering, a custom `geometryFunction` can be defined.\n *\n * If the instance is disposed without also disposing the underlying\n * source `setSource(null)` has to be called to remove the listener reference\n * from the wrapped source.\n * @api\n */\nclass Cluster extends VectorSource {\n  /**\n   * @param {Options} options Cluster options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      wrapX: options.wrapX,\n    });\n\n    /**\n     * @type {number|undefined}\n     * @protected\n     */\n    this.resolution = undefined;\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.distance = options.distance !== undefined ? options.distance : 20;\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.minDistance = options.minDistance || 0;\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.interpolationRatio = 0;\n\n    /**\n     * @type {Array<Feature>}\n     * @protected\n     */\n    this.features = [];\n\n    /**\n     * @param {Feature} feature Feature.\n     * @return {Point} Cluster calculation point.\n     * @protected\n     */\n    this.geometryFunction =\n      options.geometryFunction ||\n      function (feature) {\n        const geometry = /** @type {Point} */ (feature.getGeometry());\n        assert(\n          !geometry || geometry.getType() === 'Point',\n          'The default `geometryFunction` can only handle `Point` or null geometries'\n        );\n        return geometry;\n      };\n\n    /**\n     * @type {function(Point, Array<Feature>):Feature}\n     * @private\n     */\n    this.createCustomCluster_ = options.createCluster;\n\n    /**\n     * @type {VectorSource|null}\n     * @protected\n     */\n    this.source = null;\n\n    /**\n     * @private\n     */\n    this.boundRefresh_ = this.refresh.bind(this);\n\n    this.updateDistance(this.distance, this.minDistance);\n    this.setSource(options.source || null);\n  }\n\n  /**\n   * Remove all features from the source.\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/VectorEventType~VectorEventType#removefeature} events.\n   * @api\n   */\n  clear(fast) {\n    this.features.length = 0;\n    super.clear(fast);\n  }\n\n  /**\n   * Get the distance in pixels between clusters.\n   * @return {number} Distance.\n   * @api\n   */\n  getDistance() {\n    return this.distance;\n  }\n\n  /**\n   * Get a reference to the wrapped source.\n   * @return {VectorSource|null} Source.\n   * @api\n   */\n  getSource() {\n    return this.source;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  loadFeatures(extent, resolution, projection) {\n    this.source.loadFeatures(extent, resolution, projection);\n    if (resolution !== this.resolution) {\n      this.resolution = resolution;\n      this.refresh();\n    }\n  }\n\n  /**\n   * Set the distance within which features will be clusterd together.\n   * @param {number} distance The distance in pixels.\n   * @api\n   */\n  setDistance(distance) {\n    this.updateDistance(distance, this.minDistance);\n  }\n\n  /**\n   * Set the minimum distance between clusters. Will be capped at the\n   * configured distance.\n   * @param {number} minDistance The minimum distance in pixels.\n   * @api\n   */\n  setMinDistance(minDistance) {\n    this.updateDistance(this.distance, minDistance);\n  }\n\n  /**\n   * The configured minimum distance between clusters.\n   * @return {number} The minimum distance in pixels.\n   * @api\n   */\n  getMinDistance() {\n    return this.minDistance;\n  }\n\n  /**\n   * Replace the wrapped source.\n   * @param {VectorSource|null} source The new source for this instance.\n   * @api\n   */\n  setSource(source) {\n    if (this.source) {\n      this.source.removeEventListener(EventType.CHANGE, this.boundRefresh_);\n    }\n    this.source = source;\n    if (source) {\n      source.addEventListener(EventType.CHANGE, this.boundRefresh_);\n    }\n    this.refresh();\n  }\n\n  /**\n   * Handle the source changing.\n   */\n  refresh() {\n    this.clear();\n    this.cluster();\n    this.addFeatures(this.features);\n  }\n\n  /**\n   * Update the distances and refresh the source if necessary.\n   * @param {number} distance The new distance.\n   * @param {number} minDistance The new minimum distance.\n   */\n  updateDistance(distance, minDistance) {\n    const ratio =\n      distance === 0 ? 0 : Math.min(minDistance, distance) / distance;\n    const changed =\n      distance !== this.distance || this.interpolationRatio !== ratio;\n    this.distance = distance;\n    this.minDistance = minDistance;\n    this.interpolationRatio = ratio;\n    if (changed) {\n      this.refresh();\n    }\n  }\n\n  /**\n   * @protected\n   */\n  cluster() {\n    if (this.resolution === undefined || !this.source) {\n      return;\n    }\n    const extent = createEmpty();\n    const mapDistance = this.distance * this.resolution;\n    const features = this.source.getFeatures();\n\n    /** @type {Object<string, true>} */\n    const clustered = {};\n\n    for (let i = 0, ii = features.length; i < ii; i++) {\n      const feature = features[i];\n      if (!(getUid(feature) in clustered)) {\n        const geometry = this.geometryFunction(feature);\n        if (geometry) {\n          const coordinates = geometry.getCoordinates();\n          createOrUpdateFromCoordinate(coordinates, extent);\n          buffer(extent, mapDistance, extent);\n\n          const neighbors = this.source\n            .getFeaturesInExtent(extent)\n            .filter(function (neighbor) {\n              const uid = getUid(neighbor);\n              if (uid in clustered) {\n                return false;\n              }\n              clustered[uid] = true;\n              return true;\n            });\n          this.features.push(this.createCluster(neighbors, extent));\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {Array<Feature>} features Features\n   * @param {import(\"../extent.js\").Extent} extent The searched extent for these features.\n   * @return {Feature} The cluster feature.\n   * @protected\n   */\n  createCluster(features, extent) {\n    const centroid = [0, 0];\n    for (let i = features.length - 1; i >= 0; --i) {\n      const geometry = this.geometryFunction(features[i]);\n      if (geometry) {\n        addCoordinate(centroid, geometry.getCoordinates());\n      } else {\n        features.splice(i, 1);\n      }\n    }\n    scaleCoordinate(centroid, 1 / features.length);\n    const searchCenter = getCenter(extent);\n    const ratio = this.interpolationRatio;\n    const geometry = new Point([\n      centroid[0] * (1 - ratio) + searchCenter[0] * ratio,\n      centroid[1] * (1 - ratio) + searchCenter[1] * ratio,\n    ]);\n    if (this.createCustomCluster_) {\n      return this.createCustomCluster_(geometry, features);\n    }\n    return new Feature({\n      geometry,\n      features,\n    });\n  }\n}\n\nexport default Cluster;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}