{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/layer/Graticule\n */\nimport Collection from '../Collection.js';\nimport EventType from '../render/EventType.js';\nimport Feature from '../Feature.js';\nimport Fill from '../style/Fill.js';\nimport LineString from '../geom/LineString.js';\nimport Point from '../geom/Point.js';\nimport Stroke from '../style/Stroke.js';\nimport Style from '../style/Style.js';\nimport Text from '../style/Text.js';\nimport VectorLayer from './Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { applyTransform, approximatelyEquals, containsCoordinate, containsExtent, equals, getCenter, getIntersection, getWidth, intersects, isEmpty, wrapX as wrapExtentX } from '../extent.js';\nimport { clamp } from '../math.js';\nimport { degreesToStringHDMS } from '../coordinate.js';\nimport { equivalent as equivalentProjection, get as getProjection, getTransform } from '../proj.js';\nimport { getVectorContext } from '../render.js';\nimport { meridian, parallel } from '../geom/flat/geodesic.js';\n\n/**\n * @type {Stroke}\n * @private\n * @const\n */\nconst DEFAULT_STROKE_STYLE = new Stroke({\n  color: 'rgba(0,0,0,0.2)'\n});\n\n/**\n * @type {Array<number>}\n * @private\n */\nconst INTERVALS = [90, 45, 30, 20, 10, 5, 2, 1, 30 / 60, 20 / 60, 10 / 60, 5 / 60, 2 / 60, 1 / 60, 30 / 3600, 20 / 3600, 10 / 3600, 5 / 3600, 2 / 3600, 1 / 3600];\n\n/**\n * @typedef {Object} GraticuleLabelDataType\n * @property {Point} geom Geometry.\n * @property {string} text Text.\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [maxLines=100] The maximum number of meridians and\n * parallels from the center of the map. The default value of 100 means that at\n * most 200 meridians and 200 parallels will be displayed. The default value is\n * appropriate for conformal projections like Spherical Mercator. If you\n * increase the value, more lines will be drawn and the drawing performance will\n * decrease.\n * @property {Stroke} [strokeStyle] The\n * stroke style to use for drawing the graticule. If not provided, the following stroke will be used:\n * ```js\n * new Stroke({\n *   color: 'rgba(0, 0, 0, 0.2)' // a not fully opaque black\n * });\n * ```\n * @property {number} [targetSize=100] The target size of the graticule cells,\n * in pixels.\n * @property {boolean} [showLabels=false] Render a label with the respective\n * latitude/longitude for each graticule line.\n * @property {function(number):string} [lonLabelFormatter] Label formatter for\n * longitudes. This function is called with the longitude as argument, and\n * should return a formatted string representing the longitude. By default,\n * labels are formatted as degrees, minutes, seconds and hemisphere.\n * @property {function(number):string} [latLabelFormatter] Label formatter for\n * latitudes. This function is called with the latitude as argument, and\n * should return a formatted string representing the latitude. By default,\n * labels are formatted as degrees, minutes, seconds and hemisphere.\n * @property {number} [lonLabelPosition=0] Longitude label position in fractions\n * (0..1) of view extent. 0 means at the bottom of the viewport, 1 means at the\n * top.\n * @property {number} [latLabelPosition=1] Latitude label position in fractions\n * (0..1) of view extent. 0 means at the left of the viewport, 1 means at the\n * right.\n * @property {Text} [lonLabelStyle] Longitude label text\n * style. If not provided, the following style will be used:\n * ```js\n * new Text({\n *   font: '12px Calibri,sans-serif',\n *   textBaseline: 'bottom',\n *   fill: new Fill({\n *     color: 'rgba(0,0,0,1)'\n *   }),\n *   stroke: new Stroke({\n *     color: 'rgba(255,255,255,1)',\n *     width: 3\n *   })\n * });\n * ```\n * Note that the default's `textBaseline` configuration will not work well for\n * `lonLabelPosition` configurations that position labels close to the top of\n * the viewport.\n * @property {Text} [latLabelStyle] Latitude label text style.\n * If not provided, the following style will be used:\n * ```js\n * new Text({\n *   font: '12px Calibri,sans-serif',\n *   textAlign: 'end',\n *   fill: new Fill({\n *     color: 'rgba(0,0,0,1)'\n *   }),\n *   stroke: Stroke({\n *     color: 'rgba(255,255,255,1)',\n *     width: 3\n *   })\n * });\n * ```\n * Note that the default's `textAlign` configuration will not work well for\n * `latLabelPosition` configurations that position labels close to the left of\n * the viewport.\n * @property {Array<number>} [intervals=[90, 45, 30, 20, 10, 5, 2, 1, 30/60, 20/60, 10/60, 5/60, 2/60, 1/60, 30/3600, 20/3600, 10/3600, 5/3600, 2/3600, 1/3600]]\n * Intervals (in degrees) for the graticule. Example to limit graticules to 30 and 10 degrees intervals:\n * ```js\n * [30, 10]\n * ```\n * @property {boolean} [wrapX=true] Whether to repeat the graticule horizontally.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Layer that renders a grid for a coordinate system (currently only EPSG:4326 is supported).\n * Note that the view projection must define both extent and worldExtent.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @extends {VectorLayer<import(\"../source/Vector.js\").default>}\n * @api\n */\nclass Graticule extends VectorLayer {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    const baseOptions = Object.assign({\n      updateWhileAnimating: true,\n      updateWhileInteracting: true,\n      renderBuffer: 0\n    }, options);\n    delete baseOptions.maxLines;\n    delete baseOptions.strokeStyle;\n    delete baseOptions.targetSize;\n    delete baseOptions.showLabels;\n    delete baseOptions.lonLabelFormatter;\n    delete baseOptions.latLabelFormatter;\n    delete baseOptions.lonLabelPosition;\n    delete baseOptions.latLabelPosition;\n    delete baseOptions.lonLabelStyle;\n    delete baseOptions.latLabelStyle;\n    delete baseOptions.intervals;\n    super(baseOptions);\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.projection_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxLat_ = Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxLon_ = Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.minLat_ = -Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.minLon_ = -Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxX_ = Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxY_ = Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.minX_ = -Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.minY_ = -Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.targetSize_ = options.targetSize !== undefined ? options.targetSize : 100;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxLines_ = options.maxLines !== undefined ? options.maxLines : 100;\n\n    /**\n     * @type {Array<LineString>}\n     * @private\n     */\n    this.meridians_ = [];\n\n    /**\n     * @type {Array<LineString>}\n     * @private\n     */\n    this.parallels_ = [];\n\n    /**\n     * @type {Stroke}\n     * @private\n     */\n    this.strokeStyle_ = options.strokeStyle !== undefined ? options.strokeStyle : DEFAULT_STROKE_STYLE;\n\n    /**\n     * @type {import(\"../proj.js\").TransformFunction|undefined}\n     * @private\n     */\n    this.fromLonLatTransform_ = undefined;\n\n    /**\n     * @type {import(\"../proj.js\").TransformFunction|undefined}\n     * @private\n     */\n    this.toLonLatTransform_ = undefined;\n\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.projectionCenterLonLat_ = null;\n\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.bottomLeft_ = null;\n\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.bottomRight_ = null;\n\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.topLeft_ = null;\n\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.topRight_ = null;\n\n    /**\n     * @type {Array<GraticuleLabelDataType>}\n     * @private\n     */\n    this.meridiansLabels_ = null;\n\n    /**\n     * @type {Array<GraticuleLabelDataType>}\n     * @private\n     */\n    this.parallelsLabels_ = null;\n    if (options.showLabels) {\n      /**\n       * @type {null|function(number):string}\n       * @private\n       */\n      this.lonLabelFormatter_ = options.lonLabelFormatter == undefined ? degreesToStringHDMS.bind(this, 'EW') : options.lonLabelFormatter;\n\n      /**\n       * @type {function(number):string}\n       * @private\n       */\n      this.latLabelFormatter_ = options.latLabelFormatter == undefined ? degreesToStringHDMS.bind(this, 'NS') : options.latLabelFormatter;\n\n      /**\n       * Longitude label position in fractions (0..1) of view extent. 0 means\n       * bottom, 1 means top.\n       * @type {number}\n       * @private\n       */\n      this.lonLabelPosition_ = options.lonLabelPosition == undefined ? 0 : options.lonLabelPosition;\n\n      /**\n       * Latitude Label position in fractions (0..1) of view extent. 0 means left, 1\n       * means right.\n       * @type {number}\n       * @private\n       */\n      this.latLabelPosition_ = options.latLabelPosition == undefined ? 1 : options.latLabelPosition;\n\n      /**\n       * @type {Style}\n       * @private\n       */\n      this.lonLabelStyleBase_ = new Style({\n        text: options.lonLabelStyle !== undefined ? options.lonLabelStyle.clone() : new Text({\n          font: '12px Calibri,sans-serif',\n          textBaseline: 'bottom',\n          fill: new Fill({\n            color: 'rgba(0,0,0,1)'\n          }),\n          stroke: new Stroke({\n            color: 'rgba(255,255,255,1)',\n            width: 3\n          })\n        })\n      });\n\n      /**\n       * @private\n       * @param {import(\"../Feature\").default} feature Feature\n       * @return {Style} style\n       */\n      this.lonLabelStyle_ = feature => {\n        const label = feature.get('graticule_label');\n        this.lonLabelStyleBase_.getText().setText(label);\n        return this.lonLabelStyleBase_;\n      };\n\n      /**\n       * @type {Style}\n       * @private\n       */\n      this.latLabelStyleBase_ = new Style({\n        text: options.latLabelStyle !== undefined ? options.latLabelStyle.clone() : new Text({\n          font: '12px Calibri,sans-serif',\n          textAlign: 'right',\n          fill: new Fill({\n            color: 'rgba(0,0,0,1)'\n          }),\n          stroke: new Stroke({\n            color: 'rgba(255,255,255,1)',\n            width: 3\n          })\n        })\n      });\n\n      /**\n       * @private\n       * @param {import(\"../Feature\").default} feature Feature\n       * @return {Style} style\n       */\n      this.latLabelStyle_ = feature => {\n        const label = feature.get('graticule_label');\n        this.latLabelStyleBase_.getText().setText(label);\n        return this.latLabelStyleBase_;\n      };\n      this.meridiansLabels_ = [];\n      this.parallelsLabels_ = [];\n      this.addEventListener(EventType.POSTRENDER, this.drawLabels_.bind(this));\n    }\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.intervals_ = options.intervals !== undefined ? options.intervals : INTERVALS;\n\n    // use a source with a custom loader for lines & text\n    this.setSource(new VectorSource({\n      loader: this.loaderFunction.bind(this),\n      strategy: this.strategyFunction.bind(this),\n      features: new Collection(),\n      overlaps: false,\n      useSpatialIndex: false,\n      wrapX: options.wrapX\n    }));\n\n    /**\n     * feature pool to use when updating graticule\n     * @type {Array<Feature>}\n     * @private\n     */\n    this.featurePool_ = [];\n\n    /**\n     * @type {Style}\n     * @private\n     */\n    this.lineStyle_ = new Style({\n      stroke: this.strokeStyle_\n    });\n\n    /**\n     * @type {?import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.loadedExtent_ = null;\n\n    /**\n     * @type {?import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.renderedExtent_ = null;\n\n    /**\n     * @type {?number}\n     * @private\n     */\n    this.renderedResolution_ = null;\n    this.setRenderOrder(null);\n  }\n\n  /**\n   * Strategy function for loading features based on the view's extent and\n   * resolution.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @return {Array<import(\"../extent.js\").Extent>} Extents.\n   */\n  strategyFunction(extent, resolution) {\n    // extents may be passed in different worlds, to avoid endless loop we use only one\n    let realWorldExtent = extent.slice();\n    if (this.projection_ && this.getSource().getWrapX()) {\n      wrapExtentX(realWorldExtent, this.projection_);\n    }\n    if (this.loadedExtent_) {\n      if (approximatelyEquals(this.loadedExtent_, realWorldExtent, resolution)) {\n        // make sure result is exactly equal to previous extent\n        realWorldExtent = this.loadedExtent_.slice();\n      } else {\n        // we should not keep track of loaded extents\n        this.getSource().removeLoadedExtent(this.loadedExtent_);\n      }\n    }\n    return [realWorldExtent];\n  }\n\n  /**\n   * Update geometries in the source based on current view\n   * @param {import(\"../extent\").Extent} extent Extent\n   * @param {number} resolution Resolution\n   * @param {import(\"../proj/Projection.js\").default} projection Projection\n   */\n  loaderFunction(extent, resolution, projection) {\n    this.loadedExtent_ = extent;\n    const source = this.getSource();\n\n    // only consider the intersection between our own extent & the requested one\n    const layerExtent = this.getExtent() || [-Infinity, -Infinity, Infinity, Infinity];\n    const renderExtent = getIntersection(layerExtent, extent);\n    if (this.renderedExtent_ && equals(this.renderedExtent_, renderExtent) && this.renderedResolution_ === resolution) {\n      return;\n    }\n    this.renderedExtent_ = renderExtent;\n    this.renderedResolution_ = resolution;\n\n    // bail out if nothing to render\n    if (isEmpty(renderExtent)) {\n      return;\n    }\n\n    // update projection info\n    const center = getCenter(renderExtent);\n    const squaredTolerance = resolution * resolution / 4;\n    const updateProjectionInfo = !this.projection_ || !equivalentProjection(this.projection_, projection);\n    if (updateProjectionInfo) {\n      this.updateProjectionInfo_(projection);\n    }\n    this.createGraticule_(renderExtent, center, resolution, squaredTolerance);\n\n    // first make sure we have enough features in the pool\n    let featureCount = this.meridians_.length + this.parallels_.length;\n    if (this.meridiansLabels_) {\n      featureCount += this.meridians_.length;\n    }\n    if (this.parallelsLabels_) {\n      featureCount += this.parallels_.length;\n    }\n    let feature;\n    while (featureCount > this.featurePool_.length) {\n      feature = new Feature();\n      this.featurePool_.push(feature);\n    }\n    const featuresColl = source.getFeaturesCollection();\n    featuresColl.clear();\n    let poolIndex = 0;\n\n    // add features for the lines & labels\n    let i, l;\n    for (i = 0, l = this.meridians_.length; i < l; ++i) {\n      feature = this.featurePool_[poolIndex++];\n      feature.setGeometry(this.meridians_[i]);\n      feature.setStyle(this.lineStyle_);\n      featuresColl.push(feature);\n    }\n    for (i = 0, l = this.parallels_.length; i < l; ++i) {\n      feature = this.featurePool_[poolIndex++];\n      feature.setGeometry(this.parallels_[i]);\n      feature.setStyle(this.lineStyle_);\n      featuresColl.push(feature);\n    }\n  }\n\n  /**\n   * @param {number} lon Longitude.\n   * @param {number} minLat Minimal latitude.\n   * @param {number} maxLat Maximal latitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {number} Index.\n   * @private\n   */\n  addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, index) {\n    const lineString = this.getMeridian_(lon, minLat, maxLat, squaredTolerance, index);\n    if (intersects(lineString.getExtent(), extent)) {\n      if (this.meridiansLabels_) {\n        const text = this.lonLabelFormatter_(lon);\n        if (index in this.meridiansLabels_) {\n          this.meridiansLabels_[index].text = text;\n        } else {\n          this.meridiansLabels_[index] = {\n            geom: new Point([]),\n            text: text\n          };\n        }\n      }\n      this.meridians_[index++] = lineString;\n    }\n    return index;\n  }\n\n  /**\n   * @param {number} lat Latitude.\n   * @param {number} minLon Minimal longitude.\n   * @param {number} maxLon Maximal longitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {number} Index.\n   * @private\n   */\n  addParallel_(lat, minLon, maxLon, squaredTolerance, extent, index) {\n    const lineString = this.getParallel_(lat, minLon, maxLon, squaredTolerance, index);\n    if (intersects(lineString.getExtent(), extent)) {\n      if (this.parallelsLabels_) {\n        const text = this.latLabelFormatter_(lat);\n        if (index in this.parallelsLabels_) {\n          this.parallelsLabels_[index].text = text;\n        } else {\n          this.parallelsLabels_[index] = {\n            geom: new Point([]),\n            text: text\n          };\n        }\n      }\n      this.parallels_[index++] = lineString;\n    }\n    return index;\n  }\n\n  /**\n   * @param {import(\"../render/Event.js\").default} event Render event.\n   * @private\n   */\n  drawLabels_(event) {\n    const rotation = event.frameState.viewState.rotation;\n    const resolution = event.frameState.viewState.resolution;\n    const size = event.frameState.size;\n    const extent = event.frameState.extent;\n    const rotationCenter = getCenter(extent);\n    let rotationExtent = extent;\n    if (rotation) {\n      const unrotatedWidth = size[0] * resolution;\n      const unrotatedHeight = size[1] * resolution;\n      rotationExtent = [rotationCenter[0] - unrotatedWidth / 2, rotationCenter[1] - unrotatedHeight / 2, rotationCenter[0] + unrotatedWidth / 2, rotationCenter[1] + unrotatedHeight / 2];\n    }\n    let startWorld = 0;\n    let endWorld = 0;\n    let labelsAtStart = this.latLabelPosition_ < 0.5;\n    const projectionExtent = this.projection_.getExtent();\n    const worldWidth = getWidth(projectionExtent);\n    if (this.getSource().getWrapX() && this.projection_.canWrapX() && !containsExtent(projectionExtent, extent)) {\n      startWorld = Math.floor((extent[0] - projectionExtent[0]) / worldWidth);\n      endWorld = Math.ceil((extent[2] - projectionExtent[2]) / worldWidth);\n      const inverted = Math.abs(rotation) > Math.PI / 2;\n      labelsAtStart = labelsAtStart !== inverted;\n    }\n    const vectorContext = getVectorContext(event);\n    for (let world = startWorld; world <= endWorld; ++world) {\n      let poolIndex = this.meridians_.length + this.parallels_.length;\n      let feature, index, l, textPoint;\n      if (this.meridiansLabels_) {\n        for (index = 0, l = this.meridiansLabels_.length; index < l; ++index) {\n          const lineString = this.meridians_[index];\n          if (!rotation && world === 0) {\n            textPoint = this.getMeridianPoint_(lineString, extent, index);\n          } else {\n            const clone = lineString.clone();\n            clone.translate(world * worldWidth, 0);\n            clone.rotate(-rotation, rotationCenter);\n            textPoint = this.getMeridianPoint_(clone, rotationExtent, index);\n            textPoint.rotate(rotation, rotationCenter);\n          }\n          feature = this.featurePool_[poolIndex++];\n          feature.setGeometry(textPoint);\n          feature.set('graticule_label', this.meridiansLabels_[index].text);\n          vectorContext.drawFeature(feature, this.lonLabelStyle_(feature));\n        }\n      }\n      if (this.parallelsLabels_) {\n        if (world === startWorld && labelsAtStart || world === endWorld && !labelsAtStart) {\n          for (index = 0, l = this.parallels_.length; index < l; ++index) {\n            const lineString = this.parallels_[index];\n            if (!rotation && world === 0) {\n              textPoint = this.getParallelPoint_(lineString, extent, index);\n            } else {\n              const clone = lineString.clone();\n              clone.translate(world * worldWidth, 0);\n              clone.rotate(-rotation, rotationCenter);\n              textPoint = this.getParallelPoint_(clone, rotationExtent, index);\n              textPoint.rotate(rotation, rotationCenter);\n            }\n            feature = this.featurePool_[poolIndex++];\n            feature.setGeometry(textPoint);\n            feature.set('graticule_label', this.parallelsLabels_[index].text);\n            vectorContext.drawFeature(feature, this.latLabelStyle_(feature));\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @private\n   */\n  createGraticule_(extent, center, resolution, squaredTolerance) {\n    const interval = this.getInterval_(resolution);\n    if (interval == -1) {\n      this.meridians_.length = 0;\n      this.parallels_.length = 0;\n      if (this.meridiansLabels_) {\n        this.meridiansLabels_.length = 0;\n      }\n      if (this.parallelsLabels_) {\n        this.parallelsLabels_.length = 0;\n      }\n      return;\n    }\n    let wrapX = false;\n    const projectionExtent = this.projection_.getExtent();\n    const worldWidth = getWidth(projectionExtent);\n    if (this.getSource().getWrapX() && this.projection_.canWrapX() && !containsExtent(projectionExtent, extent)) {\n      if (getWidth(extent) >= worldWidth) {\n        extent[0] = projectionExtent[0];\n        extent[2] = projectionExtent[2];\n      } else {\n        wrapX = true;\n      }\n    }\n\n    // Constrain the center to fit into the extent available to the graticule\n\n    const validCenterP = [clamp(center[0], this.minX_, this.maxX_), clamp(center[1], this.minY_, this.maxY_)];\n\n    // Transform the center to lon lat\n    // Some projections may have a void area at the poles\n    // so replace any NaN latitudes with the min or max value closest to a pole\n\n    const centerLonLat = this.toLonLatTransform_(validCenterP);\n    if (isNaN(centerLonLat[1])) {\n      centerLonLat[1] = Math.abs(this.maxLat_) >= Math.abs(this.minLat_) ? this.maxLat_ : this.minLat_;\n    }\n    let centerLon = clamp(centerLonLat[0], this.minLon_, this.maxLon_);\n    let centerLat = clamp(centerLonLat[1], this.minLat_, this.maxLat_);\n    const maxLines = this.maxLines_;\n    let cnt, idx, lat, lon;\n\n    // Limit the extent to fit into the extent available to the graticule\n\n    let validExtentP = extent;\n    if (!wrapX) {\n      validExtentP = [clamp(extent[0], this.minX_, this.maxX_), clamp(extent[1], this.minY_, this.maxY_), clamp(extent[2], this.minX_, this.maxX_), clamp(extent[3], this.minY_, this.maxY_)];\n    }\n\n    // Transform the extent to get the lon lat ranges for the edges of the extent\n\n    const validExtent = applyTransform(validExtentP, this.toLonLatTransform_, undefined, 8);\n    let maxLat = validExtent[3];\n    let maxLon = validExtent[2];\n    let minLat = validExtent[1];\n    let minLon = validExtent[0];\n    if (!wrapX) {\n      // Check if extremities of the world extent lie inside the extent\n      // (for example the pole in a polar projection)\n      // and extend the extent as appropriate\n\n      if (containsCoordinate(validExtentP, this.bottomLeft_)) {\n        minLon = this.minLon_;\n        minLat = this.minLat_;\n      }\n      if (containsCoordinate(validExtentP, this.bottomRight_)) {\n        maxLon = this.maxLon_;\n        minLat = this.minLat_;\n      }\n      if (containsCoordinate(validExtentP, this.topLeft_)) {\n        minLon = this.minLon_;\n        maxLat = this.maxLat_;\n      }\n      if (containsCoordinate(validExtentP, this.topRight_)) {\n        maxLon = this.maxLon_;\n        maxLat = this.maxLat_;\n      }\n\n      // The transformed center may also extend the lon lat ranges used for rendering\n\n      maxLat = clamp(maxLat, centerLat, this.maxLat_);\n      maxLon = clamp(maxLon, centerLon, this.maxLon_);\n      minLat = clamp(minLat, this.minLat_, centerLat);\n      minLon = clamp(minLon, this.minLon_, centerLon);\n    }\n\n    // Create meridians\n\n    centerLon = Math.floor(centerLon / interval) * interval;\n    lon = clamp(centerLon, this.minLon_, this.maxLon_);\n    idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, 0);\n    cnt = 0;\n    if (wrapX) {\n      while ((lon -= interval) >= minLon && cnt++ < maxLines) {\n        idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, idx);\n      }\n    } else {\n      while (lon != this.minLon_ && cnt++ < maxLines) {\n        lon = Math.max(lon - interval, this.minLon_);\n        idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, idx);\n      }\n    }\n    lon = clamp(centerLon, this.minLon_, this.maxLon_);\n    cnt = 0;\n    if (wrapX) {\n      while ((lon += interval) <= maxLon && cnt++ < maxLines) {\n        idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, idx);\n      }\n    } else {\n      while (lon != this.maxLon_ && cnt++ < maxLines) {\n        lon = Math.min(lon + interval, this.maxLon_);\n        idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, idx);\n      }\n    }\n    this.meridians_.length = idx;\n    if (this.meridiansLabels_) {\n      this.meridiansLabels_.length = idx;\n    }\n\n    // Create parallels\n\n    centerLat = Math.floor(centerLat / interval) * interval;\n    lat = clamp(centerLat, this.minLat_, this.maxLat_);\n    idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, 0);\n    cnt = 0;\n    while (lat != this.minLat_ && cnt++ < maxLines) {\n      lat = Math.max(lat - interval, this.minLat_);\n      idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, idx);\n    }\n    lat = clamp(centerLat, this.minLat_, this.maxLat_);\n    cnt = 0;\n    while (lat != this.maxLat_ && cnt++ < maxLines) {\n      lat = Math.min(lat + interval, this.maxLat_);\n      idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, idx);\n    }\n    this.parallels_.length = idx;\n    if (this.parallelsLabels_) {\n      this.parallelsLabels_.length = idx;\n    }\n  }\n\n  /**\n   * @param {number} resolution Resolution.\n   * @return {number} The interval in degrees.\n   * @private\n   */\n  getInterval_(resolution) {\n    const centerLon = this.projectionCenterLonLat_[0];\n    const centerLat = this.projectionCenterLonLat_[1];\n    let interval = -1;\n    const target = Math.pow(this.targetSize_ * resolution, 2);\n    /** @type {Array<number>} **/\n    const p1 = [];\n    /** @type {Array<number>} **/\n    const p2 = [];\n    for (let i = 0, ii = this.intervals_.length; i < ii; ++i) {\n      const delta = clamp(this.intervals_[i] / 2, 0, 90);\n      // Don't attempt to transform latitudes beyond the poles!\n      const clampedLat = clamp(centerLat, -90 + delta, 90 - delta);\n      p1[0] = centerLon - delta;\n      p1[1] = clampedLat - delta;\n      p2[0] = centerLon + delta;\n      p2[1] = clampedLat + delta;\n      this.fromLonLatTransform_(p1, p1);\n      this.fromLonLatTransform_(p2, p2);\n      const dist = Math.pow(p2[0] - p1[0], 2) + Math.pow(p2[1] - p1[1], 2);\n      if (dist <= target) {\n        break;\n      }\n      interval = this.intervals_[i];\n    }\n    return interval;\n  }\n\n  /**\n   * @param {number} lon Longitude.\n   * @param {number} minLat Minimal latitude.\n   * @param {number} maxLat Maximal latitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} The meridian line string.\n   * @param {number} index Index.\n   * @private\n   */\n  getMeridian_(lon, minLat, maxLat, squaredTolerance, index) {\n    const flatCoordinates = meridian(lon, minLat, maxLat, this.projection_, squaredTolerance);\n    let lineString = this.meridians_[index];\n    if (!lineString) {\n      lineString = new LineString(flatCoordinates, 'XY');\n      this.meridians_[index] = lineString;\n    } else {\n      lineString.setFlatCoordinates('XY', flatCoordinates);\n      lineString.changed();\n    }\n    return lineString;\n  }\n\n  /**\n   * @param {LineString} lineString Meridian\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {Point} Meridian point.\n   * @private\n   */\n  getMeridianPoint_(lineString, extent, index) {\n    const flatCoordinates = lineString.getFlatCoordinates();\n    let bottom = 1;\n    let top = flatCoordinates.length - 1;\n    if (flatCoordinates[bottom] > flatCoordinates[top]) {\n      bottom = top;\n      top = 1;\n    }\n    const clampedBottom = Math.max(extent[1], flatCoordinates[bottom]);\n    const clampedTop = Math.min(extent[3], flatCoordinates[top]);\n    const lat = clamp(extent[1] + Math.abs(extent[1] - extent[3]) * this.lonLabelPosition_, clampedBottom, clampedTop);\n    const coordinate0 = flatCoordinates[bottom - 1] + (flatCoordinates[top - 1] - flatCoordinates[bottom - 1]) * (lat - flatCoordinates[bottom]) / (flatCoordinates[top] - flatCoordinates[bottom]);\n    const coordinate = [coordinate0, lat];\n    const point = this.meridiansLabels_[index].geom;\n    point.setCoordinates(coordinate);\n    return point;\n  }\n\n  /**\n   * Get the list of meridians.  Meridians are lines of equal longitude.\n   * @return {Array<LineString>} The meridians.\n   * @api\n   */\n  getMeridians() {\n    return this.meridians_;\n  }\n\n  /**\n   * @param {number} lat Latitude.\n   * @param {number} minLon Minimal longitude.\n   * @param {number} maxLon Maximal longitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} The parallel line string.\n   * @param {number} index Index.\n   * @private\n   */\n  getParallel_(lat, minLon, maxLon, squaredTolerance, index) {\n    const flatCoordinates = parallel(lat, minLon, maxLon, this.projection_, squaredTolerance);\n    let lineString = this.parallels_[index];\n    if (!lineString) {\n      lineString = new LineString(flatCoordinates, 'XY');\n    } else {\n      lineString.setFlatCoordinates('XY', flatCoordinates);\n      lineString.changed();\n    }\n    return lineString;\n  }\n\n  /**\n   * @param {LineString} lineString Parallels.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {Point} Parallel point.\n   * @private\n   */\n  getParallelPoint_(lineString, extent, index) {\n    const flatCoordinates = lineString.getFlatCoordinates();\n    let left = 0;\n    let right = flatCoordinates.length - 2;\n    if (flatCoordinates[left] > flatCoordinates[right]) {\n      left = right;\n      right = 0;\n    }\n    const clampedLeft = Math.max(extent[0], flatCoordinates[left]);\n    const clampedRight = Math.min(extent[2], flatCoordinates[right]);\n    const lon = clamp(extent[0] + Math.abs(extent[0] - extent[2]) * this.latLabelPosition_, clampedLeft, clampedRight);\n    const coordinate1 = flatCoordinates[left + 1] + (flatCoordinates[right + 1] - flatCoordinates[left + 1]) * (lon - flatCoordinates[left]) / (flatCoordinates[right] - flatCoordinates[left]);\n    const coordinate = [lon, coordinate1];\n    const point = this.parallelsLabels_[index].geom;\n    point.setCoordinates(coordinate);\n    return point;\n  }\n\n  /**\n   * Get the list of parallels.  Parallels are lines of equal latitude.\n   * @return {Array<LineString>} The parallels.\n   * @api\n   */\n  getParallels() {\n    return this.parallels_;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @private\n   */\n  updateProjectionInfo_(projection) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n    const worldExtent = projection.getWorldExtent();\n    this.maxLat_ = worldExtent[3];\n    this.maxLon_ = worldExtent[2];\n    this.minLat_ = worldExtent[1];\n    this.minLon_ = worldExtent[0];\n\n    // If the world extent crosses the dateline define a custom transform to\n    // return longitudes which wrap the dateline\n\n    const toLonLatTransform = getTransform(projection, epsg4326Projection);\n    if (this.minLon_ < this.maxLon_) {\n      this.toLonLatTransform_ = toLonLatTransform;\n    } else {\n      const split = this.minLon_ + this.maxLon_ / 2;\n      this.maxLon_ += 360;\n      this.toLonLatTransform_ = function (coordinates, output, dimension) {\n        dimension = dimension || 2;\n        const lonLatCoordinates = toLonLatTransform(coordinates, output, dimension);\n        for (let i = 0, l = lonLatCoordinates.length; i < l; i += dimension) {\n          if (lonLatCoordinates[i] < split) {\n            lonLatCoordinates[i] += 360;\n          }\n        }\n        return lonLatCoordinates;\n      };\n    }\n\n    // Transform the extent to get the limits of the view projection extent\n    // which should be available to the graticule\n\n    this.fromLonLatTransform_ = getTransform(epsg4326Projection, projection);\n    const worldExtentP = applyTransform([this.minLon_, this.minLat_, this.maxLon_, this.maxLat_], this.fromLonLatTransform_, undefined, 8);\n    this.minX_ = worldExtentP[0];\n    this.maxX_ = worldExtentP[2];\n    this.minY_ = worldExtentP[1];\n    this.maxY_ = worldExtentP[3];\n\n    // Determine the view projection coordinates of the extremities of the world extent\n    // as these may lie inside a view extent (for example the pole in a polar projection)\n\n    this.bottomLeft_ = this.fromLonLatTransform_([this.minLon_, this.minLat_]);\n    this.bottomRight_ = this.fromLonLatTransform_([this.maxLon_, this.minLat_]);\n    this.topLeft_ = this.fromLonLatTransform_([this.minLon_, this.maxLat_]);\n    this.topRight_ = this.fromLonLatTransform_([this.maxLon_, this.maxLat_]);\n\n    // Transform the projection center to lon lat\n    // Some projections may have a void area at the poles\n    // so replace any NaN latitudes with the min or max value closest to a pole\n\n    this.projectionCenterLonLat_ = this.toLonLatTransform_(getCenter(projection.getExtent()));\n    if (isNaN(this.projectionCenterLonLat_[1])) {\n      this.projectionCenterLonLat_[1] = Math.abs(this.maxLat_) >= Math.abs(this.minLat_) ? this.maxLat_ : this.minLat_;\n    }\n    this.projection_ = projection;\n  }\n}\nexport default Graticule;","map":{"version":3,"names":["Collection","EventType","Feature","Fill","LineString","Point","Stroke","Style","Text","VectorLayer","VectorSource","applyTransform","approximatelyEquals","containsCoordinate","containsExtent","equals","getCenter","getIntersection","getWidth","intersects","isEmpty","wrapX","wrapExtentX","clamp","degreesToStringHDMS","equivalent","equivalentProjection","get","getProjection","getTransform","getVectorContext","meridian","parallel","DEFAULT_STROKE_STYLE","color","INTERVALS","Graticule","constructor","options","baseOptions","Object","assign","updateWhileAnimating","updateWhileInteracting","renderBuffer","maxLines","strokeStyle","targetSize","showLabels","lonLabelFormatter","latLabelFormatter","lonLabelPosition","latLabelPosition","lonLabelStyle","latLabelStyle","intervals","projection_","maxLat_","Infinity","maxLon_","minLat_","minLon_","maxX_","maxY_","minX_","minY_","targetSize_","undefined","maxLines_","meridians_","parallels_","strokeStyle_","fromLonLatTransform_","toLonLatTransform_","projectionCenterLonLat_","bottomLeft_","bottomRight_","topLeft_","topRight_","meridiansLabels_","parallelsLabels_","lonLabelFormatter_","bind","latLabelFormatter_","lonLabelPosition_","latLabelPosition_","lonLabelStyleBase_","text","clone","font","textBaseline","fill","stroke","width","lonLabelStyle_","feature","label","getText","setText","latLabelStyleBase_","textAlign","latLabelStyle_","addEventListener","POSTRENDER","drawLabels_","intervals_","setSource","loader","loaderFunction","strategy","strategyFunction","features","overlaps","useSpatialIndex","featurePool_","lineStyle_","loadedExtent_","renderedExtent_","renderedResolution_","setRenderOrder","extent","resolution","realWorldExtent","slice","getSource","getWrapX","removeLoadedExtent","projection","source","layerExtent","getExtent","renderExtent","center","squaredTolerance","updateProjectionInfo","updateProjectionInfo_","createGraticule_","featureCount","length","push","featuresColl","getFeaturesCollection","clear","poolIndex","i","l","setGeometry","setStyle","addMeridian_","lon","minLat","maxLat","index","lineString","getMeridian_","geom","addParallel_","lat","minLon","maxLon","getParallel_","event","rotation","frameState","viewState","size","rotationCenter","rotationExtent","unrotatedWidth","unrotatedHeight","startWorld","endWorld","labelsAtStart","projectionExtent","worldWidth","canWrapX","Math","floor","ceil","inverted","abs","PI","vectorContext","world","textPoint","getMeridianPoint_","translate","rotate","set","drawFeature","getParallelPoint_","interval","getInterval_","validCenterP","centerLonLat","isNaN","centerLon","centerLat","cnt","idx","validExtentP","validExtent","max","min","target","pow","p1","p2","ii","delta","clampedLat","dist","flatCoordinates","setFlatCoordinates","changed","getFlatCoordinates","bottom","top","clampedBottom","clampedTop","coordinate0","coordinate","point","setCoordinates","getMeridians","left","right","clampedLeft","clampedRight","coordinate1","getParallels","epsg4326Projection","worldExtent","getWorldExtent","toLonLatTransform","split","coordinates","output","dimension","lonLatCoordinates","worldExtentP"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/layer/Graticule.js"],"sourcesContent":["/**\n * @module ol/layer/Graticule\n */\nimport Collection from '../Collection.js';\nimport EventType from '../render/EventType.js';\nimport Feature from '../Feature.js';\nimport Fill from '../style/Fill.js';\nimport LineString from '../geom/LineString.js';\nimport Point from '../geom/Point.js';\nimport Stroke from '../style/Stroke.js';\nimport Style from '../style/Style.js';\nimport Text from '../style/Text.js';\nimport VectorLayer from './Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {\n  applyTransform,\n  approximatelyEquals,\n  containsCoordinate,\n  containsExtent,\n  equals,\n  getCenter,\n  getIntersection,\n  getWidth,\n  intersects,\n  isEmpty,\n  wrapX as wrapExtentX,\n} from '../extent.js';\nimport {clamp} from '../math.js';\nimport {degreesToStringHDMS} from '../coordinate.js';\nimport {\n  equivalent as equivalentProjection,\n  get as getProjection,\n  getTransform,\n} from '../proj.js';\nimport {getVectorContext} from '../render.js';\nimport {meridian, parallel} from '../geom/flat/geodesic.js';\n\n/**\n * @type {Stroke}\n * @private\n * @const\n */\nconst DEFAULT_STROKE_STYLE = new Stroke({\n  color: 'rgba(0,0,0,0.2)',\n});\n\n/**\n * @type {Array<number>}\n * @private\n */\nconst INTERVALS = [\n  90,\n  45,\n  30,\n  20,\n  10,\n  5,\n  2,\n  1,\n  30 / 60,\n  20 / 60,\n  10 / 60,\n  5 / 60,\n  2 / 60,\n  1 / 60,\n  30 / 3600,\n  20 / 3600,\n  10 / 3600,\n  5 / 3600,\n  2 / 3600,\n  1 / 3600,\n];\n\n/**\n * @typedef {Object} GraticuleLabelDataType\n * @property {Point} geom Geometry.\n * @property {string} text Text.\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [maxLines=100] The maximum number of meridians and\n * parallels from the center of the map. The default value of 100 means that at\n * most 200 meridians and 200 parallels will be displayed. The default value is\n * appropriate for conformal projections like Spherical Mercator. If you\n * increase the value, more lines will be drawn and the drawing performance will\n * decrease.\n * @property {Stroke} [strokeStyle] The\n * stroke style to use for drawing the graticule. If not provided, the following stroke will be used:\n * ```js\n * new Stroke({\n *   color: 'rgba(0, 0, 0, 0.2)' // a not fully opaque black\n * });\n * ```\n * @property {number} [targetSize=100] The target size of the graticule cells,\n * in pixels.\n * @property {boolean} [showLabels=false] Render a label with the respective\n * latitude/longitude for each graticule line.\n * @property {function(number):string} [lonLabelFormatter] Label formatter for\n * longitudes. This function is called with the longitude as argument, and\n * should return a formatted string representing the longitude. By default,\n * labels are formatted as degrees, minutes, seconds and hemisphere.\n * @property {function(number):string} [latLabelFormatter] Label formatter for\n * latitudes. This function is called with the latitude as argument, and\n * should return a formatted string representing the latitude. By default,\n * labels are formatted as degrees, minutes, seconds and hemisphere.\n * @property {number} [lonLabelPosition=0] Longitude label position in fractions\n * (0..1) of view extent. 0 means at the bottom of the viewport, 1 means at the\n * top.\n * @property {number} [latLabelPosition=1] Latitude label position in fractions\n * (0..1) of view extent. 0 means at the left of the viewport, 1 means at the\n * right.\n * @property {Text} [lonLabelStyle] Longitude label text\n * style. If not provided, the following style will be used:\n * ```js\n * new Text({\n *   font: '12px Calibri,sans-serif',\n *   textBaseline: 'bottom',\n *   fill: new Fill({\n *     color: 'rgba(0,0,0,1)'\n *   }),\n *   stroke: new Stroke({\n *     color: 'rgba(255,255,255,1)',\n *     width: 3\n *   })\n * });\n * ```\n * Note that the default's `textBaseline` configuration will not work well for\n * `lonLabelPosition` configurations that position labels close to the top of\n * the viewport.\n * @property {Text} [latLabelStyle] Latitude label text style.\n * If not provided, the following style will be used:\n * ```js\n * new Text({\n *   font: '12px Calibri,sans-serif',\n *   textAlign: 'end',\n *   fill: new Fill({\n *     color: 'rgba(0,0,0,1)'\n *   }),\n *   stroke: Stroke({\n *     color: 'rgba(255,255,255,1)',\n *     width: 3\n *   })\n * });\n * ```\n * Note that the default's `textAlign` configuration will not work well for\n * `latLabelPosition` configurations that position labels close to the left of\n * the viewport.\n * @property {Array<number>} [intervals=[90, 45, 30, 20, 10, 5, 2, 1, 30/60, 20/60, 10/60, 5/60, 2/60, 1/60, 30/3600, 20/3600, 10/3600, 5/3600, 2/3600, 1/3600]]\n * Intervals (in degrees) for the graticule. Example to limit graticules to 30 and 10 degrees intervals:\n * ```js\n * [30, 10]\n * ```\n * @property {boolean} [wrapX=true] Whether to repeat the graticule horizontally.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Layer that renders a grid for a coordinate system (currently only EPSG:4326 is supported).\n * Note that the view projection must define both extent and worldExtent.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @extends {VectorLayer<import(\"../source/Vector.js\").default>}\n * @api\n */\nclass Graticule extends VectorLayer {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const baseOptions = Object.assign(\n      {\n        updateWhileAnimating: true,\n        updateWhileInteracting: true,\n        renderBuffer: 0,\n      },\n      options\n    );\n\n    delete baseOptions.maxLines;\n    delete baseOptions.strokeStyle;\n    delete baseOptions.targetSize;\n    delete baseOptions.showLabels;\n    delete baseOptions.lonLabelFormatter;\n    delete baseOptions.latLabelFormatter;\n    delete baseOptions.lonLabelPosition;\n    delete baseOptions.latLabelPosition;\n    delete baseOptions.lonLabelStyle;\n    delete baseOptions.latLabelStyle;\n    delete baseOptions.intervals;\n    super(baseOptions);\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.projection_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxLat_ = Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxLon_ = Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.minLat_ = -Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.minLon_ = -Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxX_ = Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxY_ = Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.minX_ = -Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.minY_ = -Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.targetSize_ =\n      options.targetSize !== undefined ? options.targetSize : 100;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxLines_ = options.maxLines !== undefined ? options.maxLines : 100;\n\n    /**\n     * @type {Array<LineString>}\n     * @private\n     */\n    this.meridians_ = [];\n\n    /**\n     * @type {Array<LineString>}\n     * @private\n     */\n    this.parallels_ = [];\n\n    /**\n     * @type {Stroke}\n     * @private\n     */\n    this.strokeStyle_ =\n      options.strokeStyle !== undefined\n        ? options.strokeStyle\n        : DEFAULT_STROKE_STYLE;\n\n    /**\n     * @type {import(\"../proj.js\").TransformFunction|undefined}\n     * @private\n     */\n    this.fromLonLatTransform_ = undefined;\n\n    /**\n     * @type {import(\"../proj.js\").TransformFunction|undefined}\n     * @private\n     */\n    this.toLonLatTransform_ = undefined;\n\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.projectionCenterLonLat_ = null;\n\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.bottomLeft_ = null;\n\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.bottomRight_ = null;\n\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.topLeft_ = null;\n\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.topRight_ = null;\n\n    /**\n     * @type {Array<GraticuleLabelDataType>}\n     * @private\n     */\n    this.meridiansLabels_ = null;\n\n    /**\n     * @type {Array<GraticuleLabelDataType>}\n     * @private\n     */\n    this.parallelsLabels_ = null;\n\n    if (options.showLabels) {\n      /**\n       * @type {null|function(number):string}\n       * @private\n       */\n      this.lonLabelFormatter_ =\n        options.lonLabelFormatter == undefined\n          ? degreesToStringHDMS.bind(this, 'EW')\n          : options.lonLabelFormatter;\n\n      /**\n       * @type {function(number):string}\n       * @private\n       */\n      this.latLabelFormatter_ =\n        options.latLabelFormatter == undefined\n          ? degreesToStringHDMS.bind(this, 'NS')\n          : options.latLabelFormatter;\n\n      /**\n       * Longitude label position in fractions (0..1) of view extent. 0 means\n       * bottom, 1 means top.\n       * @type {number}\n       * @private\n       */\n      this.lonLabelPosition_ =\n        options.lonLabelPosition == undefined ? 0 : options.lonLabelPosition;\n\n      /**\n       * Latitude Label position in fractions (0..1) of view extent. 0 means left, 1\n       * means right.\n       * @type {number}\n       * @private\n       */\n      this.latLabelPosition_ =\n        options.latLabelPosition == undefined ? 1 : options.latLabelPosition;\n\n      /**\n       * @type {Style}\n       * @private\n       */\n      this.lonLabelStyleBase_ = new Style({\n        text:\n          options.lonLabelStyle !== undefined\n            ? options.lonLabelStyle.clone()\n            : new Text({\n                font: '12px Calibri,sans-serif',\n                textBaseline: 'bottom',\n                fill: new Fill({\n                  color: 'rgba(0,0,0,1)',\n                }),\n                stroke: new Stroke({\n                  color: 'rgba(255,255,255,1)',\n                  width: 3,\n                }),\n              }),\n      });\n\n      /**\n       * @private\n       * @param {import(\"../Feature\").default} feature Feature\n       * @return {Style} style\n       */\n      this.lonLabelStyle_ = (feature) => {\n        const label = feature.get('graticule_label');\n        this.lonLabelStyleBase_.getText().setText(label);\n        return this.lonLabelStyleBase_;\n      };\n\n      /**\n       * @type {Style}\n       * @private\n       */\n      this.latLabelStyleBase_ = new Style({\n        text:\n          options.latLabelStyle !== undefined\n            ? options.latLabelStyle.clone()\n            : new Text({\n                font: '12px Calibri,sans-serif',\n                textAlign: 'right',\n                fill: new Fill({\n                  color: 'rgba(0,0,0,1)',\n                }),\n                stroke: new Stroke({\n                  color: 'rgba(255,255,255,1)',\n                  width: 3,\n                }),\n              }),\n      });\n\n      /**\n       * @private\n       * @param {import(\"../Feature\").default} feature Feature\n       * @return {Style} style\n       */\n      this.latLabelStyle_ = (feature) => {\n        const label = feature.get('graticule_label');\n        this.latLabelStyleBase_.getText().setText(label);\n        return this.latLabelStyleBase_;\n      };\n\n      this.meridiansLabels_ = [];\n      this.parallelsLabels_ = [];\n\n      this.addEventListener(EventType.POSTRENDER, this.drawLabels_.bind(this));\n    }\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.intervals_ =\n      options.intervals !== undefined ? options.intervals : INTERVALS;\n\n    // use a source with a custom loader for lines & text\n    this.setSource(\n      new VectorSource({\n        loader: this.loaderFunction.bind(this),\n        strategy: this.strategyFunction.bind(this),\n        features: new Collection(),\n        overlaps: false,\n        useSpatialIndex: false,\n        wrapX: options.wrapX,\n      })\n    );\n\n    /**\n     * feature pool to use when updating graticule\n     * @type {Array<Feature>}\n     * @private\n     */\n    this.featurePool_ = [];\n\n    /**\n     * @type {Style}\n     * @private\n     */\n    this.lineStyle_ = new Style({\n      stroke: this.strokeStyle_,\n    });\n\n    /**\n     * @type {?import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.loadedExtent_ = null;\n\n    /**\n     * @type {?import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.renderedExtent_ = null;\n\n    /**\n     * @type {?number}\n     * @private\n     */\n    this.renderedResolution_ = null;\n\n    this.setRenderOrder(null);\n  }\n\n  /**\n   * Strategy function for loading features based on the view's extent and\n   * resolution.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @return {Array<import(\"../extent.js\").Extent>} Extents.\n   */\n  strategyFunction(extent, resolution) {\n    // extents may be passed in different worlds, to avoid endless loop we use only one\n    let realWorldExtent = extent.slice();\n    if (this.projection_ && this.getSource().getWrapX()) {\n      wrapExtentX(realWorldExtent, this.projection_);\n    }\n    if (this.loadedExtent_) {\n      if (\n        approximatelyEquals(this.loadedExtent_, realWorldExtent, resolution)\n      ) {\n        // make sure result is exactly equal to previous extent\n        realWorldExtent = this.loadedExtent_.slice();\n      } else {\n        // we should not keep track of loaded extents\n        this.getSource().removeLoadedExtent(this.loadedExtent_);\n      }\n    }\n    return [realWorldExtent];\n  }\n\n  /**\n   * Update geometries in the source based on current view\n   * @param {import(\"../extent\").Extent} extent Extent\n   * @param {number} resolution Resolution\n   * @param {import(\"../proj/Projection.js\").default} projection Projection\n   */\n  loaderFunction(extent, resolution, projection) {\n    this.loadedExtent_ = extent;\n    const source = this.getSource();\n\n    // only consider the intersection between our own extent & the requested one\n    const layerExtent = this.getExtent() || [\n      -Infinity,\n      -Infinity,\n      Infinity,\n      Infinity,\n    ];\n    const renderExtent = getIntersection(layerExtent, extent);\n\n    if (\n      this.renderedExtent_ &&\n      equals(this.renderedExtent_, renderExtent) &&\n      this.renderedResolution_ === resolution\n    ) {\n      return;\n    }\n    this.renderedExtent_ = renderExtent;\n    this.renderedResolution_ = resolution;\n\n    // bail out if nothing to render\n    if (isEmpty(renderExtent)) {\n      return;\n    }\n\n    // update projection info\n    const center = getCenter(renderExtent);\n    const squaredTolerance = (resolution * resolution) / 4;\n\n    const updateProjectionInfo =\n      !this.projection_ || !equivalentProjection(this.projection_, projection);\n\n    if (updateProjectionInfo) {\n      this.updateProjectionInfo_(projection);\n    }\n\n    this.createGraticule_(renderExtent, center, resolution, squaredTolerance);\n\n    // first make sure we have enough features in the pool\n    let featureCount = this.meridians_.length + this.parallels_.length;\n    if (this.meridiansLabels_) {\n      featureCount += this.meridians_.length;\n    }\n    if (this.parallelsLabels_) {\n      featureCount += this.parallels_.length;\n    }\n\n    let feature;\n    while (featureCount > this.featurePool_.length) {\n      feature = new Feature();\n      this.featurePool_.push(feature);\n    }\n\n    const featuresColl = source.getFeaturesCollection();\n    featuresColl.clear();\n    let poolIndex = 0;\n\n    // add features for the lines & labels\n    let i, l;\n    for (i = 0, l = this.meridians_.length; i < l; ++i) {\n      feature = this.featurePool_[poolIndex++];\n      feature.setGeometry(this.meridians_[i]);\n      feature.setStyle(this.lineStyle_);\n      featuresColl.push(feature);\n    }\n    for (i = 0, l = this.parallels_.length; i < l; ++i) {\n      feature = this.featurePool_[poolIndex++];\n      feature.setGeometry(this.parallels_[i]);\n      feature.setStyle(this.lineStyle_);\n      featuresColl.push(feature);\n    }\n  }\n\n  /**\n   * @param {number} lon Longitude.\n   * @param {number} minLat Minimal latitude.\n   * @param {number} maxLat Maximal latitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {number} Index.\n   * @private\n   */\n  addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, index) {\n    const lineString = this.getMeridian_(\n      lon,\n      minLat,\n      maxLat,\n      squaredTolerance,\n      index\n    );\n    if (intersects(lineString.getExtent(), extent)) {\n      if (this.meridiansLabels_) {\n        const text = this.lonLabelFormatter_(lon);\n        if (index in this.meridiansLabels_) {\n          this.meridiansLabels_[index].text = text;\n        } else {\n          this.meridiansLabels_[index] = {\n            geom: new Point([]),\n            text: text,\n          };\n        }\n      }\n      this.meridians_[index++] = lineString;\n    }\n    return index;\n  }\n\n  /**\n   * @param {number} lat Latitude.\n   * @param {number} minLon Minimal longitude.\n   * @param {number} maxLon Maximal longitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {number} Index.\n   * @private\n   */\n  addParallel_(lat, minLon, maxLon, squaredTolerance, extent, index) {\n    const lineString = this.getParallel_(\n      lat,\n      minLon,\n      maxLon,\n      squaredTolerance,\n      index\n    );\n    if (intersects(lineString.getExtent(), extent)) {\n      if (this.parallelsLabels_) {\n        const text = this.latLabelFormatter_(lat);\n        if (index in this.parallelsLabels_) {\n          this.parallelsLabels_[index].text = text;\n        } else {\n          this.parallelsLabels_[index] = {\n            geom: new Point([]),\n            text: text,\n          };\n        }\n      }\n      this.parallels_[index++] = lineString;\n    }\n    return index;\n  }\n\n  /**\n   * @param {import(\"../render/Event.js\").default} event Render event.\n   * @private\n   */\n  drawLabels_(event) {\n    const rotation = event.frameState.viewState.rotation;\n    const resolution = event.frameState.viewState.resolution;\n    const size = event.frameState.size;\n    const extent = event.frameState.extent;\n    const rotationCenter = getCenter(extent);\n    let rotationExtent = extent;\n    if (rotation) {\n      const unrotatedWidth = size[0] * resolution;\n      const unrotatedHeight = size[1] * resolution;\n      rotationExtent = [\n        rotationCenter[0] - unrotatedWidth / 2,\n        rotationCenter[1] - unrotatedHeight / 2,\n        rotationCenter[0] + unrotatedWidth / 2,\n        rotationCenter[1] + unrotatedHeight / 2,\n      ];\n    }\n\n    let startWorld = 0;\n    let endWorld = 0;\n    let labelsAtStart = this.latLabelPosition_ < 0.5;\n    const projectionExtent = this.projection_.getExtent();\n    const worldWidth = getWidth(projectionExtent);\n    if (\n      this.getSource().getWrapX() &&\n      this.projection_.canWrapX() &&\n      !containsExtent(projectionExtent, extent)\n    ) {\n      startWorld = Math.floor((extent[0] - projectionExtent[0]) / worldWidth);\n      endWorld = Math.ceil((extent[2] - projectionExtent[2]) / worldWidth);\n      const inverted = Math.abs(rotation) > Math.PI / 2;\n      labelsAtStart = labelsAtStart !== inverted;\n    }\n    const vectorContext = getVectorContext(event);\n\n    for (let world = startWorld; world <= endWorld; ++world) {\n      let poolIndex = this.meridians_.length + this.parallels_.length;\n      let feature, index, l, textPoint;\n\n      if (this.meridiansLabels_) {\n        for (index = 0, l = this.meridiansLabels_.length; index < l; ++index) {\n          const lineString = this.meridians_[index];\n          if (!rotation && world === 0) {\n            textPoint = this.getMeridianPoint_(lineString, extent, index);\n          } else {\n            const clone = lineString.clone();\n            clone.translate(world * worldWidth, 0);\n            clone.rotate(-rotation, rotationCenter);\n            textPoint = this.getMeridianPoint_(clone, rotationExtent, index);\n            textPoint.rotate(rotation, rotationCenter);\n          }\n          feature = this.featurePool_[poolIndex++];\n          feature.setGeometry(textPoint);\n          feature.set('graticule_label', this.meridiansLabels_[index].text);\n          vectorContext.drawFeature(feature, this.lonLabelStyle_(feature));\n        }\n      }\n      if (this.parallelsLabels_) {\n        if (\n          (world === startWorld && labelsAtStart) ||\n          (world === endWorld && !labelsAtStart)\n        ) {\n          for (index = 0, l = this.parallels_.length; index < l; ++index) {\n            const lineString = this.parallels_[index];\n            if (!rotation && world === 0) {\n              textPoint = this.getParallelPoint_(lineString, extent, index);\n            } else {\n              const clone = lineString.clone();\n              clone.translate(world * worldWidth, 0);\n              clone.rotate(-rotation, rotationCenter);\n              textPoint = this.getParallelPoint_(clone, rotationExtent, index);\n              textPoint.rotate(rotation, rotationCenter);\n            }\n            feature = this.featurePool_[poolIndex++];\n            feature.setGeometry(textPoint);\n            feature.set('graticule_label', this.parallelsLabels_[index].text);\n            vectorContext.drawFeature(feature, this.latLabelStyle_(feature));\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @private\n   */\n  createGraticule_(extent, center, resolution, squaredTolerance) {\n    const interval = this.getInterval_(resolution);\n    if (interval == -1) {\n      this.meridians_.length = 0;\n      this.parallels_.length = 0;\n      if (this.meridiansLabels_) {\n        this.meridiansLabels_.length = 0;\n      }\n      if (this.parallelsLabels_) {\n        this.parallelsLabels_.length = 0;\n      }\n      return;\n    }\n\n    let wrapX = false;\n    const projectionExtent = this.projection_.getExtent();\n    const worldWidth = getWidth(projectionExtent);\n    if (\n      this.getSource().getWrapX() &&\n      this.projection_.canWrapX() &&\n      !containsExtent(projectionExtent, extent)\n    ) {\n      if (getWidth(extent) >= worldWidth) {\n        extent[0] = projectionExtent[0];\n        extent[2] = projectionExtent[2];\n      } else {\n        wrapX = true;\n      }\n    }\n\n    // Constrain the center to fit into the extent available to the graticule\n\n    const validCenterP = [\n      clamp(center[0], this.minX_, this.maxX_),\n      clamp(center[1], this.minY_, this.maxY_),\n    ];\n\n    // Transform the center to lon lat\n    // Some projections may have a void area at the poles\n    // so replace any NaN latitudes with the min or max value closest to a pole\n\n    const centerLonLat = this.toLonLatTransform_(validCenterP);\n    if (isNaN(centerLonLat[1])) {\n      centerLonLat[1] =\n        Math.abs(this.maxLat_) >= Math.abs(this.minLat_)\n          ? this.maxLat_\n          : this.minLat_;\n    }\n    let centerLon = clamp(centerLonLat[0], this.minLon_, this.maxLon_);\n    let centerLat = clamp(centerLonLat[1], this.minLat_, this.maxLat_);\n    const maxLines = this.maxLines_;\n    let cnt, idx, lat, lon;\n\n    // Limit the extent to fit into the extent available to the graticule\n\n    let validExtentP = extent;\n    if (!wrapX) {\n      validExtentP = [\n        clamp(extent[0], this.minX_, this.maxX_),\n        clamp(extent[1], this.minY_, this.maxY_),\n        clamp(extent[2], this.minX_, this.maxX_),\n        clamp(extent[3], this.minY_, this.maxY_),\n      ];\n    }\n\n    // Transform the extent to get the lon lat ranges for the edges of the extent\n\n    const validExtent = applyTransform(\n      validExtentP,\n      this.toLonLatTransform_,\n      undefined,\n      8\n    );\n\n    let maxLat = validExtent[3];\n    let maxLon = validExtent[2];\n    let minLat = validExtent[1];\n    let minLon = validExtent[0];\n\n    if (!wrapX) {\n      // Check if extremities of the world extent lie inside the extent\n      // (for example the pole in a polar projection)\n      // and extend the extent as appropriate\n\n      if (containsCoordinate(validExtentP, this.bottomLeft_)) {\n        minLon = this.minLon_;\n        minLat = this.minLat_;\n      }\n      if (containsCoordinate(validExtentP, this.bottomRight_)) {\n        maxLon = this.maxLon_;\n        minLat = this.minLat_;\n      }\n      if (containsCoordinate(validExtentP, this.topLeft_)) {\n        minLon = this.minLon_;\n        maxLat = this.maxLat_;\n      }\n      if (containsCoordinate(validExtentP, this.topRight_)) {\n        maxLon = this.maxLon_;\n        maxLat = this.maxLat_;\n      }\n\n      // The transformed center may also extend the lon lat ranges used for rendering\n\n      maxLat = clamp(maxLat, centerLat, this.maxLat_);\n      maxLon = clamp(maxLon, centerLon, this.maxLon_);\n      minLat = clamp(minLat, this.minLat_, centerLat);\n      minLon = clamp(minLon, this.minLon_, centerLon);\n    }\n\n    // Create meridians\n\n    centerLon = Math.floor(centerLon / interval) * interval;\n    lon = clamp(centerLon, this.minLon_, this.maxLon_);\n\n    idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, 0);\n\n    cnt = 0;\n    if (wrapX) {\n      while ((lon -= interval) >= minLon && cnt++ < maxLines) {\n        idx = this.addMeridian_(\n          lon,\n          minLat,\n          maxLat,\n          squaredTolerance,\n          extent,\n          idx\n        );\n      }\n    } else {\n      while (lon != this.minLon_ && cnt++ < maxLines) {\n        lon = Math.max(lon - interval, this.minLon_);\n        idx = this.addMeridian_(\n          lon,\n          minLat,\n          maxLat,\n          squaredTolerance,\n          extent,\n          idx\n        );\n      }\n    }\n\n    lon = clamp(centerLon, this.minLon_, this.maxLon_);\n\n    cnt = 0;\n    if (wrapX) {\n      while ((lon += interval) <= maxLon && cnt++ < maxLines) {\n        idx = this.addMeridian_(\n          lon,\n          minLat,\n          maxLat,\n          squaredTolerance,\n          extent,\n          idx\n        );\n      }\n    } else {\n      while (lon != this.maxLon_ && cnt++ < maxLines) {\n        lon = Math.min(lon + interval, this.maxLon_);\n        idx = this.addMeridian_(\n          lon,\n          minLat,\n          maxLat,\n          squaredTolerance,\n          extent,\n          idx\n        );\n      }\n    }\n\n    this.meridians_.length = idx;\n    if (this.meridiansLabels_) {\n      this.meridiansLabels_.length = idx;\n    }\n\n    // Create parallels\n\n    centerLat = Math.floor(centerLat / interval) * interval;\n    lat = clamp(centerLat, this.minLat_, this.maxLat_);\n\n    idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, 0);\n\n    cnt = 0;\n    while (lat != this.minLat_ && cnt++ < maxLines) {\n      lat = Math.max(lat - interval, this.minLat_);\n      idx = this.addParallel_(\n        lat,\n        minLon,\n        maxLon,\n        squaredTolerance,\n        extent,\n        idx\n      );\n    }\n\n    lat = clamp(centerLat, this.minLat_, this.maxLat_);\n\n    cnt = 0;\n    while (lat != this.maxLat_ && cnt++ < maxLines) {\n      lat = Math.min(lat + interval, this.maxLat_);\n      idx = this.addParallel_(\n        lat,\n        minLon,\n        maxLon,\n        squaredTolerance,\n        extent,\n        idx\n      );\n    }\n\n    this.parallels_.length = idx;\n    if (this.parallelsLabels_) {\n      this.parallelsLabels_.length = idx;\n    }\n  }\n\n  /**\n   * @param {number} resolution Resolution.\n   * @return {number} The interval in degrees.\n   * @private\n   */\n  getInterval_(resolution) {\n    const centerLon = this.projectionCenterLonLat_[0];\n    const centerLat = this.projectionCenterLonLat_[1];\n    let interval = -1;\n    const target = Math.pow(this.targetSize_ * resolution, 2);\n    /** @type {Array<number>} **/\n    const p1 = [];\n    /** @type {Array<number>} **/\n    const p2 = [];\n    for (let i = 0, ii = this.intervals_.length; i < ii; ++i) {\n      const delta = clamp(this.intervals_[i] / 2, 0, 90);\n      // Don't attempt to transform latitudes beyond the poles!\n      const clampedLat = clamp(centerLat, -90 + delta, 90 - delta);\n      p1[0] = centerLon - delta;\n      p1[1] = clampedLat - delta;\n      p2[0] = centerLon + delta;\n      p2[1] = clampedLat + delta;\n      this.fromLonLatTransform_(p1, p1);\n      this.fromLonLatTransform_(p2, p2);\n      const dist = Math.pow(p2[0] - p1[0], 2) + Math.pow(p2[1] - p1[1], 2);\n      if (dist <= target) {\n        break;\n      }\n      interval = this.intervals_[i];\n    }\n    return interval;\n  }\n\n  /**\n   * @param {number} lon Longitude.\n   * @param {number} minLat Minimal latitude.\n   * @param {number} maxLat Maximal latitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} The meridian line string.\n   * @param {number} index Index.\n   * @private\n   */\n  getMeridian_(lon, minLat, maxLat, squaredTolerance, index) {\n    const flatCoordinates = meridian(\n      lon,\n      minLat,\n      maxLat,\n      this.projection_,\n      squaredTolerance\n    );\n    let lineString = this.meridians_[index];\n    if (!lineString) {\n      lineString = new LineString(flatCoordinates, 'XY');\n      this.meridians_[index] = lineString;\n    } else {\n      lineString.setFlatCoordinates('XY', flatCoordinates);\n      lineString.changed();\n    }\n    return lineString;\n  }\n\n  /**\n   * @param {LineString} lineString Meridian\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {Point} Meridian point.\n   * @private\n   */\n  getMeridianPoint_(lineString, extent, index) {\n    const flatCoordinates = lineString.getFlatCoordinates();\n    let bottom = 1;\n    let top = flatCoordinates.length - 1;\n    if (flatCoordinates[bottom] > flatCoordinates[top]) {\n      bottom = top;\n      top = 1;\n    }\n    const clampedBottom = Math.max(extent[1], flatCoordinates[bottom]);\n    const clampedTop = Math.min(extent[3], flatCoordinates[top]);\n    const lat = clamp(\n      extent[1] + Math.abs(extent[1] - extent[3]) * this.lonLabelPosition_,\n      clampedBottom,\n      clampedTop\n    );\n    const coordinate0 =\n      flatCoordinates[bottom - 1] +\n      ((flatCoordinates[top - 1] - flatCoordinates[bottom - 1]) *\n        (lat - flatCoordinates[bottom])) /\n        (flatCoordinates[top] - flatCoordinates[bottom]);\n    const coordinate = [coordinate0, lat];\n    const point = this.meridiansLabels_[index].geom;\n    point.setCoordinates(coordinate);\n    return point;\n  }\n\n  /**\n   * Get the list of meridians.  Meridians are lines of equal longitude.\n   * @return {Array<LineString>} The meridians.\n   * @api\n   */\n  getMeridians() {\n    return this.meridians_;\n  }\n\n  /**\n   * @param {number} lat Latitude.\n   * @param {number} minLon Minimal longitude.\n   * @param {number} maxLon Maximal longitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} The parallel line string.\n   * @param {number} index Index.\n   * @private\n   */\n  getParallel_(lat, minLon, maxLon, squaredTolerance, index) {\n    const flatCoordinates = parallel(\n      lat,\n      minLon,\n      maxLon,\n      this.projection_,\n      squaredTolerance\n    );\n    let lineString = this.parallels_[index];\n    if (!lineString) {\n      lineString = new LineString(flatCoordinates, 'XY');\n    } else {\n      lineString.setFlatCoordinates('XY', flatCoordinates);\n      lineString.changed();\n    }\n    return lineString;\n  }\n\n  /**\n   * @param {LineString} lineString Parallels.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {Point} Parallel point.\n   * @private\n   */\n  getParallelPoint_(lineString, extent, index) {\n    const flatCoordinates = lineString.getFlatCoordinates();\n    let left = 0;\n    let right = flatCoordinates.length - 2;\n    if (flatCoordinates[left] > flatCoordinates[right]) {\n      left = right;\n      right = 0;\n    }\n    const clampedLeft = Math.max(extent[0], flatCoordinates[left]);\n    const clampedRight = Math.min(extent[2], flatCoordinates[right]);\n    const lon = clamp(\n      extent[0] + Math.abs(extent[0] - extent[2]) * this.latLabelPosition_,\n      clampedLeft,\n      clampedRight\n    );\n    const coordinate1 =\n      flatCoordinates[left + 1] +\n      ((flatCoordinates[right + 1] - flatCoordinates[left + 1]) *\n        (lon - flatCoordinates[left])) /\n        (flatCoordinates[right] - flatCoordinates[left]);\n    const coordinate = [lon, coordinate1];\n    const point = this.parallelsLabels_[index].geom;\n    point.setCoordinates(coordinate);\n    return point;\n  }\n\n  /**\n   * Get the list of parallels.  Parallels are lines of equal latitude.\n   * @return {Array<LineString>} The parallels.\n   * @api\n   */\n  getParallels() {\n    return this.parallels_;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @private\n   */\n  updateProjectionInfo_(projection) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n\n    const worldExtent = projection.getWorldExtent();\n\n    this.maxLat_ = worldExtent[3];\n    this.maxLon_ = worldExtent[2];\n    this.minLat_ = worldExtent[1];\n    this.minLon_ = worldExtent[0];\n\n    // If the world extent crosses the dateline define a custom transform to\n    // return longitudes which wrap the dateline\n\n    const toLonLatTransform = getTransform(projection, epsg4326Projection);\n    if (this.minLon_ < this.maxLon_) {\n      this.toLonLatTransform_ = toLonLatTransform;\n    } else {\n      const split = this.minLon_ + this.maxLon_ / 2;\n      this.maxLon_ += 360;\n      this.toLonLatTransform_ = function (coordinates, output, dimension) {\n        dimension = dimension || 2;\n        const lonLatCoordinates = toLonLatTransform(\n          coordinates,\n          output,\n          dimension\n        );\n        for (let i = 0, l = lonLatCoordinates.length; i < l; i += dimension) {\n          if (lonLatCoordinates[i] < split) {\n            lonLatCoordinates[i] += 360;\n          }\n        }\n        return lonLatCoordinates;\n      };\n    }\n\n    // Transform the extent to get the limits of the view projection extent\n    // which should be available to the graticule\n\n    this.fromLonLatTransform_ = getTransform(epsg4326Projection, projection);\n    const worldExtentP = applyTransform(\n      [this.minLon_, this.minLat_, this.maxLon_, this.maxLat_],\n      this.fromLonLatTransform_,\n      undefined,\n      8\n    );\n\n    this.minX_ = worldExtentP[0];\n    this.maxX_ = worldExtentP[2];\n    this.minY_ = worldExtentP[1];\n    this.maxY_ = worldExtentP[3];\n\n    // Determine the view projection coordinates of the extremities of the world extent\n    // as these may lie inside a view extent (for example the pole in a polar projection)\n\n    this.bottomLeft_ = this.fromLonLatTransform_([this.minLon_, this.minLat_]);\n    this.bottomRight_ = this.fromLonLatTransform_([this.maxLon_, this.minLat_]);\n    this.topLeft_ = this.fromLonLatTransform_([this.minLon_, this.maxLat_]);\n    this.topRight_ = this.fromLonLatTransform_([this.maxLon_, this.maxLat_]);\n\n    // Transform the projection center to lon lat\n    // Some projections may have a void area at the poles\n    // so replace any NaN latitudes with the min or max value closest to a pole\n\n    this.projectionCenterLonLat_ = this.toLonLatTransform_(\n      getCenter(projection.getExtent())\n    );\n    if (isNaN(this.projectionCenterLonLat_[1])) {\n      this.projectionCenterLonLat_[1] =\n        Math.abs(this.maxLat_) >= Math.abs(this.minLat_)\n          ? this.maxLat_\n          : this.minLat_;\n    }\n\n    this.projection_ = projection;\n  }\n}\n\nexport default Graticule;\n"],"mappings":";AAAA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,kBAAkB;AACzC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,OAAO,MAAM,eAAe;AACnC,OAAOC,IAAI,MAAM,kBAAkB;AACnC,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,KAAK,MAAM,mBAAmB;AACrC,OAAOC,IAAI,MAAM,kBAAkB;AACnC,OAAOC,WAAW,MAAM,aAAa;AACrC,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,SACEC,cAAc,EACdC,mBAAmB,EACnBC,kBAAkB,EAClBC,cAAc,EACdC,MAAM,EACNC,SAAS,EACTC,eAAe,EACfC,QAAQ,EACRC,UAAU,EACVC,OAAO,EACPC,KAAK,IAAIC,WAAW,QACf,cAAc;AACrB,SAAQC,KAAK,QAAO,YAAY;AAChC,SAAQC,mBAAmB,QAAO,kBAAkB;AACpD,SACEC,UAAU,IAAIC,oBAAoB,EAClCC,GAAG,IAAIC,aAAa,EACpBC,YAAY,QACP,YAAY;AACnB,SAAQC,gBAAgB,QAAO,cAAc;AAC7C,SAAQC,QAAQ,EAAEC,QAAQ,QAAO,0BAA0B;;AAE3D;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,IAAI3B,MAAM,CAAC;EACtC4B,KAAK,EAAE;AACT,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,CAChB,EAAE,EACF,EAAE,EACF,EAAE,EACF,EAAE,EACF,EAAE,EACF,CAAC,EACD,CAAC,EACD,CAAC,EACD,EAAE,GAAG,EAAE,EACP,EAAE,GAAG,EAAE,EACP,EAAE,GAAG,EAAE,EACP,CAAC,GAAG,EAAE,EACN,CAAC,GAAG,EAAE,EACN,CAAC,GAAG,EAAE,EACN,EAAE,GAAG,IAAI,EACT,EAAE,GAAG,IAAI,EACT,EAAE,GAAG,IAAI,EACT,CAAC,GAAG,IAAI,EACR,CAAC,GAAG,IAAI,EACR,CAAC,GAAG,IAAI,CACT;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,SAAS3B,WAAW,CAAC;EAClC;AACF;AACA;EACE4B,WAAWA,CAACC,OAAO,EAAE;IACnBA,OAAO,GAAGA,OAAO,GAAGA,OAAO,GAAG,CAAC,CAAC;IAEhC,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAC/B;MACEC,oBAAoB,EAAE,IAAI;MAC1BC,sBAAsB,EAAE,IAAI;MAC5BC,YAAY,EAAE;IAChB,CAAC,EACDN,OACF,CAAC;IAED,OAAOC,WAAW,CAACM,QAAQ;IAC3B,OAAON,WAAW,CAACO,WAAW;IAC9B,OAAOP,WAAW,CAACQ,UAAU;IAC7B,OAAOR,WAAW,CAACS,UAAU;IAC7B,OAAOT,WAAW,CAACU,iBAAiB;IACpC,OAAOV,WAAW,CAACW,iBAAiB;IACpC,OAAOX,WAAW,CAACY,gBAAgB;IACnC,OAAOZ,WAAW,CAACa,gBAAgB;IACnC,OAAOb,WAAW,CAACc,aAAa;IAChC,OAAOd,WAAW,CAACe,aAAa;IAChC,OAAOf,WAAW,CAACgB,SAAS;IAC5B,KAAK,CAAChB,WAAW,CAAC;;IAElB;AACJ;AACA;IACI,IAAI,CAACiB,WAAW,GAAG,IAAI;;IAEvB;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAGC,QAAQ;;IAEvB;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAGD,QAAQ;;IAEvB;AACJ;AACA;AACA;IACI,IAAI,CAACE,OAAO,GAAG,CAACF,QAAQ;;IAExB;AACJ;AACA;AACA;IACI,IAAI,CAACG,OAAO,GAAG,CAACH,QAAQ;;IAExB;AACJ;AACA;AACA;IACI,IAAI,CAACI,KAAK,GAAGJ,QAAQ;;IAErB;AACJ;AACA;AACA;IACI,IAAI,CAACK,KAAK,GAAGL,QAAQ;;IAErB;AACJ;AACA;AACA;IACI,IAAI,CAACM,KAAK,GAAG,CAACN,QAAQ;;IAEtB;AACJ;AACA;AACA;IACI,IAAI,CAACO,KAAK,GAAG,CAACP,QAAQ;;IAEtB;AACJ;AACA;AACA;IACI,IAAI,CAACQ,WAAW,GACd5B,OAAO,CAACS,UAAU,KAAKoB,SAAS,GAAG7B,OAAO,CAACS,UAAU,GAAG,GAAG;;IAE7D;AACJ;AACA;AACA;IACI,IAAI,CAACqB,SAAS,GAAG9B,OAAO,CAACO,QAAQ,KAAKsB,SAAS,GAAG7B,OAAO,CAACO,QAAQ,GAAG,GAAG;;IAExE;AACJ;AACA;AACA;IACI,IAAI,CAACwB,UAAU,GAAG,EAAE;;IAEpB;AACJ;AACA;AACA;IACI,IAAI,CAACC,UAAU,GAAG,EAAE;;IAEpB;AACJ;AACA;AACA;IACI,IAAI,CAACC,YAAY,GACfjC,OAAO,CAACQ,WAAW,KAAKqB,SAAS,GAC7B7B,OAAO,CAACQ,WAAW,GACnBb,oBAAoB;;IAE1B;AACJ;AACA;AACA;IACI,IAAI,CAACuC,oBAAoB,GAAGL,SAAS;;IAErC;AACJ;AACA;AACA;IACI,IAAI,CAACM,kBAAkB,GAAGN,SAAS;;IAEnC;AACJ;AACA;AACA;IACI,IAAI,CAACO,uBAAuB,GAAG,IAAI;;IAEnC;AACJ;AACA;AACA;IACI,IAAI,CAACC,WAAW,GAAG,IAAI;;IAEvB;AACJ;AACA;AACA;IACI,IAAI,CAACC,YAAY,GAAG,IAAI;;IAExB;AACJ;AACA;AACA;IACI,IAAI,CAACC,QAAQ,GAAG,IAAI;;IAEpB;AACJ;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAG,IAAI;;IAErB;AACJ;AACA;AACA;IACI,IAAI,CAACC,gBAAgB,GAAG,IAAI;;IAE5B;AACJ;AACA;AACA;IACI,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAE5B,IAAI1C,OAAO,CAACU,UAAU,EAAE;MACtB;AACN;AACA;AACA;MACM,IAAI,CAACiC,kBAAkB,GACrB3C,OAAO,CAACW,iBAAiB,IAAIkB,SAAS,GAClC3C,mBAAmB,CAAC0D,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GACpC5C,OAAO,CAACW,iBAAiB;;MAE/B;AACN;AACA;AACA;MACM,IAAI,CAACkC,kBAAkB,GACrB7C,OAAO,CAACY,iBAAiB,IAAIiB,SAAS,GAClC3C,mBAAmB,CAAC0D,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GACpC5C,OAAO,CAACY,iBAAiB;;MAE/B;AACN;AACA;AACA;AACA;AACA;MACM,IAAI,CAACkC,iBAAiB,GACpB9C,OAAO,CAACa,gBAAgB,IAAIgB,SAAS,GAAG,CAAC,GAAG7B,OAAO,CAACa,gBAAgB;;MAEtE;AACN;AACA;AACA;AACA;AACA;MACM,IAAI,CAACkC,iBAAiB,GACpB/C,OAAO,CAACc,gBAAgB,IAAIe,SAAS,GAAG,CAAC,GAAG7B,OAAO,CAACc,gBAAgB;;MAEtE;AACN;AACA;AACA;MACM,IAAI,CAACkC,kBAAkB,GAAG,IAAI/E,KAAK,CAAC;QAClCgF,IAAI,EACFjD,OAAO,CAACe,aAAa,KAAKc,SAAS,GAC/B7B,OAAO,CAACe,aAAa,CAACmC,KAAK,CAAC,CAAC,GAC7B,IAAIhF,IAAI,CAAC;UACPiF,IAAI,EAAE,yBAAyB;UAC/BC,YAAY,EAAE,QAAQ;UACtBC,IAAI,EAAE,IAAIxF,IAAI,CAAC;YACb+B,KAAK,EAAE;UACT,CAAC,CAAC;UACF0D,MAAM,EAAE,IAAItF,MAAM,CAAC;YACjB4B,KAAK,EAAE,qBAAqB;YAC5B2D,KAAK,EAAE;UACT,CAAC;QACH,CAAC;MACT,CAAC,CAAC;;MAEF;AACN;AACA;AACA;AACA;MACM,IAAI,CAACC,cAAc,GAAIC,OAAO,IAAK;QACjC,MAAMC,KAAK,GAAGD,OAAO,CAACpE,GAAG,CAAC,iBAAiB,CAAC;QAC5C,IAAI,CAAC2D,kBAAkB,CAACW,OAAO,CAAC,CAAC,CAACC,OAAO,CAACF,KAAK,CAAC;QAChD,OAAO,IAAI,CAACV,kBAAkB;MAChC,CAAC;;MAED;AACN;AACA;AACA;MACM,IAAI,CAACa,kBAAkB,GAAG,IAAI5F,KAAK,CAAC;QAClCgF,IAAI,EACFjD,OAAO,CAACgB,aAAa,KAAKa,SAAS,GAC/B7B,OAAO,CAACgB,aAAa,CAACkC,KAAK,CAAC,CAAC,GAC7B,IAAIhF,IAAI,CAAC;UACPiF,IAAI,EAAE,yBAAyB;UAC/BW,SAAS,EAAE,OAAO;UAClBT,IAAI,EAAE,IAAIxF,IAAI,CAAC;YACb+B,KAAK,EAAE;UACT,CAAC,CAAC;UACF0D,MAAM,EAAE,IAAItF,MAAM,CAAC;YACjB4B,KAAK,EAAE,qBAAqB;YAC5B2D,KAAK,EAAE;UACT,CAAC;QACH,CAAC;MACT,CAAC,CAAC;;MAEF;AACN;AACA;AACA;AACA;MACM,IAAI,CAACQ,cAAc,GAAIN,OAAO,IAAK;QACjC,MAAMC,KAAK,GAAGD,OAAO,CAACpE,GAAG,CAAC,iBAAiB,CAAC;QAC5C,IAAI,CAACwE,kBAAkB,CAACF,OAAO,CAAC,CAAC,CAACC,OAAO,CAACF,KAAK,CAAC;QAChD,OAAO,IAAI,CAACG,kBAAkB;MAChC,CAAC;MAED,IAAI,CAACpB,gBAAgB,GAAG,EAAE;MAC1B,IAAI,CAACC,gBAAgB,GAAG,EAAE;MAE1B,IAAI,CAACsB,gBAAgB,CAACrG,SAAS,CAACsG,UAAU,EAAE,IAAI,CAACC,WAAW,CAACtB,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1E;;IAEA;AACJ;AACA;AACA;IACI,IAAI,CAACuB,UAAU,GACbnE,OAAO,CAACiB,SAAS,KAAKY,SAAS,GAAG7B,OAAO,CAACiB,SAAS,GAAGpB,SAAS;;IAEjE;IACA,IAAI,CAACuE,SAAS,CACZ,IAAIhG,YAAY,CAAC;MACfiG,MAAM,EAAE,IAAI,CAACC,cAAc,CAAC1B,IAAI,CAAC,IAAI,CAAC;MACtC2B,QAAQ,EAAE,IAAI,CAACC,gBAAgB,CAAC5B,IAAI,CAAC,IAAI,CAAC;MAC1C6B,QAAQ,EAAE,IAAI/G,UAAU,CAAC,CAAC;MAC1BgH,QAAQ,EAAE,KAAK;MACfC,eAAe,EAAE,KAAK;MACtB5F,KAAK,EAAEiB,OAAO,CAACjB;IACjB,CAAC,CACH,CAAC;;IAED;AACJ;AACA;AACA;AACA;IACI,IAAI,CAAC6F,YAAY,GAAG,EAAE;;IAEtB;AACJ;AACA;AACA;IACI,IAAI,CAACC,UAAU,GAAG,IAAI5G,KAAK,CAAC;MAC1BqF,MAAM,EAAE,IAAI,CAACrB;IACf,CAAC,CAAC;;IAEF;AACJ;AACA;AACA;IACI,IAAI,CAAC6C,aAAa,GAAG,IAAI;;IAEzB;AACJ;AACA;AACA;IACI,IAAI,CAACC,eAAe,GAAG,IAAI;;IAE3B;AACJ;AACA;AACA;IACI,IAAI,CAACC,mBAAmB,GAAG,IAAI;IAE/B,IAAI,CAACC,cAAc,CAAC,IAAI,CAAC;EAC3B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACET,gBAAgBA,CAACU,MAAM,EAAEC,UAAU,EAAE;IACnC;IACA,IAAIC,eAAe,GAAGF,MAAM,CAACG,KAAK,CAAC,CAAC;IACpC,IAAI,IAAI,CAACnE,WAAW,IAAI,IAAI,CAACoE,SAAS,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE;MACnDvG,WAAW,CAACoG,eAAe,EAAE,IAAI,CAAClE,WAAW,CAAC;IAChD;IACA,IAAI,IAAI,CAAC4D,aAAa,EAAE;MACtB,IACExG,mBAAmB,CAAC,IAAI,CAACwG,aAAa,EAAEM,eAAe,EAAED,UAAU,CAAC,EACpE;QACA;QACAC,eAAe,GAAG,IAAI,CAACN,aAAa,CAACO,KAAK,CAAC,CAAC;MAC9C,CAAC,MAAM;QACL;QACA,IAAI,CAACC,SAAS,CAAC,CAAC,CAACE,kBAAkB,CAAC,IAAI,CAACV,aAAa,CAAC;MACzD;IACF;IACA,OAAO,CAACM,eAAe,CAAC;EAC1B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEd,cAAcA,CAACY,MAAM,EAAEC,UAAU,EAAEM,UAAU,EAAE;IAC7C,IAAI,CAACX,aAAa,GAAGI,MAAM;IAC3B,MAAMQ,MAAM,GAAG,IAAI,CAACJ,SAAS,CAAC,CAAC;;IAE/B;IACA,MAAMK,WAAW,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC,IAAI,CACtC,CAACxE,QAAQ,EACT,CAACA,QAAQ,EACTA,QAAQ,EACRA,QAAQ,CACT;IACD,MAAMyE,YAAY,GAAGlH,eAAe,CAACgH,WAAW,EAAET,MAAM,CAAC;IAEzD,IACE,IAAI,CAACH,eAAe,IACpBtG,MAAM,CAAC,IAAI,CAACsG,eAAe,EAAEc,YAAY,CAAC,IAC1C,IAAI,CAACb,mBAAmB,KAAKG,UAAU,EACvC;MACA;IACF;IACA,IAAI,CAACJ,eAAe,GAAGc,YAAY;IACnC,IAAI,CAACb,mBAAmB,GAAGG,UAAU;;IAErC;IACA,IAAIrG,OAAO,CAAC+G,YAAY,CAAC,EAAE;MACzB;IACF;;IAEA;IACA,MAAMC,MAAM,GAAGpH,SAAS,CAACmH,YAAY,CAAC;IACtC,MAAME,gBAAgB,GAAIZ,UAAU,GAAGA,UAAU,GAAI,CAAC;IAEtD,MAAMa,oBAAoB,GACxB,CAAC,IAAI,CAAC9E,WAAW,IAAI,CAAC9B,oBAAoB,CAAC,IAAI,CAAC8B,WAAW,EAAEuE,UAAU,CAAC;IAE1E,IAAIO,oBAAoB,EAAE;MACxB,IAAI,CAACC,qBAAqB,CAACR,UAAU,CAAC;IACxC;IAEA,IAAI,CAACS,gBAAgB,CAACL,YAAY,EAAEC,MAAM,EAAEX,UAAU,EAAEY,gBAAgB,CAAC;;IAEzE;IACA,IAAII,YAAY,GAAG,IAAI,CAACpE,UAAU,CAACqE,MAAM,GAAG,IAAI,CAACpE,UAAU,CAACoE,MAAM;IAClE,IAAI,IAAI,CAAC3D,gBAAgB,EAAE;MACzB0D,YAAY,IAAI,IAAI,CAACpE,UAAU,CAACqE,MAAM;IACxC;IACA,IAAI,IAAI,CAAC1D,gBAAgB,EAAE;MACzByD,YAAY,IAAI,IAAI,CAACnE,UAAU,CAACoE,MAAM;IACxC;IAEA,IAAI3C,OAAO;IACX,OAAO0C,YAAY,GAAG,IAAI,CAACvB,YAAY,CAACwB,MAAM,EAAE;MAC9C3C,OAAO,GAAG,IAAI7F,OAAO,CAAC,CAAC;MACvB,IAAI,CAACgH,YAAY,CAACyB,IAAI,CAAC5C,OAAO,CAAC;IACjC;IAEA,MAAM6C,YAAY,GAAGZ,MAAM,CAACa,qBAAqB,CAAC,CAAC;IACnDD,YAAY,CAACE,KAAK,CAAC,CAAC;IACpB,IAAIC,SAAS,GAAG,CAAC;;IAEjB;IACA,IAAIC,CAAC,EAAEC,CAAC;IACR,KAAKD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,IAAI,CAAC5E,UAAU,CAACqE,MAAM,EAAEM,CAAC,GAAGC,CAAC,EAAE,EAAED,CAAC,EAAE;MAClDjD,OAAO,GAAG,IAAI,CAACmB,YAAY,CAAC6B,SAAS,EAAE,CAAC;MACxChD,OAAO,CAACmD,WAAW,CAAC,IAAI,CAAC7E,UAAU,CAAC2E,CAAC,CAAC,CAAC;MACvCjD,OAAO,CAACoD,QAAQ,CAAC,IAAI,CAAChC,UAAU,CAAC;MACjCyB,YAAY,CAACD,IAAI,CAAC5C,OAAO,CAAC;IAC5B;IACA,KAAKiD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,IAAI,CAAC3E,UAAU,CAACoE,MAAM,EAAEM,CAAC,GAAGC,CAAC,EAAE,EAAED,CAAC,EAAE;MAClDjD,OAAO,GAAG,IAAI,CAACmB,YAAY,CAAC6B,SAAS,EAAE,CAAC;MACxChD,OAAO,CAACmD,WAAW,CAAC,IAAI,CAAC5E,UAAU,CAAC0E,CAAC,CAAC,CAAC;MACvCjD,OAAO,CAACoD,QAAQ,CAAC,IAAI,CAAChC,UAAU,CAAC;MACjCyB,YAAY,CAACD,IAAI,CAAC5C,OAAO,CAAC;IAC5B;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEqD,YAAYA,CAACC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAElB,gBAAgB,EAAEb,MAAM,EAAEgC,KAAK,EAAE;IACjE,MAAMC,UAAU,GAAG,IAAI,CAACC,YAAY,CAClCL,GAAG,EACHC,MAAM,EACNC,MAAM,EACNlB,gBAAgB,EAChBmB,KACF,CAAC;IACD,IAAIrI,UAAU,CAACsI,UAAU,CAACvB,SAAS,CAAC,CAAC,EAAEV,MAAM,CAAC,EAAE;MAC9C,IAAI,IAAI,CAACzC,gBAAgB,EAAE;QACzB,MAAMQ,IAAI,GAAG,IAAI,CAACN,kBAAkB,CAACoE,GAAG,CAAC;QACzC,IAAIG,KAAK,IAAI,IAAI,CAACzE,gBAAgB,EAAE;UAClC,IAAI,CAACA,gBAAgB,CAACyE,KAAK,CAAC,CAACjE,IAAI,GAAGA,IAAI;QAC1C,CAAC,MAAM;UACL,IAAI,CAACR,gBAAgB,CAACyE,KAAK,CAAC,GAAG;YAC7BG,IAAI,EAAE,IAAItJ,KAAK,CAAC,EAAE,CAAC;YACnBkF,IAAI,EAAEA;UACR,CAAC;QACH;MACF;MACA,IAAI,CAAClB,UAAU,CAACmF,KAAK,EAAE,CAAC,GAAGC,UAAU;IACvC;IACA,OAAOD,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,YAAYA,CAACC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAE1B,gBAAgB,EAAEb,MAAM,EAAEgC,KAAK,EAAE;IACjE,MAAMC,UAAU,GAAG,IAAI,CAACO,YAAY,CAClCH,GAAG,EACHC,MAAM,EACNC,MAAM,EACN1B,gBAAgB,EAChBmB,KACF,CAAC;IACD,IAAIrI,UAAU,CAACsI,UAAU,CAACvB,SAAS,CAAC,CAAC,EAAEV,MAAM,CAAC,EAAE;MAC9C,IAAI,IAAI,CAACxC,gBAAgB,EAAE;QACzB,MAAMO,IAAI,GAAG,IAAI,CAACJ,kBAAkB,CAAC0E,GAAG,CAAC;QACzC,IAAIL,KAAK,IAAI,IAAI,CAACxE,gBAAgB,EAAE;UAClC,IAAI,CAACA,gBAAgB,CAACwE,KAAK,CAAC,CAACjE,IAAI,GAAGA,IAAI;QAC1C,CAAC,MAAM;UACL,IAAI,CAACP,gBAAgB,CAACwE,KAAK,CAAC,GAAG;YAC7BG,IAAI,EAAE,IAAItJ,KAAK,CAAC,EAAE,CAAC;YACnBkF,IAAI,EAAEA;UACR,CAAC;QACH;MACF;MACA,IAAI,CAACjB,UAAU,CAACkF,KAAK,EAAE,CAAC,GAAGC,UAAU;IACvC;IACA,OAAOD,KAAK;EACd;;EAEA;AACF;AACA;AACA;EACEhD,WAAWA,CAACyD,KAAK,EAAE;IACjB,MAAMC,QAAQ,GAAGD,KAAK,CAACE,UAAU,CAACC,SAAS,CAACF,QAAQ;IACpD,MAAMzC,UAAU,GAAGwC,KAAK,CAACE,UAAU,CAACC,SAAS,CAAC3C,UAAU;IACxD,MAAM4C,IAAI,GAAGJ,KAAK,CAACE,UAAU,CAACE,IAAI;IAClC,MAAM7C,MAAM,GAAGyC,KAAK,CAACE,UAAU,CAAC3C,MAAM;IACtC,MAAM8C,cAAc,GAAGtJ,SAAS,CAACwG,MAAM,CAAC;IACxC,IAAI+C,cAAc,GAAG/C,MAAM;IAC3B,IAAI0C,QAAQ,EAAE;MACZ,MAAMM,cAAc,GAAGH,IAAI,CAAC,CAAC,CAAC,GAAG5C,UAAU;MAC3C,MAAMgD,eAAe,GAAGJ,IAAI,CAAC,CAAC,CAAC,GAAG5C,UAAU;MAC5C8C,cAAc,GAAG,CACfD,cAAc,CAAC,CAAC,CAAC,GAAGE,cAAc,GAAG,CAAC,EACtCF,cAAc,CAAC,CAAC,CAAC,GAAGG,eAAe,GAAG,CAAC,EACvCH,cAAc,CAAC,CAAC,CAAC,GAAGE,cAAc,GAAG,CAAC,EACtCF,cAAc,CAAC,CAAC,CAAC,GAAGG,eAAe,GAAG,CAAC,CACxC;IACH;IAEA,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIC,aAAa,GAAG,IAAI,CAACvF,iBAAiB,GAAG,GAAG;IAChD,MAAMwF,gBAAgB,GAAG,IAAI,CAACrH,WAAW,CAAC0E,SAAS,CAAC,CAAC;IACrD,MAAM4C,UAAU,GAAG5J,QAAQ,CAAC2J,gBAAgB,CAAC;IAC7C,IACE,IAAI,CAACjD,SAAS,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,IAC3B,IAAI,CAACrE,WAAW,CAACuH,QAAQ,CAAC,CAAC,IAC3B,CAACjK,cAAc,CAAC+J,gBAAgB,EAAErD,MAAM,CAAC,EACzC;MACAkD,UAAU,GAAGM,IAAI,CAACC,KAAK,CAAC,CAACzD,MAAM,CAAC,CAAC,CAAC,GAAGqD,gBAAgB,CAAC,CAAC,CAAC,IAAIC,UAAU,CAAC;MACvEH,QAAQ,GAAGK,IAAI,CAACE,IAAI,CAAC,CAAC1D,MAAM,CAAC,CAAC,CAAC,GAAGqD,gBAAgB,CAAC,CAAC,CAAC,IAAIC,UAAU,CAAC;MACpE,MAAMK,QAAQ,GAAGH,IAAI,CAACI,GAAG,CAAClB,QAAQ,CAAC,GAAGc,IAAI,CAACK,EAAE,GAAG,CAAC;MACjDT,aAAa,GAAGA,aAAa,KAAKO,QAAQ;IAC5C;IACA,MAAMG,aAAa,GAAGxJ,gBAAgB,CAACmI,KAAK,CAAC;IAE7C,KAAK,IAAIsB,KAAK,GAAGb,UAAU,EAAEa,KAAK,IAAIZ,QAAQ,EAAE,EAAEY,KAAK,EAAE;MACvD,IAAIxC,SAAS,GAAG,IAAI,CAAC1E,UAAU,CAACqE,MAAM,GAAG,IAAI,CAACpE,UAAU,CAACoE,MAAM;MAC/D,IAAI3C,OAAO,EAAEyD,KAAK,EAAEP,CAAC,EAAEuC,SAAS;MAEhC,IAAI,IAAI,CAACzG,gBAAgB,EAAE;QACzB,KAAKyE,KAAK,GAAG,CAAC,EAAEP,CAAC,GAAG,IAAI,CAAClE,gBAAgB,CAAC2D,MAAM,EAAEc,KAAK,GAAGP,CAAC,EAAE,EAAEO,KAAK,EAAE;UACpE,MAAMC,UAAU,GAAG,IAAI,CAACpF,UAAU,CAACmF,KAAK,CAAC;UACzC,IAAI,CAACU,QAAQ,IAAIqB,KAAK,KAAK,CAAC,EAAE;YAC5BC,SAAS,GAAG,IAAI,CAACC,iBAAiB,CAAChC,UAAU,EAAEjC,MAAM,EAAEgC,KAAK,CAAC;UAC/D,CAAC,MAAM;YACL,MAAMhE,KAAK,GAAGiE,UAAU,CAACjE,KAAK,CAAC,CAAC;YAChCA,KAAK,CAACkG,SAAS,CAACH,KAAK,GAAGT,UAAU,EAAE,CAAC,CAAC;YACtCtF,KAAK,CAACmG,MAAM,CAAC,CAACzB,QAAQ,EAAEI,cAAc,CAAC;YACvCkB,SAAS,GAAG,IAAI,CAACC,iBAAiB,CAACjG,KAAK,EAAE+E,cAAc,EAAEf,KAAK,CAAC;YAChEgC,SAAS,CAACG,MAAM,CAACzB,QAAQ,EAAEI,cAAc,CAAC;UAC5C;UACAvE,OAAO,GAAG,IAAI,CAACmB,YAAY,CAAC6B,SAAS,EAAE,CAAC;UACxChD,OAAO,CAACmD,WAAW,CAACsC,SAAS,CAAC;UAC9BzF,OAAO,CAAC6F,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC7G,gBAAgB,CAACyE,KAAK,CAAC,CAACjE,IAAI,CAAC;UACjE+F,aAAa,CAACO,WAAW,CAAC9F,OAAO,EAAE,IAAI,CAACD,cAAc,CAACC,OAAO,CAAC,CAAC;QAClE;MACF;MACA,IAAI,IAAI,CAACf,gBAAgB,EAAE;QACzB,IACGuG,KAAK,KAAKb,UAAU,IAAIE,aAAa,IACrCW,KAAK,KAAKZ,QAAQ,IAAI,CAACC,aAAc,EACtC;UACA,KAAKpB,KAAK,GAAG,CAAC,EAAEP,CAAC,GAAG,IAAI,CAAC3E,UAAU,CAACoE,MAAM,EAAEc,KAAK,GAAGP,CAAC,EAAE,EAAEO,KAAK,EAAE;YAC9D,MAAMC,UAAU,GAAG,IAAI,CAACnF,UAAU,CAACkF,KAAK,CAAC;YACzC,IAAI,CAACU,QAAQ,IAAIqB,KAAK,KAAK,CAAC,EAAE;cAC5BC,SAAS,GAAG,IAAI,CAACM,iBAAiB,CAACrC,UAAU,EAAEjC,MAAM,EAAEgC,KAAK,CAAC;YAC/D,CAAC,MAAM;cACL,MAAMhE,KAAK,GAAGiE,UAAU,CAACjE,KAAK,CAAC,CAAC;cAChCA,KAAK,CAACkG,SAAS,CAACH,KAAK,GAAGT,UAAU,EAAE,CAAC,CAAC;cACtCtF,KAAK,CAACmG,MAAM,CAAC,CAACzB,QAAQ,EAAEI,cAAc,CAAC;cACvCkB,SAAS,GAAG,IAAI,CAACM,iBAAiB,CAACtG,KAAK,EAAE+E,cAAc,EAAEf,KAAK,CAAC;cAChEgC,SAAS,CAACG,MAAM,CAACzB,QAAQ,EAAEI,cAAc,CAAC;YAC5C;YACAvE,OAAO,GAAG,IAAI,CAACmB,YAAY,CAAC6B,SAAS,EAAE,CAAC;YACxChD,OAAO,CAACmD,WAAW,CAACsC,SAAS,CAAC;YAC9BzF,OAAO,CAAC6F,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC5G,gBAAgB,CAACwE,KAAK,CAAC,CAACjE,IAAI,CAAC;YACjE+F,aAAa,CAACO,WAAW,CAAC9F,OAAO,EAAE,IAAI,CAACM,cAAc,CAACN,OAAO,CAAC,CAAC;UAClE;QACF;MACF;IACF;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEyC,gBAAgBA,CAAChB,MAAM,EAAEY,MAAM,EAAEX,UAAU,EAAEY,gBAAgB,EAAE;IAC7D,MAAM0D,QAAQ,GAAG,IAAI,CAACC,YAAY,CAACvE,UAAU,CAAC;IAC9C,IAAIsE,QAAQ,IAAI,CAAC,CAAC,EAAE;MAClB,IAAI,CAAC1H,UAAU,CAACqE,MAAM,GAAG,CAAC;MAC1B,IAAI,CAACpE,UAAU,CAACoE,MAAM,GAAG,CAAC;MAC1B,IAAI,IAAI,CAAC3D,gBAAgB,EAAE;QACzB,IAAI,CAACA,gBAAgB,CAAC2D,MAAM,GAAG,CAAC;MAClC;MACA,IAAI,IAAI,CAAC1D,gBAAgB,EAAE;QACzB,IAAI,CAACA,gBAAgB,CAAC0D,MAAM,GAAG,CAAC;MAClC;MACA;IACF;IAEA,IAAIrH,KAAK,GAAG,KAAK;IACjB,MAAMwJ,gBAAgB,GAAG,IAAI,CAACrH,WAAW,CAAC0E,SAAS,CAAC,CAAC;IACrD,MAAM4C,UAAU,GAAG5J,QAAQ,CAAC2J,gBAAgB,CAAC;IAC7C,IACE,IAAI,CAACjD,SAAS,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,IAC3B,IAAI,CAACrE,WAAW,CAACuH,QAAQ,CAAC,CAAC,IAC3B,CAACjK,cAAc,CAAC+J,gBAAgB,EAAErD,MAAM,CAAC,EACzC;MACA,IAAItG,QAAQ,CAACsG,MAAM,CAAC,IAAIsD,UAAU,EAAE;QAClCtD,MAAM,CAAC,CAAC,CAAC,GAAGqD,gBAAgB,CAAC,CAAC,CAAC;QAC/BrD,MAAM,CAAC,CAAC,CAAC,GAAGqD,gBAAgB,CAAC,CAAC,CAAC;MACjC,CAAC,MAAM;QACLxJ,KAAK,GAAG,IAAI;MACd;IACF;;IAEA;;IAEA,MAAM4K,YAAY,GAAG,CACnB1K,KAAK,CAAC6G,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACpE,KAAK,EAAE,IAAI,CAACF,KAAK,CAAC,EACxCvC,KAAK,CAAC6G,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACnE,KAAK,EAAE,IAAI,CAACF,KAAK,CAAC,CACzC;;IAED;IACA;IACA;;IAEA,MAAMmI,YAAY,GAAG,IAAI,CAACzH,kBAAkB,CAACwH,YAAY,CAAC;IAC1D,IAAIE,KAAK,CAACD,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE;MAC1BA,YAAY,CAAC,CAAC,CAAC,GACblB,IAAI,CAACI,GAAG,CAAC,IAAI,CAAC3H,OAAO,CAAC,IAAIuH,IAAI,CAACI,GAAG,CAAC,IAAI,CAACxH,OAAO,CAAC,GAC5C,IAAI,CAACH,OAAO,GACZ,IAAI,CAACG,OAAO;IACpB;IACA,IAAIwI,SAAS,GAAG7K,KAAK,CAAC2K,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,CAACrI,OAAO,EAAE,IAAI,CAACF,OAAO,CAAC;IAClE,IAAI0I,SAAS,GAAG9K,KAAK,CAAC2K,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,CAACtI,OAAO,EAAE,IAAI,CAACH,OAAO,CAAC;IAClE,MAAMZ,QAAQ,GAAG,IAAI,CAACuB,SAAS;IAC/B,IAAIkI,GAAG,EAAEC,GAAG,EAAE1C,GAAG,EAAER,GAAG;;IAEtB;;IAEA,IAAImD,YAAY,GAAGhF,MAAM;IACzB,IAAI,CAACnG,KAAK,EAAE;MACVmL,YAAY,GAAG,CACbjL,KAAK,CAACiG,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACxD,KAAK,EAAE,IAAI,CAACF,KAAK,CAAC,EACxCvC,KAAK,CAACiG,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACvD,KAAK,EAAE,IAAI,CAACF,KAAK,CAAC,EACxCxC,KAAK,CAACiG,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACxD,KAAK,EAAE,IAAI,CAACF,KAAK,CAAC,EACxCvC,KAAK,CAACiG,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACvD,KAAK,EAAE,IAAI,CAACF,KAAK,CAAC,CACzC;IACH;;IAEA;;IAEA,MAAM0I,WAAW,GAAG9L,cAAc,CAChC6L,YAAY,EACZ,IAAI,CAAC/H,kBAAkB,EACvBN,SAAS,EACT,CACF,CAAC;IAED,IAAIoF,MAAM,GAAGkD,WAAW,CAAC,CAAC,CAAC;IAC3B,IAAI1C,MAAM,GAAG0C,WAAW,CAAC,CAAC,CAAC;IAC3B,IAAInD,MAAM,GAAGmD,WAAW,CAAC,CAAC,CAAC;IAC3B,IAAI3C,MAAM,GAAG2C,WAAW,CAAC,CAAC,CAAC;IAE3B,IAAI,CAACpL,KAAK,EAAE;MACV;MACA;MACA;;MAEA,IAAIR,kBAAkB,CAAC2L,YAAY,EAAE,IAAI,CAAC7H,WAAW,CAAC,EAAE;QACtDmF,MAAM,GAAG,IAAI,CAACjG,OAAO;QACrByF,MAAM,GAAG,IAAI,CAAC1F,OAAO;MACvB;MACA,IAAI/C,kBAAkB,CAAC2L,YAAY,EAAE,IAAI,CAAC5H,YAAY,CAAC,EAAE;QACvDmF,MAAM,GAAG,IAAI,CAACpG,OAAO;QACrB2F,MAAM,GAAG,IAAI,CAAC1F,OAAO;MACvB;MACA,IAAI/C,kBAAkB,CAAC2L,YAAY,EAAE,IAAI,CAAC3H,QAAQ,CAAC,EAAE;QACnDiF,MAAM,GAAG,IAAI,CAACjG,OAAO;QACrB0F,MAAM,GAAG,IAAI,CAAC9F,OAAO;MACvB;MACA,IAAI5C,kBAAkB,CAAC2L,YAAY,EAAE,IAAI,CAAC1H,SAAS,CAAC,EAAE;QACpDiF,MAAM,GAAG,IAAI,CAACpG,OAAO;QACrB4F,MAAM,GAAG,IAAI,CAAC9F,OAAO;MACvB;;MAEA;;MAEA8F,MAAM,GAAGhI,KAAK,CAACgI,MAAM,EAAE8C,SAAS,EAAE,IAAI,CAAC5I,OAAO,CAAC;MAC/CsG,MAAM,GAAGxI,KAAK,CAACwI,MAAM,EAAEqC,SAAS,EAAE,IAAI,CAACzI,OAAO,CAAC;MAC/C2F,MAAM,GAAG/H,KAAK,CAAC+H,MAAM,EAAE,IAAI,CAAC1F,OAAO,EAAEyI,SAAS,CAAC;MAC/CvC,MAAM,GAAGvI,KAAK,CAACuI,MAAM,EAAE,IAAI,CAACjG,OAAO,EAAEuI,SAAS,CAAC;IACjD;;IAEA;;IAEAA,SAAS,GAAGpB,IAAI,CAACC,KAAK,CAACmB,SAAS,GAAGL,QAAQ,CAAC,GAAGA,QAAQ;IACvD1C,GAAG,GAAG9H,KAAK,CAAC6K,SAAS,EAAE,IAAI,CAACvI,OAAO,EAAE,IAAI,CAACF,OAAO,CAAC;IAElD4I,GAAG,GAAG,IAAI,CAACnD,YAAY,CAACC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAElB,gBAAgB,EAAEb,MAAM,EAAE,CAAC,CAAC;IAEzE8E,GAAG,GAAG,CAAC;IACP,IAAIjL,KAAK,EAAE;MACT,OAAO,CAACgI,GAAG,IAAI0C,QAAQ,KAAKjC,MAAM,IAAIwC,GAAG,EAAE,GAAGzJ,QAAQ,EAAE;QACtD0J,GAAG,GAAG,IAAI,CAACnD,YAAY,CACrBC,GAAG,EACHC,MAAM,EACNC,MAAM,EACNlB,gBAAgB,EAChBb,MAAM,EACN+E,GACF,CAAC;MACH;IACF,CAAC,MAAM;MACL,OAAOlD,GAAG,IAAI,IAAI,CAACxF,OAAO,IAAIyI,GAAG,EAAE,GAAGzJ,QAAQ,EAAE;QAC9CwG,GAAG,GAAG2B,IAAI,CAAC0B,GAAG,CAACrD,GAAG,GAAG0C,QAAQ,EAAE,IAAI,CAAClI,OAAO,CAAC;QAC5C0I,GAAG,GAAG,IAAI,CAACnD,YAAY,CACrBC,GAAG,EACHC,MAAM,EACNC,MAAM,EACNlB,gBAAgB,EAChBb,MAAM,EACN+E,GACF,CAAC;MACH;IACF;IAEAlD,GAAG,GAAG9H,KAAK,CAAC6K,SAAS,EAAE,IAAI,CAACvI,OAAO,EAAE,IAAI,CAACF,OAAO,CAAC;IAElD2I,GAAG,GAAG,CAAC;IACP,IAAIjL,KAAK,EAAE;MACT,OAAO,CAACgI,GAAG,IAAI0C,QAAQ,KAAKhC,MAAM,IAAIuC,GAAG,EAAE,GAAGzJ,QAAQ,EAAE;QACtD0J,GAAG,GAAG,IAAI,CAACnD,YAAY,CACrBC,GAAG,EACHC,MAAM,EACNC,MAAM,EACNlB,gBAAgB,EAChBb,MAAM,EACN+E,GACF,CAAC;MACH;IACF,CAAC,MAAM;MACL,OAAOlD,GAAG,IAAI,IAAI,CAAC1F,OAAO,IAAI2I,GAAG,EAAE,GAAGzJ,QAAQ,EAAE;QAC9CwG,GAAG,GAAG2B,IAAI,CAAC2B,GAAG,CAACtD,GAAG,GAAG0C,QAAQ,EAAE,IAAI,CAACpI,OAAO,CAAC;QAC5C4I,GAAG,GAAG,IAAI,CAACnD,YAAY,CACrBC,GAAG,EACHC,MAAM,EACNC,MAAM,EACNlB,gBAAgB,EAChBb,MAAM,EACN+E,GACF,CAAC;MACH;IACF;IAEA,IAAI,CAAClI,UAAU,CAACqE,MAAM,GAAG6D,GAAG;IAC5B,IAAI,IAAI,CAACxH,gBAAgB,EAAE;MACzB,IAAI,CAACA,gBAAgB,CAAC2D,MAAM,GAAG6D,GAAG;IACpC;;IAEA;;IAEAF,SAAS,GAAGrB,IAAI,CAACC,KAAK,CAACoB,SAAS,GAAGN,QAAQ,CAAC,GAAGA,QAAQ;IACvDlC,GAAG,GAAGtI,KAAK,CAAC8K,SAAS,EAAE,IAAI,CAACzI,OAAO,EAAE,IAAI,CAACH,OAAO,CAAC;IAElD8I,GAAG,GAAG,IAAI,CAAC3C,YAAY,CAACC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAE1B,gBAAgB,EAAEb,MAAM,EAAE,CAAC,CAAC;IAEzE8E,GAAG,GAAG,CAAC;IACP,OAAOzC,GAAG,IAAI,IAAI,CAACjG,OAAO,IAAI0I,GAAG,EAAE,GAAGzJ,QAAQ,EAAE;MAC9CgH,GAAG,GAAGmB,IAAI,CAAC0B,GAAG,CAAC7C,GAAG,GAAGkC,QAAQ,EAAE,IAAI,CAACnI,OAAO,CAAC;MAC5C2I,GAAG,GAAG,IAAI,CAAC3C,YAAY,CACrBC,GAAG,EACHC,MAAM,EACNC,MAAM,EACN1B,gBAAgB,EAChBb,MAAM,EACN+E,GACF,CAAC;IACH;IAEA1C,GAAG,GAAGtI,KAAK,CAAC8K,SAAS,EAAE,IAAI,CAACzI,OAAO,EAAE,IAAI,CAACH,OAAO,CAAC;IAElD6I,GAAG,GAAG,CAAC;IACP,OAAOzC,GAAG,IAAI,IAAI,CAACpG,OAAO,IAAI6I,GAAG,EAAE,GAAGzJ,QAAQ,EAAE;MAC9CgH,GAAG,GAAGmB,IAAI,CAAC2B,GAAG,CAAC9C,GAAG,GAAGkC,QAAQ,EAAE,IAAI,CAACtI,OAAO,CAAC;MAC5C8I,GAAG,GAAG,IAAI,CAAC3C,YAAY,CACrBC,GAAG,EACHC,MAAM,EACNC,MAAM,EACN1B,gBAAgB,EAChBb,MAAM,EACN+E,GACF,CAAC;IACH;IAEA,IAAI,CAACjI,UAAU,CAACoE,MAAM,GAAG6D,GAAG;IAC5B,IAAI,IAAI,CAACvH,gBAAgB,EAAE;MACzB,IAAI,CAACA,gBAAgB,CAAC0D,MAAM,GAAG6D,GAAG;IACpC;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEP,YAAYA,CAACvE,UAAU,EAAE;IACvB,MAAM2E,SAAS,GAAG,IAAI,CAAC1H,uBAAuB,CAAC,CAAC,CAAC;IACjD,MAAM2H,SAAS,GAAG,IAAI,CAAC3H,uBAAuB,CAAC,CAAC,CAAC;IACjD,IAAIqH,QAAQ,GAAG,CAAC,CAAC;IACjB,MAAMa,MAAM,GAAG5B,IAAI,CAAC6B,GAAG,CAAC,IAAI,CAAC3I,WAAW,GAAGuD,UAAU,EAAE,CAAC,CAAC;IACzD;IACA,MAAMqF,EAAE,GAAG,EAAE;IACb;IACA,MAAMC,EAAE,GAAG,EAAE;IACb,KAAK,IAAI/D,CAAC,GAAG,CAAC,EAAEgE,EAAE,GAAG,IAAI,CAACvG,UAAU,CAACiC,MAAM,EAAEM,CAAC,GAAGgE,EAAE,EAAE,EAAEhE,CAAC,EAAE;MACxD,MAAMiE,KAAK,GAAG1L,KAAK,CAAC,IAAI,CAACkF,UAAU,CAACuC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;MAClD;MACA,MAAMkE,UAAU,GAAG3L,KAAK,CAAC8K,SAAS,EAAE,CAAC,EAAE,GAAGY,KAAK,EAAE,EAAE,GAAGA,KAAK,CAAC;MAC5DH,EAAE,CAAC,CAAC,CAAC,GAAGV,SAAS,GAAGa,KAAK;MACzBH,EAAE,CAAC,CAAC,CAAC,GAAGI,UAAU,GAAGD,KAAK;MAC1BF,EAAE,CAAC,CAAC,CAAC,GAAGX,SAAS,GAAGa,KAAK;MACzBF,EAAE,CAAC,CAAC,CAAC,GAAGG,UAAU,GAAGD,KAAK;MAC1B,IAAI,CAACzI,oBAAoB,CAACsI,EAAE,EAAEA,EAAE,CAAC;MACjC,IAAI,CAACtI,oBAAoB,CAACuI,EAAE,EAAEA,EAAE,CAAC;MACjC,MAAMI,IAAI,GAAGnC,IAAI,CAAC6B,GAAG,CAACE,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG9B,IAAI,CAAC6B,GAAG,CAACE,EAAE,CAAC,CAAC,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;MACpE,IAAIK,IAAI,IAAIP,MAAM,EAAE;QAClB;MACF;MACAb,QAAQ,GAAG,IAAI,CAACtF,UAAU,CAACuC,CAAC,CAAC;IAC/B;IACA,OAAO+C,QAAQ;EACjB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACErC,YAAYA,CAACL,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAElB,gBAAgB,EAAEmB,KAAK,EAAE;IACzD,MAAM4D,eAAe,GAAGrL,QAAQ,CAC9BsH,GAAG,EACHC,MAAM,EACNC,MAAM,EACN,IAAI,CAAC/F,WAAW,EAChB6E,gBACF,CAAC;IACD,IAAIoB,UAAU,GAAG,IAAI,CAACpF,UAAU,CAACmF,KAAK,CAAC;IACvC,IAAI,CAACC,UAAU,EAAE;MACfA,UAAU,GAAG,IAAIrJ,UAAU,CAACgN,eAAe,EAAE,IAAI,CAAC;MAClD,IAAI,CAAC/I,UAAU,CAACmF,KAAK,CAAC,GAAGC,UAAU;IACrC,CAAC,MAAM;MACLA,UAAU,CAAC4D,kBAAkB,CAAC,IAAI,EAAED,eAAe,CAAC;MACpD3D,UAAU,CAAC6D,OAAO,CAAC,CAAC;IACtB;IACA,OAAO7D,UAAU;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEgC,iBAAiBA,CAAChC,UAAU,EAAEjC,MAAM,EAAEgC,KAAK,EAAE;IAC3C,MAAM4D,eAAe,GAAG3D,UAAU,CAAC8D,kBAAkB,CAAC,CAAC;IACvD,IAAIC,MAAM,GAAG,CAAC;IACd,IAAIC,GAAG,GAAGL,eAAe,CAAC1E,MAAM,GAAG,CAAC;IACpC,IAAI0E,eAAe,CAACI,MAAM,CAAC,GAAGJ,eAAe,CAACK,GAAG,CAAC,EAAE;MAClDD,MAAM,GAAGC,GAAG;MACZA,GAAG,GAAG,CAAC;IACT;IACA,MAAMC,aAAa,GAAG1C,IAAI,CAAC0B,GAAG,CAAClF,MAAM,CAAC,CAAC,CAAC,EAAE4F,eAAe,CAACI,MAAM,CAAC,CAAC;IAClE,MAAMG,UAAU,GAAG3C,IAAI,CAAC2B,GAAG,CAACnF,MAAM,CAAC,CAAC,CAAC,EAAE4F,eAAe,CAACK,GAAG,CAAC,CAAC;IAC5D,MAAM5D,GAAG,GAAGtI,KAAK,CACfiG,MAAM,CAAC,CAAC,CAAC,GAAGwD,IAAI,CAACI,GAAG,CAAC5D,MAAM,CAAC,CAAC,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAACpC,iBAAiB,EACpEsI,aAAa,EACbC,UACF,CAAC;IACD,MAAMC,WAAW,GACfR,eAAe,CAACI,MAAM,GAAG,CAAC,CAAC,GAC1B,CAACJ,eAAe,CAACK,GAAG,GAAG,CAAC,CAAC,GAAGL,eAAe,CAACI,MAAM,GAAG,CAAC,CAAC,KACrD3D,GAAG,GAAGuD,eAAe,CAACI,MAAM,CAAC,CAAC,IAC9BJ,eAAe,CAACK,GAAG,CAAC,GAAGL,eAAe,CAACI,MAAM,CAAC,CAAC;IACpD,MAAMK,UAAU,GAAG,CAACD,WAAW,EAAE/D,GAAG,CAAC;IACrC,MAAMiE,KAAK,GAAG,IAAI,CAAC/I,gBAAgB,CAACyE,KAAK,CAAC,CAACG,IAAI;IAC/CmE,KAAK,CAACC,cAAc,CAACF,UAAU,CAAC;IAChC,OAAOC,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;EACEE,YAAYA,CAAA,EAAG;IACb,OAAO,IAAI,CAAC3J,UAAU;EACxB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE2F,YAAYA,CAACH,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAE1B,gBAAgB,EAAEmB,KAAK,EAAE;IACzD,MAAM4D,eAAe,GAAGpL,QAAQ,CAC9B6H,GAAG,EACHC,MAAM,EACNC,MAAM,EACN,IAAI,CAACvG,WAAW,EAChB6E,gBACF,CAAC;IACD,IAAIoB,UAAU,GAAG,IAAI,CAACnF,UAAU,CAACkF,KAAK,CAAC;IACvC,IAAI,CAACC,UAAU,EAAE;MACfA,UAAU,GAAG,IAAIrJ,UAAU,CAACgN,eAAe,EAAE,IAAI,CAAC;IACpD,CAAC,MAAM;MACL3D,UAAU,CAAC4D,kBAAkB,CAAC,IAAI,EAAED,eAAe,CAAC;MACpD3D,UAAU,CAAC6D,OAAO,CAAC,CAAC;IACtB;IACA,OAAO7D,UAAU;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEqC,iBAAiBA,CAACrC,UAAU,EAAEjC,MAAM,EAAEgC,KAAK,EAAE;IAC3C,MAAM4D,eAAe,GAAG3D,UAAU,CAAC8D,kBAAkB,CAAC,CAAC;IACvD,IAAIU,IAAI,GAAG,CAAC;IACZ,IAAIC,KAAK,GAAGd,eAAe,CAAC1E,MAAM,GAAG,CAAC;IACtC,IAAI0E,eAAe,CAACa,IAAI,CAAC,GAAGb,eAAe,CAACc,KAAK,CAAC,EAAE;MAClDD,IAAI,GAAGC,KAAK;MACZA,KAAK,GAAG,CAAC;IACX;IACA,MAAMC,WAAW,GAAGnD,IAAI,CAAC0B,GAAG,CAAClF,MAAM,CAAC,CAAC,CAAC,EAAE4F,eAAe,CAACa,IAAI,CAAC,CAAC;IAC9D,MAAMG,YAAY,GAAGpD,IAAI,CAAC2B,GAAG,CAACnF,MAAM,CAAC,CAAC,CAAC,EAAE4F,eAAe,CAACc,KAAK,CAAC,CAAC;IAChE,MAAM7E,GAAG,GAAG9H,KAAK,CACfiG,MAAM,CAAC,CAAC,CAAC,GAAGwD,IAAI,CAACI,GAAG,CAAC5D,MAAM,CAAC,CAAC,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAACnC,iBAAiB,EACpE8I,WAAW,EACXC,YACF,CAAC;IACD,MAAMC,WAAW,GACfjB,eAAe,CAACa,IAAI,GAAG,CAAC,CAAC,GACxB,CAACb,eAAe,CAACc,KAAK,GAAG,CAAC,CAAC,GAAGd,eAAe,CAACa,IAAI,GAAG,CAAC,CAAC,KACrD5E,GAAG,GAAG+D,eAAe,CAACa,IAAI,CAAC,CAAC,IAC5Bb,eAAe,CAACc,KAAK,CAAC,GAAGd,eAAe,CAACa,IAAI,CAAC,CAAC;IACpD,MAAMJ,UAAU,GAAG,CAACxE,GAAG,EAAEgF,WAAW,CAAC;IACrC,MAAMP,KAAK,GAAG,IAAI,CAAC9I,gBAAgB,CAACwE,KAAK,CAAC,CAACG,IAAI;IAC/CmE,KAAK,CAACC,cAAc,CAACF,UAAU,CAAC;IAChC,OAAOC,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;EACEQ,YAAYA,CAAA,EAAG;IACb,OAAO,IAAI,CAAChK,UAAU;EACxB;;EAEA;AACF;AACA;AACA;EACEiE,qBAAqBA,CAACR,UAAU,EAAE;IAChC,MAAMwG,kBAAkB,GAAG3M,aAAa,CAAC,WAAW,CAAC;IAErD,MAAM4M,WAAW,GAAGzG,UAAU,CAAC0G,cAAc,CAAC,CAAC;IAE/C,IAAI,CAAChL,OAAO,GAAG+K,WAAW,CAAC,CAAC,CAAC;IAC7B,IAAI,CAAC7K,OAAO,GAAG6K,WAAW,CAAC,CAAC,CAAC;IAC7B,IAAI,CAAC5K,OAAO,GAAG4K,WAAW,CAAC,CAAC,CAAC;IAC7B,IAAI,CAAC3K,OAAO,GAAG2K,WAAW,CAAC,CAAC,CAAC;;IAE7B;IACA;;IAEA,MAAME,iBAAiB,GAAG7M,YAAY,CAACkG,UAAU,EAAEwG,kBAAkB,CAAC;IACtE,IAAI,IAAI,CAAC1K,OAAO,GAAG,IAAI,CAACF,OAAO,EAAE;MAC/B,IAAI,CAACc,kBAAkB,GAAGiK,iBAAiB;IAC7C,CAAC,MAAM;MACL,MAAMC,KAAK,GAAG,IAAI,CAAC9K,OAAO,GAAG,IAAI,CAACF,OAAO,GAAG,CAAC;MAC7C,IAAI,CAACA,OAAO,IAAI,GAAG;MACnB,IAAI,CAACc,kBAAkB,GAAG,UAAUmK,WAAW,EAAEC,MAAM,EAAEC,SAAS,EAAE;QAClEA,SAAS,GAAGA,SAAS,IAAI,CAAC;QAC1B,MAAMC,iBAAiB,GAAGL,iBAAiB,CACzCE,WAAW,EACXC,MAAM,EACNC,SACF,CAAC;QACD,KAAK,IAAI9F,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG8F,iBAAiB,CAACrG,MAAM,EAAEM,CAAC,GAAGC,CAAC,EAAED,CAAC,IAAI8F,SAAS,EAAE;UACnE,IAAIC,iBAAiB,CAAC/F,CAAC,CAAC,GAAG2F,KAAK,EAAE;YAChCI,iBAAiB,CAAC/F,CAAC,CAAC,IAAI,GAAG;UAC7B;QACF;QACA,OAAO+F,iBAAiB;MAC1B,CAAC;IACH;;IAEA;IACA;;IAEA,IAAI,CAACvK,oBAAoB,GAAG3C,YAAY,CAAC0M,kBAAkB,EAAExG,UAAU,CAAC;IACxE,MAAMiH,YAAY,GAAGrO,cAAc,CACjC,CAAC,IAAI,CAACkD,OAAO,EAAE,IAAI,CAACD,OAAO,EAAE,IAAI,CAACD,OAAO,EAAE,IAAI,CAACF,OAAO,CAAC,EACxD,IAAI,CAACe,oBAAoB,EACzBL,SAAS,EACT,CACF,CAAC;IAED,IAAI,CAACH,KAAK,GAAGgL,YAAY,CAAC,CAAC,CAAC;IAC5B,IAAI,CAAClL,KAAK,GAAGkL,YAAY,CAAC,CAAC,CAAC;IAC5B,IAAI,CAAC/K,KAAK,GAAG+K,YAAY,CAAC,CAAC,CAAC;IAC5B,IAAI,CAACjL,KAAK,GAAGiL,YAAY,CAAC,CAAC,CAAC;;IAE5B;IACA;;IAEA,IAAI,CAACrK,WAAW,GAAG,IAAI,CAACH,oBAAoB,CAAC,CAAC,IAAI,CAACX,OAAO,EAAE,IAAI,CAACD,OAAO,CAAC,CAAC;IAC1E,IAAI,CAACgB,YAAY,GAAG,IAAI,CAACJ,oBAAoB,CAAC,CAAC,IAAI,CAACb,OAAO,EAAE,IAAI,CAACC,OAAO,CAAC,CAAC;IAC3E,IAAI,CAACiB,QAAQ,GAAG,IAAI,CAACL,oBAAoB,CAAC,CAAC,IAAI,CAACX,OAAO,EAAE,IAAI,CAACJ,OAAO,CAAC,CAAC;IACvE,IAAI,CAACqB,SAAS,GAAG,IAAI,CAACN,oBAAoB,CAAC,CAAC,IAAI,CAACb,OAAO,EAAE,IAAI,CAACF,OAAO,CAAC,CAAC;;IAExE;IACA;IACA;;IAEA,IAAI,CAACiB,uBAAuB,GAAG,IAAI,CAACD,kBAAkB,CACpDzD,SAAS,CAAC+G,UAAU,CAACG,SAAS,CAAC,CAAC,CAClC,CAAC;IACD,IAAIiE,KAAK,CAAC,IAAI,CAACzH,uBAAuB,CAAC,CAAC,CAAC,CAAC,EAAE;MAC1C,IAAI,CAACA,uBAAuB,CAAC,CAAC,CAAC,GAC7BsG,IAAI,CAACI,GAAG,CAAC,IAAI,CAAC3H,OAAO,CAAC,IAAIuH,IAAI,CAACI,GAAG,CAAC,IAAI,CAACxH,OAAO,CAAC,GAC5C,IAAI,CAACH,OAAO,GACZ,IAAI,CAACG,OAAO;IACpB;IAEA,IAAI,CAACJ,WAAW,GAAGuE,UAAU;EAC/B;AACF;AAEA,eAAe3F,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}