{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/format/GeoJSON\n */\n\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { get as getProjection } from '../proj.js';\nimport { isEmpty } from '../obj.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */\nclass GeoJSON extends JSONFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super();\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection(options.dataProjection ? options.dataProjection : 'EPSG:4326');\n    if (options.featureProjection) {\n      /**\n       * @type {import(\"../proj/Projection.js\").default}\n       */\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n    this.extractGeometryName_ = options.extractGeometryName;\n    this.supportedMediaTypes = ['application/geo+json', 'application/vnd.geo+json'];\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromObject(object, options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    let geoJSONFeature = null;\n    if (object['type'] === 'Feature') {\n      geoJSONFeature = /** @type {GeoJSONFeature} */object;\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry': /** @type {GeoJSONGeometry} */object,\n        'properties': null\n      };\n    }\n    const geometry = readGeometry(geoJSONFeature['geometry'], options);\n    const feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (this.extractGeometryName_ && 'geometry_name' in geoJSONFeature !== undefined) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n    feature.setGeometry(geometry);\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties'], true);\n    }\n    return feature;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    const geoJSONObject = /** @type {GeoJSONObject} */object;\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    let features = null;\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */\n      object;\n      features = [];\n      const geoJSONFeatures = geoJSONFeatureCollection['features'];\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(geoJSONFeatures[i], options));\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, options)];\n    }\n    return features;\n  }\n\n  /**\n   * @param {GeoJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, options) {\n    return readGeometry(object, options);\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    const crs = object['crs'];\n    let projection;\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else if (crs['type'] === 'EPSG') {\n        projection = getProjection('EPSG:' + crs['properties']['code']);\n      } else {\n        throw new Error('Unknown SRS type');\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n    return (/** @type {import(\"../proj/Projection.js\").default} */projection\n    );\n  }\n\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeature} Object.\n   * @api\n   */\n  writeFeatureObject(feature, options) {\n    options = this.adaptOptions(options);\n\n    /** @type {GeoJSONFeature} */\n    const object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null\n    };\n    const id = feature.getId();\n    if (id !== undefined) {\n      object.id = id;\n    }\n    if (!feature.hasProperties()) {\n      return object;\n    }\n    const properties = feature.getProperties();\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, options);\n      delete properties[feature.getGeometryName()];\n    }\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n    return object;\n  }\n\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @api\n   */\n  writeFeaturesObject(features, options) {\n    options = this.adaptOptions(options);\n    const objects = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], options));\n    }\n    return {\n      type: 'FeatureCollection',\n      features: objects\n    };\n  }\n\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @api\n   */\n  writeGeometryObject(geometry, options) {\n    return writeGeometry(geometry, this.adaptOptions(options));\n  }\n}\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, options) {\n  if (!object) {\n    return null;\n  }\n\n  /**\n   * @type {import(\"../geom/Geometry.js\").default}\n   */\n  let geometry;\n  switch (object['type']) {\n    case 'Point':\n      {\n        geometry = readPointGeometry( /** @type {GeoJSONPoint} */object);\n        break;\n      }\n    case 'LineString':\n      {\n        geometry = readLineStringGeometry( /** @type {GeoJSONLineString} */object);\n        break;\n      }\n    case 'Polygon':\n      {\n        geometry = readPolygonGeometry( /** @type {GeoJSONPolygon} */object);\n        break;\n      }\n    case 'MultiPoint':\n      {\n        geometry = readMultiPointGeometry( /** @type {GeoJSONMultiPoint} */object);\n        break;\n      }\n    case 'MultiLineString':\n      {\n        geometry = readMultiLineStringGeometry( /** @type {GeoJSONMultiLineString} */object);\n        break;\n      }\n    case 'MultiPolygon':\n      {\n        geometry = readMultiPolygonGeometry( /** @type {GeoJSONMultiPolygon} */object);\n        break;\n      }\n    case 'GeometryCollection':\n      {\n        geometry = readGeometryCollectionGeometry( /** @type {GeoJSONGeometryCollection} */object);\n        break;\n      }\n    default:\n      {\n        throw new Error('Unsupported GeoJSON type: ' + object['type']);\n      }\n  }\n  return transformGeometryWithOptions(geometry, false, options);\n}\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, options) {\n  const geometries = object['geometries'].map(\n  /**\n   * @param {GeoJSONGeometry} geometry Geometry.\n   * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   */\n  function (geometry) {\n    return readGeometry(geometry, options);\n  });\n  return new GeometryCollection(geometries);\n}\n\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\nfunction readPointGeometry(object) {\n  return new Point(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n  return new LineString(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  return new Polygon(object['coordinates']);\n}\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, options) {\n  geometry = transformGeometryWithOptions(geometry, true, options);\n  const type = geometry.getType();\n\n  /** @type {GeoJSONGeometry} */\n  let geoJSON;\n  switch (type) {\n    case 'Point':\n      {\n        geoJSON = writePointGeometry( /** @type {Point} */geometry, options);\n        break;\n      }\n    case 'LineString':\n      {\n        geoJSON = writeLineStringGeometry( /** @type {LineString} */geometry, options);\n        break;\n      }\n    case 'Polygon':\n      {\n        geoJSON = writePolygonGeometry( /** @type {Polygon} */geometry, options);\n        break;\n      }\n    case 'MultiPoint':\n      {\n        geoJSON = writeMultiPointGeometry( /** @type {MultiPoint} */geometry, options);\n        break;\n      }\n    case 'MultiLineString':\n      {\n        geoJSON = writeMultiLineStringGeometry( /** @type {MultiLineString} */geometry, options);\n        break;\n      }\n    case 'MultiPolygon':\n      {\n        geoJSON = writeMultiPolygonGeometry( /** @type {MultiPolygon} */geometry, options);\n        break;\n      }\n    case 'GeometryCollection':\n      {\n        geoJSON = writeGeometryCollectionGeometry( /** @type {GeometryCollection} */geometry, options);\n        break;\n      }\n    case 'Circle':\n      {\n        geoJSON = {\n          type: 'GeometryCollection',\n          geometries: []\n        };\n        break;\n      }\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n  return geoJSON;\n}\n\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, options) {\n  options = Object.assign({}, options);\n  delete options.featureProjection;\n  const geometries = geometry.getGeometriesArray().map(function (geometry) {\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries\n  };\n}\n\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, options) {\n  let right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, options) {\n  let right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\nexport default GeoJSON;","map":{"version":3,"names":["Feature","GeometryCollection","JSONFeature","LineString","MultiLineString","MultiPoint","MultiPolygon","Point","Polygon","get","getProjection","isEmpty","transformGeometryWithOptions","GeoJSON","constructor","options","dataProjection","featureProjection","defaultFeatureProjection","geometryName_","geometryName","extractGeometryName_","extractGeometryName","supportedMediaTypes","readFeatureFromObject","object","geoJSONFeature","geometry","readGeometry","feature","setGeometryName","undefined","setGeometry","setId","setProperties","readFeaturesFromObject","geoJSONObject","features","geoJSONFeatureCollection","geoJSONFeatures","i","ii","length","push","readGeometryFromObject","readProjectionFromObject","crs","projection","Error","writeFeatureObject","adaptOptions","properties","id","getId","hasProperties","getProperties","getGeometry","writeGeometry","getGeometryName","writeFeaturesObject","objects","type","writeGeometryObject","readPointGeometry","readLineStringGeometry","readPolygonGeometry","readMultiPointGeometry","readMultiLineStringGeometry","readMultiPolygonGeometry","readGeometryCollectionGeometry","geometries","map","getType","geoJSON","writePointGeometry","writeLineStringGeometry","writePolygonGeometry","writeMultiPointGeometry","writeMultiLineStringGeometry","writeMultiPolygonGeometry","writeGeometryCollectionGeometry","Object","assign","getGeometriesArray","coordinates","getCoordinates","right","rightHanded"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/format/GeoJSON.js"],"sourcesContent":["/**\n * @module ol/format/GeoJSON\n */\n\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {get as getProjection} from '../proj.js';\nimport {isEmpty} from '../obj.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */\nclass GeoJSON extends JSONFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super();\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection(\n      options.dataProjection ? options.dataProjection : 'EPSG:4326'\n    );\n\n    if (options.featureProjection) {\n      /**\n       * @type {import(\"../proj/Projection.js\").default}\n       */\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n    this.extractGeometryName_ = options.extractGeometryName;\n\n    this.supportedMediaTypes = [\n      'application/geo+json',\n      'application/vnd.geo+json',\n    ];\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromObject(object, options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    let geoJSONFeature = null;\n    if (object['type'] === 'Feature') {\n      geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry': /** @type {GeoJSONGeometry} */ (object),\n        'properties': null,\n      };\n    }\n\n    const geometry = readGeometry(geoJSONFeature['geometry'], options);\n    const feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (\n      this.extractGeometryName_ &&\n      'geometry_name' in geoJSONFeature !== undefined\n    ) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n    feature.setGeometry(geometry);\n\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties'], true);\n    }\n    return feature;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    let features = null;\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (\n        object\n      );\n      features = [];\n      const geoJSONFeatures = geoJSONFeatureCollection['features'];\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(geoJSONFeatures[i], options));\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, options)];\n    }\n    return features;\n  }\n\n  /**\n   * @param {GeoJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, options) {\n    return readGeometry(object, options);\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    const crs = object['crs'];\n    let projection;\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else if (crs['type'] === 'EPSG') {\n        projection = getProjection('EPSG:' + crs['properties']['code']);\n      } else {\n        throw new Error('Unknown SRS type');\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n    return /** @type {import(\"../proj/Projection.js\").default} */ (projection);\n  }\n\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeature} Object.\n   * @api\n   */\n  writeFeatureObject(feature, options) {\n    options = this.adaptOptions(options);\n\n    /** @type {GeoJSONFeature} */\n    const object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null,\n    };\n\n    const id = feature.getId();\n    if (id !== undefined) {\n      object.id = id;\n    }\n\n    if (!feature.hasProperties()) {\n      return object;\n    }\n\n    const properties = feature.getProperties();\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, options);\n\n      delete properties[feature.getGeometryName()];\n    }\n\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n\n    return object;\n  }\n\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @api\n   */\n  writeFeaturesObject(features, options) {\n    options = this.adaptOptions(options);\n    const objects = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], options));\n    }\n    return {\n      type: 'FeatureCollection',\n      features: objects,\n    };\n  }\n\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @api\n   */\n  writeGeometryObject(geometry, options) {\n    return writeGeometry(geometry, this.adaptOptions(options));\n  }\n}\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, options) {\n  if (!object) {\n    return null;\n  }\n\n  /**\n   * @type {import(\"../geom/Geometry.js\").default}\n   */\n  let geometry;\n  switch (object['type']) {\n    case 'Point': {\n      geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));\n      break;\n    }\n    case 'LineString': {\n      geometry = readLineStringGeometry(\n        /** @type {GeoJSONLineString} */ (object)\n      );\n      break;\n    }\n    case 'Polygon': {\n      geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));\n      break;\n    }\n    case 'MultiPoint': {\n      geometry = readMultiPointGeometry(\n        /** @type {GeoJSONMultiPoint} */ (object)\n      );\n      break;\n    }\n    case 'MultiLineString': {\n      geometry = readMultiLineStringGeometry(\n        /** @type {GeoJSONMultiLineString} */ (object)\n      );\n      break;\n    }\n    case 'MultiPolygon': {\n      geometry = readMultiPolygonGeometry(\n        /** @type {GeoJSONMultiPolygon} */ (object)\n      );\n      break;\n    }\n    case 'GeometryCollection': {\n      geometry = readGeometryCollectionGeometry(\n        /** @type {GeoJSONGeometryCollection} */ (object)\n      );\n      break;\n    }\n    default: {\n      throw new Error('Unsupported GeoJSON type: ' + object['type']);\n    }\n  }\n  return transformGeometryWithOptions(geometry, false, options);\n}\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, options) {\n  const geometries = object['geometries'].map(\n    /**\n     * @param {GeoJSONGeometry} geometry Geometry.\n     * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     */\n    function (geometry) {\n      return readGeometry(geometry, options);\n    }\n  );\n  return new GeometryCollection(geometries);\n}\n\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\nfunction readPointGeometry(object) {\n  return new Point(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n  return new LineString(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  return new Polygon(object['coordinates']);\n}\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, options) {\n  geometry = transformGeometryWithOptions(geometry, true, options);\n  const type = geometry.getType();\n\n  /** @type {GeoJSONGeometry} */\n  let geoJSON;\n  switch (type) {\n    case 'Point': {\n      geoJSON = writePointGeometry(/** @type {Point} */ (geometry), options);\n      break;\n    }\n    case 'LineString': {\n      geoJSON = writeLineStringGeometry(\n        /** @type {LineString} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'Polygon': {\n      geoJSON = writePolygonGeometry(\n        /** @type {Polygon} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'MultiPoint': {\n      geoJSON = writeMultiPointGeometry(\n        /** @type {MultiPoint} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'MultiLineString': {\n      geoJSON = writeMultiLineStringGeometry(\n        /** @type {MultiLineString} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'MultiPolygon': {\n      geoJSON = writeMultiPolygonGeometry(\n        /** @type {MultiPolygon} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'GeometryCollection': {\n      geoJSON = writeGeometryCollectionGeometry(\n        /** @type {GeometryCollection} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'Circle': {\n      geoJSON = {\n        type: 'GeometryCollection',\n        geometries: [],\n      };\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return geoJSON;\n}\n\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, options) {\n  options = Object.assign({}, options);\n  delete options.featureProjection;\n  const geometries = geometry.getGeometriesArray().map(function (geometry) {\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries,\n  };\n}\n\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, options) {\n  let right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right),\n  };\n}\n\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, options) {\n  let right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right),\n  };\n}\n\nexport default GeoJSON;\n"],"mappings":";AAAA;AACA;AACA;;AAEA,OAAOA,OAAO,MAAM,eAAe;AACnC,OAAOC,kBAAkB,MAAM,+BAA+B;AAC9D,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,eAAe,MAAM,4BAA4B;AACxD,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,SAAQC,GAAG,IAAIC,aAAa,QAAO,YAAY;AAC/C,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,4BAA4B,QAAO,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,SAASX,WAAW,CAAC;EAChC;AACF;AACA;EACEY,WAAWA,CAACC,OAAO,EAAE;IACnBA,OAAO,GAAGA,OAAO,GAAGA,OAAO,GAAG,CAAC,CAAC;IAEhC,KAAK,CAAC,CAAC;;IAEP;AACJ;AACA;IACI,IAAI,CAACC,cAAc,GAAGN,aAAa,CACjCK,OAAO,CAACC,cAAc,GAAGD,OAAO,CAACC,cAAc,GAAG,WACpD,CAAC;IAED,IAAID,OAAO,CAACE,iBAAiB,EAAE;MAC7B;AACN;AACA;MACM,IAAI,CAACC,wBAAwB,GAAGR,aAAa,CAACK,OAAO,CAACE,iBAAiB,CAAC;IAC1E;;IAEA;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACE,aAAa,GAAGJ,OAAO,CAACK,YAAY;;IAEzC;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,oBAAoB,GAAGN,OAAO,CAACO,mBAAmB;IAEvD,IAAI,CAACC,mBAAmB,GAAG,CACzB,sBAAsB,EACtB,0BAA0B,CAC3B;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,qBAAqBA,CAACC,MAAM,EAAEV,OAAO,EAAE;IACrC;AACJ;AACA;IACI,IAAIW,cAAc,GAAG,IAAI;IACzB,IAAID,MAAM,CAAC,MAAM,CAAC,KAAK,SAAS,EAAE;MAChCC,cAAc,GAAG,6BAA+BD,MAAO;IACzD,CAAC,MAAM;MACLC,cAAc,GAAG;QACf,MAAM,EAAE,SAAS;QACjB,UAAU,EAAE,8BAAgCD,MAAO;QACnD,YAAY,EAAE;MAChB,CAAC;IACH;IAEA,MAAME,QAAQ,GAAGC,YAAY,CAACF,cAAc,CAAC,UAAU,CAAC,EAAEX,OAAO,CAAC;IAClE,MAAMc,OAAO,GAAG,IAAI7B,OAAO,CAAC,CAAC;IAC7B,IAAI,IAAI,CAACmB,aAAa,EAAE;MACtBU,OAAO,CAACC,eAAe,CAAC,IAAI,CAACX,aAAa,CAAC;IAC7C,CAAC,MAAM,IACL,IAAI,CAACE,oBAAoB,IACzB,eAAe,IAAIK,cAAc,KAAKK,SAAS,EAC/C;MACAF,OAAO,CAACC,eAAe,CAACJ,cAAc,CAAC,eAAe,CAAC,CAAC;IAC1D;IACAG,OAAO,CAACG,WAAW,CAACL,QAAQ,CAAC;IAE7B,IAAI,IAAI,IAAID,cAAc,EAAE;MAC1BG,OAAO,CAACI,KAAK,CAACP,cAAc,CAAC,IAAI,CAAC,CAAC;IACrC;IAEA,IAAIA,cAAc,CAAC,YAAY,CAAC,EAAE;MAChCG,OAAO,CAACK,aAAa,CAACR,cAAc,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC;IAC3D;IACA,OAAOG,OAAO;EAChB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEM,sBAAsBA,CAACV,MAAM,EAAEV,OAAO,EAAE;IACtC,MAAMqB,aAAa,GAAG,4BAA8BX,MAAO;IAC3D;IACA,IAAIY,QAAQ,GAAG,IAAI;IACnB,IAAID,aAAa,CAAC,MAAM,CAAC,KAAK,mBAAmB,EAAE;MACjD,MAAME,wBAAwB,GAAG;MAC/Bb,MACD;MACDY,QAAQ,GAAG,EAAE;MACb,MAAME,eAAe,GAAGD,wBAAwB,CAAC,UAAU,CAAC;MAC5D,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGF,eAAe,CAACG,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;QACxDH,QAAQ,CAACM,IAAI,CAAC,IAAI,CAACnB,qBAAqB,CAACe,eAAe,CAACC,CAAC,CAAC,EAAEzB,OAAO,CAAC,CAAC;MACxE;IACF,CAAC,MAAM;MACLsB,QAAQ,GAAG,CAAC,IAAI,CAACb,qBAAqB,CAACC,MAAM,EAAEV,OAAO,CAAC,CAAC;IAC1D;IACA,OAAOsB,QAAQ;EACjB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEO,sBAAsBA,CAACnB,MAAM,EAAEV,OAAO,EAAE;IACtC,OAAOa,YAAY,CAACH,MAAM,EAAEV,OAAO,CAAC;EACtC;;EAEA;AACF;AACA;AACA;AACA;EACE8B,wBAAwBA,CAACpB,MAAM,EAAE;IAC/B,MAAMqB,GAAG,GAAGrB,MAAM,CAAC,KAAK,CAAC;IACzB,IAAIsB,UAAU;IACd,IAAID,GAAG,EAAE;MACP,IAAIA,GAAG,CAAC,MAAM,CAAC,IAAI,MAAM,EAAE;QACzBC,UAAU,GAAGrC,aAAa,CAACoC,GAAG,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,CAAC;MACvD,CAAC,MAAM,IAAIA,GAAG,CAAC,MAAM,CAAC,KAAK,MAAM,EAAE;QACjCC,UAAU,GAAGrC,aAAa,CAAC,OAAO,GAAGoC,GAAG,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,CAAC;MACjE,CAAC,MAAM;QACL,MAAM,IAAIE,KAAK,CAAC,kBAAkB,CAAC;MACrC;IACF,CAAC,MAAM;MACLD,UAAU,GAAG,IAAI,CAAC/B,cAAc;IAClC;IACA,OAAO,uDAAwD+B;IAAU;EAC3E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,kBAAkBA,CAACpB,OAAO,EAAEd,OAAO,EAAE;IACnCA,OAAO,GAAG,IAAI,CAACmC,YAAY,CAACnC,OAAO,CAAC;;IAEpC;IACA,MAAMU,MAAM,GAAG;MACb,MAAM,EAAE,SAAS;MACjBE,QAAQ,EAAE,IAAI;MACdwB,UAAU,EAAE;IACd,CAAC;IAED,MAAMC,EAAE,GAAGvB,OAAO,CAACwB,KAAK,CAAC,CAAC;IAC1B,IAAID,EAAE,KAAKrB,SAAS,EAAE;MACpBN,MAAM,CAAC2B,EAAE,GAAGA,EAAE;IAChB;IAEA,IAAI,CAACvB,OAAO,CAACyB,aAAa,CAAC,CAAC,EAAE;MAC5B,OAAO7B,MAAM;IACf;IAEA,MAAM0B,UAAU,GAAGtB,OAAO,CAAC0B,aAAa,CAAC,CAAC;IAC1C,MAAM5B,QAAQ,GAAGE,OAAO,CAAC2B,WAAW,CAAC,CAAC;IACtC,IAAI7B,QAAQ,EAAE;MACZF,MAAM,CAACE,QAAQ,GAAG8B,aAAa,CAAC9B,QAAQ,EAAEZ,OAAO,CAAC;MAElD,OAAOoC,UAAU,CAACtB,OAAO,CAAC6B,eAAe,CAAC,CAAC,CAAC;IAC9C;IAEA,IAAI,CAAC/C,OAAO,CAACwC,UAAU,CAAC,EAAE;MACxB1B,MAAM,CAAC0B,UAAU,GAAGA,UAAU;IAChC;IAEA,OAAO1B,MAAM;EACf;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEkC,mBAAmBA,CAACtB,QAAQ,EAAEtB,OAAO,EAAE;IACrCA,OAAO,GAAG,IAAI,CAACmC,YAAY,CAACnC,OAAO,CAAC;IACpC,MAAM6C,OAAO,GAAG,EAAE;IAClB,KAAK,IAAIpB,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGJ,QAAQ,CAACK,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;MACjDoB,OAAO,CAACjB,IAAI,CAAC,IAAI,CAACM,kBAAkB,CAACZ,QAAQ,CAACG,CAAC,CAAC,EAAEzB,OAAO,CAAC,CAAC;IAC7D;IACA,OAAO;MACL8C,IAAI,EAAE,mBAAmB;MACzBxB,QAAQ,EAAEuB;IACZ,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,mBAAmBA,CAACnC,QAAQ,EAAEZ,OAAO,EAAE;IACrC,OAAO0C,aAAa,CAAC9B,QAAQ,EAAE,IAAI,CAACuB,YAAY,CAACnC,OAAO,CAAC,CAAC;EAC5D;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASa,YAAYA,CAACH,MAAM,EAAEV,OAAO,EAAE;EACrC,IAAI,CAACU,MAAM,EAAE;IACX,OAAO,IAAI;EACb;;EAEA;AACF;AACA;EACE,IAAIE,QAAQ;EACZ,QAAQF,MAAM,CAAC,MAAM,CAAC;IACpB,KAAK,OAAO;MAAE;QACZE,QAAQ,GAAGoC,iBAAiB,EAAC,2BAA6BtC,MAAO,CAAC;QAClE;MACF;IACA,KAAK,YAAY;MAAE;QACjBE,QAAQ,GAAGqC,sBAAsB,EAC/B,gCAAkCvC,MACpC,CAAC;QACD;MACF;IACA,KAAK,SAAS;MAAE;QACdE,QAAQ,GAAGsC,mBAAmB,EAAC,6BAA+BxC,MAAO,CAAC;QACtE;MACF;IACA,KAAK,YAAY;MAAE;QACjBE,QAAQ,GAAGuC,sBAAsB,EAC/B,gCAAkCzC,MACpC,CAAC;QACD;MACF;IACA,KAAK,iBAAiB;MAAE;QACtBE,QAAQ,GAAGwC,2BAA2B,EACpC,qCAAuC1C,MACzC,CAAC;QACD;MACF;IACA,KAAK,cAAc;MAAE;QACnBE,QAAQ,GAAGyC,wBAAwB,EACjC,kCAAoC3C,MACtC,CAAC;QACD;MACF;IACA,KAAK,oBAAoB;MAAE;QACzBE,QAAQ,GAAG0C,8BAA8B,EACvC,wCAA0C5C,MAC5C,CAAC;QACD;MACF;IACA;MAAS;QACP,MAAM,IAAIuB,KAAK,CAAC,4BAA4B,GAAGvB,MAAM,CAAC,MAAM,CAAC,CAAC;MAChE;EACF;EACA,OAAOb,4BAA4B,CAACe,QAAQ,EAAE,KAAK,EAAEZ,OAAO,CAAC;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASsD,8BAA8BA,CAAC5C,MAAM,EAAEV,OAAO,EAAE;EACvD,MAAMuD,UAAU,GAAG7C,MAAM,CAAC,YAAY,CAAC,CAAC8C,GAAG;EACzC;AACJ;AACA;AACA;EACI,UAAU5C,QAAQ,EAAE;IAClB,OAAOC,YAAY,CAACD,QAAQ,EAAEZ,OAAO,CAAC;EACxC,CACF,CAAC;EACD,OAAO,IAAId,kBAAkB,CAACqE,UAAU,CAAC;AAC3C;;AAEA;AACA;AACA;AACA;AACA,SAASP,iBAAiBA,CAACtC,MAAM,EAAE;EACjC,OAAO,IAAIlB,KAAK,CAACkB,MAAM,CAAC,aAAa,CAAC,CAAC;AACzC;;AAEA;AACA;AACA;AACA;AACA,SAASuC,sBAAsBA,CAACvC,MAAM,EAAE;EACtC,OAAO,IAAItB,UAAU,CAACsB,MAAM,CAAC,aAAa,CAAC,CAAC;AAC9C;;AAEA;AACA;AACA;AACA;AACA,SAAS0C,2BAA2BA,CAAC1C,MAAM,EAAE;EAC3C,OAAO,IAAIrB,eAAe,CAACqB,MAAM,CAAC,aAAa,CAAC,CAAC;AACnD;;AAEA;AACA;AACA;AACA;AACA,SAASyC,sBAAsBA,CAACzC,MAAM,EAAE;EACtC,OAAO,IAAIpB,UAAU,CAACoB,MAAM,CAAC,aAAa,CAAC,CAAC;AAC9C;;AAEA;AACA;AACA;AACA;AACA,SAAS2C,wBAAwBA,CAAC3C,MAAM,EAAE;EACxC,OAAO,IAAInB,YAAY,CAACmB,MAAM,CAAC,aAAa,CAAC,CAAC;AAChD;;AAEA;AACA;AACA;AACA;AACA,SAASwC,mBAAmBA,CAACxC,MAAM,EAAE;EACnC,OAAO,IAAIjB,OAAO,CAACiB,MAAM,CAAC,aAAa,CAAC,CAAC;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASgC,aAAaA,CAAC9B,QAAQ,EAAEZ,OAAO,EAAE;EACxCY,QAAQ,GAAGf,4BAA4B,CAACe,QAAQ,EAAE,IAAI,EAAEZ,OAAO,CAAC;EAChE,MAAM8C,IAAI,GAAGlC,QAAQ,CAAC6C,OAAO,CAAC,CAAC;;EAE/B;EACA,IAAIC,OAAO;EACX,QAAQZ,IAAI;IACV,KAAK,OAAO;MAAE;QACZY,OAAO,GAAGC,kBAAkB,EAAC,oBAAsB/C,QAAQ,EAAGZ,OAAO,CAAC;QACtE;MACF;IACA,KAAK,YAAY;MAAE;QACjB0D,OAAO,GAAGE,uBAAuB,EAC/B,yBAA2BhD,QAAQ,EACnCZ,OACF,CAAC;QACD;MACF;IACA,KAAK,SAAS;MAAE;QACd0D,OAAO,GAAGG,oBAAoB,EAC5B,sBAAwBjD,QAAQ,EAChCZ,OACF,CAAC;QACD;MACF;IACA,KAAK,YAAY;MAAE;QACjB0D,OAAO,GAAGI,uBAAuB,EAC/B,yBAA2BlD,QAAQ,EACnCZ,OACF,CAAC;QACD;MACF;IACA,KAAK,iBAAiB;MAAE;QACtB0D,OAAO,GAAGK,4BAA4B,EACpC,8BAAgCnD,QAAQ,EACxCZ,OACF,CAAC;QACD;MACF;IACA,KAAK,cAAc;MAAE;QACnB0D,OAAO,GAAGM,yBAAyB,EACjC,2BAA6BpD,QAAQ,EACrCZ,OACF,CAAC;QACD;MACF;IACA,KAAK,oBAAoB;MAAE;QACzB0D,OAAO,GAAGO,+BAA+B,EACvC,iCAAmCrD,QAAQ,EAC3CZ,OACF,CAAC;QACD;MACF;IACA,KAAK,QAAQ;MAAE;QACb0D,OAAO,GAAG;UACRZ,IAAI,EAAE,oBAAoB;UAC1BS,UAAU,EAAE;QACd,CAAC;QACD;MACF;IACA;MAAS;QACP,MAAM,IAAItB,KAAK,CAAC,6BAA6B,GAAGa,IAAI,CAAC;MACvD;EACF;EACA,OAAOY,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASO,+BAA+BA,CAACrD,QAAQ,EAAEZ,OAAO,EAAE;EAC1DA,OAAO,GAAGkE,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEnE,OAAO,CAAC;EACpC,OAAOA,OAAO,CAACE,iBAAiB;EAChC,MAAMqD,UAAU,GAAG3C,QAAQ,CAACwD,kBAAkB,CAAC,CAAC,CAACZ,GAAG,CAAC,UAAU5C,QAAQ,EAAE;IACvE,OAAO8B,aAAa,CAAC9B,QAAQ,EAAEZ,OAAO,CAAC;EACzC,CAAC,CAAC;EACF,OAAO;IACL8C,IAAI,EAAE,oBAAoB;IAC1BS,UAAU,EAAEA;EACd,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASK,uBAAuBA,CAAChD,QAAQ,EAAEZ,OAAO,EAAE;EAClD,OAAO;IACL8C,IAAI,EAAE,YAAY;IAClBuB,WAAW,EAAEzD,QAAQ,CAAC0D,cAAc,CAAC;EACvC,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASP,4BAA4BA,CAACnD,QAAQ,EAAEZ,OAAO,EAAE;EACvD,OAAO;IACL8C,IAAI,EAAE,iBAAiB;IACvBuB,WAAW,EAAEzD,QAAQ,CAAC0D,cAAc,CAAC;EACvC,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASR,uBAAuBA,CAAClD,QAAQ,EAAEZ,OAAO,EAAE;EAClD,OAAO;IACL8C,IAAI,EAAE,YAAY;IAClBuB,WAAW,EAAEzD,QAAQ,CAAC0D,cAAc,CAAC;EACvC,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASN,yBAAyBA,CAACpD,QAAQ,EAAEZ,OAAO,EAAE;EACpD,IAAIuE,KAAK;EACT,IAAIvE,OAAO,EAAE;IACXuE,KAAK,GAAGvE,OAAO,CAACwE,WAAW;EAC7B;EACA,OAAO;IACL1B,IAAI,EAAE,cAAc;IACpBuB,WAAW,EAAEzD,QAAQ,CAAC0D,cAAc,CAACC,KAAK;EAC5C,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASZ,kBAAkBA,CAAC/C,QAAQ,EAAEZ,OAAO,EAAE;EAC7C,OAAO;IACL8C,IAAI,EAAE,OAAO;IACbuB,WAAW,EAAEzD,QAAQ,CAAC0D,cAAc,CAAC;EACvC,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAST,oBAAoBA,CAACjD,QAAQ,EAAEZ,OAAO,EAAE;EAC/C,IAAIuE,KAAK;EACT,IAAIvE,OAAO,EAAE;IACXuE,KAAK,GAAGvE,OAAO,CAACwE,WAAW;EAC7B;EACA,OAAO;IACL1B,IAAI,EAAE,SAAS;IACfuB,WAAW,EAAEzD,QAAQ,CAAC0D,cAAc,CAACC,KAAK;EAC5C,CAAC;AACH;AAEA,eAAezE,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}