{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/**\n * A wrapper class to simplify rendering to a texture instead of the final canvas\n * @module ol/webgl/RenderTarget\n */\nimport { equals } from '../array.js';\n\n// for pixel color reading\nconst tmpArray4 = new Uint8Array(4);\n\n/**\n * @classdesc\n * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,\n * simplifying initialization and binding for rendering.\n */\nclass WebGLRenderTarget {\n  /**\n   * @param {import(\"./Helper.js\").default} helper WebGL helper; mandatory.\n   * @param {Array<number>} [size] Expected size of the render target texture; note: this can be changed later on.\n   */\n  constructor(helper, size) {\n    /**\n     * @private\n     * @type {import(\"./Helper.js\").default}\n     */\n    this.helper_ = helper;\n    const gl = helper.getGL();\n\n    /**\n     * @private\n     * @type {WebGLTexture}\n     */\n    this.texture_ = gl.createTexture();\n\n    /**\n     * @private\n     * @type {WebGLFramebuffer}\n     */\n    this.framebuffer_ = gl.createFramebuffer();\n\n    /**\n     * @private\n     * @type {WebGLRenderbuffer}\n     */\n    this.depthbuffer_ = gl.createRenderbuffer();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.size_ = size || [1, 1];\n\n    /**\n     * @type {Uint8Array}\n     * @private\n     */\n    this.data_ = new Uint8Array(0);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dataCacheDirty_ = true;\n    this.updateSize_();\n  }\n\n  /**\n   * Changes the size of the render target texture. Note: will do nothing if the size\n   * is already the same.\n   * @param {Array<number>} size Expected size of the render target texture\n   */\n  setSize(size) {\n    if (equals(size, this.size_)) {\n      return;\n    }\n    this.size_[0] = size[0];\n    this.size_[1] = size[1];\n    this.updateSize_();\n  }\n\n  /**\n   * Returns the size of the render target texture\n   * @return {Array<number>} Size of the render target texture\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * This will cause following calls to `#readAll` or `#readPixel` to download the content of the\n   * render target into memory, which is an expensive operation.\n   * This content will be kept in cache but should be cleared after each new render.\n   */\n  clearCachedData() {\n    this.dataCacheDirty_ = true;\n  }\n\n  /**\n   * Returns the full content of the frame buffer as a series of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * @return {Uint8Array} Integer array of color values\n   */\n  readAll() {\n    if (this.dataCacheDirty_) {\n      const size = this.size_;\n      const gl = this.helper_.getGL();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n      gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.UNSIGNED_BYTE, this.data_);\n      this.dataCacheDirty_ = false;\n    }\n    return this.data_;\n  }\n\n  /**\n   * Reads one pixel of the frame buffer as an array of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * If x and/or y are outside of existing data, an array filled with 0 is returned.\n   * @param {number} x Pixel coordinate\n   * @param {number} y Pixel coordinate\n   * @return {Uint8Array} Integer array with one color value (4 components)\n   */\n  readPixel(x, y) {\n    if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {\n      tmpArray4[0] = 0;\n      tmpArray4[1] = 0;\n      tmpArray4[2] = 0;\n      tmpArray4[3] = 0;\n      return tmpArray4;\n    }\n    this.readAll();\n    const index = Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];\n    tmpArray4[0] = this.data_[index * 4];\n    tmpArray4[1] = this.data_[index * 4 + 1];\n    tmpArray4[2] = this.data_[index * 4 + 2];\n    tmpArray4[3] = this.data_[index * 4 + 3];\n    return tmpArray4;\n  }\n\n  /**\n   * @return {WebGLTexture} Texture to render to\n   */\n  getTexture() {\n    return this.texture_;\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer of the render target\n   */\n  getFramebuffer() {\n    return this.framebuffer_;\n  }\n\n  /**\n   * @return {WebGLRenderbuffer} Depth buffer of the render target\n   */\n  getDepthbuffer() {\n    return this.depthbuffer_;\n  }\n\n  /**\n   * @private\n   */\n  updateSize_() {\n    const size = this.size_;\n    const gl = this.helper_.getGL();\n    this.texture_ = this.helper_.createTexture(size, null, this.texture_);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture_, 0);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.depthbuffer_);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, size[0], size[1]);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.depthbuffer_);\n    this.data_ = new Uint8Array(size[0] * size[1] * 4);\n  }\n}\nexport default WebGLRenderTarget;","map":{"version":3,"names":["equals","tmpArray4","Uint8Array","WebGLRenderTarget","constructor","helper","size","helper_","gl","getGL","texture_","createTexture","framebuffer_","createFramebuffer","depthbuffer_","createRenderbuffer","size_","data_","dataCacheDirty_","updateSize_","setSize","getSize","clearCachedData","readAll","bindFramebuffer","FRAMEBUFFER","readPixels","RGBA","UNSIGNED_BYTE","readPixel","x","y","index","Math","floor","getTexture","getFramebuffer","getDepthbuffer","viewport","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/webgl/RenderTarget.js"],"sourcesContent":["/**\n * A wrapper class to simplify rendering to a texture instead of the final canvas\n * @module ol/webgl/RenderTarget\n */\nimport {equals} from '../array.js';\n\n// for pixel color reading\nconst tmpArray4 = new Uint8Array(4);\n\n/**\n * @classdesc\n * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,\n * simplifying initialization and binding for rendering.\n */\nclass WebGLRenderTarget {\n  /**\n   * @param {import(\"./Helper.js\").default} helper WebGL helper; mandatory.\n   * @param {Array<number>} [size] Expected size of the render target texture; note: this can be changed later on.\n   */\n  constructor(helper, size) {\n    /**\n     * @private\n     * @type {import(\"./Helper.js\").default}\n     */\n    this.helper_ = helper;\n    const gl = helper.getGL();\n\n    /**\n     * @private\n     * @type {WebGLTexture}\n     */\n    this.texture_ = gl.createTexture();\n\n    /**\n     * @private\n     * @type {WebGLFramebuffer}\n     */\n    this.framebuffer_ = gl.createFramebuffer();\n\n    /**\n     * @private\n     * @type {WebGLRenderbuffer}\n     */\n    this.depthbuffer_ = gl.createRenderbuffer();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.size_ = size || [1, 1];\n\n    /**\n     * @type {Uint8Array}\n     * @private\n     */\n    this.data_ = new Uint8Array(0);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dataCacheDirty_ = true;\n\n    this.updateSize_();\n  }\n\n  /**\n   * Changes the size of the render target texture. Note: will do nothing if the size\n   * is already the same.\n   * @param {Array<number>} size Expected size of the render target texture\n   */\n  setSize(size) {\n    if (equals(size, this.size_)) {\n      return;\n    }\n    this.size_[0] = size[0];\n    this.size_[1] = size[1];\n    this.updateSize_();\n  }\n\n  /**\n   * Returns the size of the render target texture\n   * @return {Array<number>} Size of the render target texture\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * This will cause following calls to `#readAll` or `#readPixel` to download the content of the\n   * render target into memory, which is an expensive operation.\n   * This content will be kept in cache but should be cleared after each new render.\n   */\n  clearCachedData() {\n    this.dataCacheDirty_ = true;\n  }\n\n  /**\n   * Returns the full content of the frame buffer as a series of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * @return {Uint8Array} Integer array of color values\n   */\n  readAll() {\n    if (this.dataCacheDirty_) {\n      const size = this.size_;\n      const gl = this.helper_.getGL();\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n      gl.readPixels(\n        0,\n        0,\n        size[0],\n        size[1],\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        this.data_\n      );\n      this.dataCacheDirty_ = false;\n    }\n    return this.data_;\n  }\n\n  /**\n   * Reads one pixel of the frame buffer as an array of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * If x and/or y are outside of existing data, an array filled with 0 is returned.\n   * @param {number} x Pixel coordinate\n   * @param {number} y Pixel coordinate\n   * @return {Uint8Array} Integer array with one color value (4 components)\n   */\n  readPixel(x, y) {\n    if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {\n      tmpArray4[0] = 0;\n      tmpArray4[1] = 0;\n      tmpArray4[2] = 0;\n      tmpArray4[3] = 0;\n      return tmpArray4;\n    }\n\n    this.readAll();\n    const index =\n      Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];\n    tmpArray4[0] = this.data_[index * 4];\n    tmpArray4[1] = this.data_[index * 4 + 1];\n    tmpArray4[2] = this.data_[index * 4 + 2];\n    tmpArray4[3] = this.data_[index * 4 + 3];\n    return tmpArray4;\n  }\n\n  /**\n   * @return {WebGLTexture} Texture to render to\n   */\n  getTexture() {\n    return this.texture_;\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer of the render target\n   */\n  getFramebuffer() {\n    return this.framebuffer_;\n  }\n\n  /**\n   * @return {WebGLRenderbuffer} Depth buffer of the render target\n   */\n  getDepthbuffer() {\n    return this.depthbuffer_;\n  }\n\n  /**\n   * @private\n   */\n  updateSize_() {\n    const size = this.size_;\n    const gl = this.helper_.getGL();\n\n    this.texture_ = this.helper_.createTexture(size, null, this.texture_);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      this.texture_,\n      0\n    );\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.depthbuffer_);\n    gl.renderbufferStorage(\n      gl.RENDERBUFFER,\n      gl.DEPTH_COMPONENT16,\n      size[0],\n      size[1]\n    );\n    gl.framebufferRenderbuffer(\n      gl.FRAMEBUFFER,\n      gl.DEPTH_ATTACHMENT,\n      gl.RENDERBUFFER,\n      this.depthbuffer_\n    );\n\n    this.data_ = new Uint8Array(size[0] * size[1] * 4);\n  }\n}\n\nexport default WebGLRenderTarget;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}