{"ast":null,"code":"/**\n * @module ol/source/TileImage\n */\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport { getKey, getKeyZXY } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection } from '../tilegrid.js';\nimport { getUid } from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass = options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n    this.tileCacheForProjection = {};\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    }\n    for (const key in this.tileCacheForProjection) {\n      if (this.tileCacheForProjection[key].canExpireCache()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const usedTileCache = this.getTileCacheForProjection(projection);\n    this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n    for (const id in this.tileCacheForProjection) {\n      const tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    if (this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return 0;\n    }\n    return this.getGutter();\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    let key = super.getKey();\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n    return key;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  getOpaque(projection) {\n    if (this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return false;\n    }\n    return super.getOpaque(projection);\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] = getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection[projKey];\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   */\n  getTileCacheForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileCacheForProjection)) {\n      this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n    }\n    return this.tileCacheForProjection[projKey];\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    const tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n    const tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (!sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n    }\n    const cache = this.getTileCacheForProjection(projection);\n    const tileCoord = [z, x, y];\n    let tile;\n    const tileCoordKey = getKey(tileCoord);\n    if (cache.containsKey(tileCoordKey)) {\n      tile = cache.get(tileCoordKey);\n    }\n    const key = this.getKey();\n    if (tile && tile.key == key) {\n      return tile;\n    }\n    const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n    const targetTileGrid = this.getTileGridForProjection(projection);\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    const newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), (z, x, y, pixelRatio) => this.getTileInternal(z, x, y, pixelRatio, sourceProjection), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.getInterpolate());\n    newTile.key = key;\n    if (tile) {\n      newTile.interimTile = tile;\n      newTile.refreshInterimChain();\n      cache.replace(tileCoordKey, newTile);\n    } else {\n      cache.set(tileCoordKey, newTile);\n    }\n    return newTile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!ImageTile} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    let tile = null;\n    const tileCoordKey = getKeyZXY(z, x, y);\n    const key = this.getKey();\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        const interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n\n        //make the new tile the head of the list,\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n    return tile;\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n  clear() {\n    super.clear();\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n  }\n}\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */imageTile.getImage().src = src;\n}\nexport default TileImage;","map":{"version":3,"names":["EventType","ImageTile","ReprojTile","TileCache","TileState","UrlTile","equivalent","get","getProjection","getKey","getKeyZXY","getForProjection","getTileGridForProjection","getUid","TileImage","constructor","options","attributions","cacheSize","opaque","projection","state","tileGrid","tileLoadFunction","defaultTileLoadFunction","tilePixelRatio","tileUrlFunction","url","urls","wrapX","transition","interpolate","undefined","key","attributionsCollapsible","zDirection","crossOrigin","tileClass","tileCacheForProjection","tileGridForProjection","reprojectionErrorThreshold_","reprojectionErrorThreshold","renderReprojectionEdges_","canExpireCache","tileCache","expireCache","usedTiles","usedTileCache","getTileCacheForProjection","id","getGutterForProjection","getGutter","getInterpolate","getOpaque","thisProj","projKey","highWaterMark","createTile_","z","x","y","pixelRatio","tileCoord","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","IDLE","EMPTY","tileOptions","addEventListener","CHANGE","handleTileChange","bind","getTile","sourceProjection","getTileInternal","cache","tileCoordKey","containsKey","sourceTileGrid","targetTileGrid","wrappedTileCoord","newTile","getTilePixelRatio","interimTile","refreshInterimChain","replace","set","getState","setRenderReprojectionEdges","render","clear","changed","setTileGridForProjection","tilegrid","proj","imageTile","src","getImage"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/source/TileImage.js"],"sourcesContent":["/**\n * @module ol/source/TileImage\n */\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport {getKey, getKeyZXY} from '../tilecoord.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass =\n      options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n    this.tileCacheForProjection = {};\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    }\n    for (const key in this.tileCacheForProjection) {\n      if (this.tileCacheForProjection[key].canExpireCache()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const usedTileCache = this.getTileCacheForProjection(projection);\n\n    this.tileCache.expireCache(\n      this.tileCache == usedTileCache ? usedTiles : {}\n    );\n    for (const id in this.tileCacheForProjection) {\n      const tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return 0;\n    }\n    return this.getGutter();\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    let key = super.getKey();\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n    return key;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  getOpaque(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return false;\n    }\n    return super.getOpaque(projection);\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] =\n        getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection[projKey];\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   */\n  getTileCacheForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileCacheForProjection)) {\n      this.tileCacheForProjection[projKey] = new TileCache(\n        this.tileCache.highWaterMark\n      );\n    }\n    return this.tileCacheForProjection[projKey];\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection\n    );\n    const tileUrl = urlTileCoord\n      ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\n      : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions\n    );\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      return this.getTileInternal(\n        z,\n        x,\n        y,\n        pixelRatio,\n        sourceProjection || projection\n      );\n    }\n    const cache = this.getTileCacheForProjection(projection);\n    const tileCoord = [z, x, y];\n    let tile;\n    const tileCoordKey = getKey(tileCoord);\n    if (cache.containsKey(tileCoordKey)) {\n      tile = cache.get(tileCoordKey);\n    }\n    const key = this.getKey();\n    if (tile && tile.key == key) {\n      return tile;\n    }\n    const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n    const targetTileGrid = this.getTileGridForProjection(projection);\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection\n    );\n    const newTile = new ReprojTile(\n      sourceProjection,\n      sourceTileGrid,\n      projection,\n      targetTileGrid,\n      tileCoord,\n      wrappedTileCoord,\n      this.getTilePixelRatio(pixelRatio),\n      this.getGutter(),\n      (z, x, y, pixelRatio) =>\n        this.getTileInternal(z, x, y, pixelRatio, sourceProjection),\n      this.reprojectionErrorThreshold_,\n      this.renderReprojectionEdges_,\n      this.getInterpolate()\n    );\n    newTile.key = key;\n\n    if (tile) {\n      newTile.interimTile = tile;\n      newTile.refreshInterimChain();\n      cache.replace(tileCoordKey, newTile);\n    } else {\n      cache.set(tileCoordKey, newTile);\n    }\n    return newTile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!ImageTile} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    let tile = null;\n    const tileCoordKey = getKeyZXY(z, x, y);\n    const key = this.getKey();\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        const interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n\n        //make the new tile the head of the list,\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n    return tile;\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n\n  clear() {\n    super.clear();\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n  }\n}\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\n    src;\n}\n\nexport default TileImage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}