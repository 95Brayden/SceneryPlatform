{"ast":null,"code":"/**\n * @module ol/geom/Point\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { containsXY, createOrUpdateFromCoordinate } from '../extent.js';\nimport { deflateCoordinate } from './flat/deflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\nclass Point extends SimpleGeometry {\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    this.setCoordinates(coordinates, layout);\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @api\n   */\n  clone() {\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\n    point.applyProperties(this);\n    return point;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const squaredDistance = squaredDx(x, y, flatCoordinates[0], flatCoordinates[1]);\n    if (squaredDistance < minSquaredDistance) {\n      const stride = this.stride;\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Point';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  }\n\n  /**\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinate(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n}\nexport default Point;","map":{"version":3,"names":["SimpleGeometry","containsXY","createOrUpdateFromCoordinate","deflateCoordinate","squaredDistance","squaredDx","Point","constructor","coordinates","layout","setCoordinates","clone","point","flatCoordinates","slice","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","stride","i","length","getCoordinates","computeExtent","extent","getType","intersectsExtent","setLayout","changed"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/geom/Point.js"],"sourcesContent":["/**\n * @module ol/geom/Point\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {containsXY, createOrUpdateFromCoordinate} from '../extent.js';\nimport {deflateCoordinate} from './flat/deflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\nclass Point extends SimpleGeometry {\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    this.setCoordinates(coordinates, layout);\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @api\n   */\n  clone() {\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\n    point.applyProperties(this);\n    return point;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const squaredDistance = squaredDx(\n      x,\n      y,\n      flatCoordinates[0],\n      flatCoordinates[1]\n    );\n    if (squaredDistance < minSquaredDistance) {\n      const stride = this.stride;\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Point';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  }\n\n  /**\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinate(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default Point;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,cAAc,MAAM,qBAAqB;AAChD,SAAQC,UAAU,EAAEC,4BAA4B,QAAO,cAAc;AACrE,SAAQC,iBAAiB,QAAO,mBAAmB;AACnD,SAAQC,eAAe,IAAIC,SAAS,QAAO,YAAY;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,SAASN,cAAc,CAAC;EACjC;AACF;AACA;AACA;EACEO,WAAWA,CAACC,WAAW,EAAEC,MAAM,EAAE;IAC/B,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,cAAc,CAACF,WAAW,EAAEC,MAAM,CAAC;EAC1C;;EAEA;AACF;AACA;AACA;AACA;EACEE,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAK,GAAG,IAAIN,KAAK,CAAC,IAAI,CAACO,eAAe,CAACC,KAAK,CAAC,CAAC,EAAE,IAAI,CAACL,MAAM,CAAC;IAClEG,KAAK,CAACG,eAAe,CAAC,IAAI,CAAC;IAC3B,OAAOH,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEI,cAAcA,CAACC,CAAC,EAAEC,CAAC,EAAEC,YAAY,EAAEC,kBAAkB,EAAE;IACrD,MAAMP,eAAe,GAAG,IAAI,CAACA,eAAe;IAC5C,MAAMT,eAAe,GAAGC,SAAS,CAC/BY,CAAC,EACDC,CAAC,EACDL,eAAe,CAAC,CAAC,CAAC,EAClBA,eAAe,CAAC,CAAC,CACnB,CAAC;IACD,IAAIT,eAAe,GAAGgB,kBAAkB,EAAE;MACxC,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM;MAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAE,EAAEC,CAAC,EAAE;QAC/BH,YAAY,CAACG,CAAC,CAAC,GAAGT,eAAe,CAACS,CAAC,CAAC;MACtC;MACAH,YAAY,CAACI,MAAM,GAAGF,MAAM;MAC5B,OAAOjB,eAAe;IACxB;IACA,OAAOgB,kBAAkB;EAC3B;;EAEA;AACF;AACA;AACA;AACA;EACEI,cAAcA,CAAA,EAAG;IACf,OAAO,CAAC,IAAI,CAACX,eAAe,GAAG,EAAE,GAAG,IAAI,CAACA,eAAe,CAACC,KAAK,CAAC,CAAC;EAClE;;EAEA;AACF;AACA;AACA;AACA;EACEW,aAAaA,CAACC,MAAM,EAAE;IACpB,OAAOxB,4BAA4B,CAAC,IAAI,CAACW,eAAe,EAAEa,MAAM,CAAC;EACnE;;EAEA;AACF;AACA;AACA;AACA;EACEC,OAAOA,CAAA,EAAG;IACR,OAAO,OAAO;EAChB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,gBAAgBA,CAACF,MAAM,EAAE;IACvB,OAAOzB,UAAU,CAACyB,MAAM,EAAE,IAAI,CAACb,eAAe,CAAC,CAAC,CAAC,EAAE,IAAI,CAACA,eAAe,CAAC,CAAC,CAAC,CAAC;EAC7E;;EAEA;AACF;AACA;AACA;AACA;EACEH,cAAcA,CAACF,WAAW,EAAEC,MAAM,EAAE;IAClC,IAAI,CAACoB,SAAS,CAACpB,MAAM,EAAED,WAAW,EAAE,CAAC,CAAC;IACtC,IAAI,CAAC,IAAI,CAACK,eAAe,EAAE;MACzB,IAAI,CAACA,eAAe,GAAG,EAAE;IAC3B;IACA,IAAI,CAACA,eAAe,CAACU,MAAM,GAAGpB,iBAAiB,CAC7C,IAAI,CAACU,eAAe,EACpB,CAAC,EACDL,WAAW,EACX,IAAI,CAACa,MACP,CAAC;IACD,IAAI,CAACS,OAAO,CAAC,CAAC;EAChB;AACF;AAEA,eAAexB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}