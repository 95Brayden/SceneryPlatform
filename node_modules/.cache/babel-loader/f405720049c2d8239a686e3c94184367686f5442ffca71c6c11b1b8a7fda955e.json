{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/Collection\n */\nimport BaseObject from './Object.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport Event from './events/Event.js';\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  LENGTH: 'length'\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this\n * type.\n * @template T\n */\nexport class CollectionEvent extends Event {\n  /**\n   * @param {import(\"./CollectionEventType.js\").default} type Type.\n   * @param {T} element Element.\n   * @param {number} index The index of the added or removed element.\n   */\n  constructor(type, element, index) {\n    super(type);\n\n    /**\n     * The element that is added to or removed from the collection.\n     * @type {T}\n     * @api\n     */\n    this.element = element;\n\n    /**\n     * The index of the added or removed element.\n     * @type {number}\n     * @api\n     */\n    this.index = index;\n  }\n}\n\n/***\n * @template T\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:length', import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'add'|'remove', CollectionEvent<T>, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types|\n *     'change:length'|'add'|'remove',Return>} CollectionOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [unique=false] Disallow the same item from being added to\n * the collection twice.\n */\n\n/**\n * @classdesc\n * An expanded version of standard JS Array, adding convenience methods for\n * manipulation. Add and remove changes to the Collection trigger a Collection\n * event. Note that this does not cover changes to the objects _within_ the\n * Collection; they trigger events on the appropriate object, not on the\n * Collection as a whole.\n *\n * @fires CollectionEvent\n *\n * @template T\n * @api\n */\nclass Collection extends BaseObject {\n  /**\n   * @param {Array<T>} [array] Array.\n   * @param {Options} [options] Collection options.\n   */\n  constructor(array, options) {\n    super();\n\n    /***\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {CollectionOnSignature<T, void>}\n     */\n    this.un;\n    options = options || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.unique_ = !!options.unique;\n\n    /**\n     * @private\n     * @type {!Array<T>}\n     */\n    this.array_ = array ? array : [];\n    if (this.unique_) {\n      for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n        this.assertUnique_(this.array_[i], i);\n      }\n    }\n    this.updateLength_();\n  }\n\n  /**\n   * Remove all elements from the collection.\n   * @api\n   */\n  clear() {\n    while (this.getLength() > 0) {\n      this.pop();\n    }\n  }\n\n  /**\n   * Add elements to the collection.  This pushes each item in the provided array\n   * to the end of the collection.\n   * @param {!Array<T>} arr Array.\n   * @return {Collection<T>} This collection.\n   * @api\n   */\n  extend(arr) {\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      this.push(arr[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Iterate over each element, calling the provided callback.\n   * @param {function(T, number, Array<T>): *} f The function to call\n   *     for every element. This function takes 3 arguments (the element, the\n   *     index and the array). The return value is ignored.\n   * @api\n   */\n  forEach(f) {\n    const array = this.array_;\n    for (let i = 0, ii = array.length; i < ii; ++i) {\n      f(array[i], i, array);\n    }\n  }\n\n  /**\n   * Get a reference to the underlying Array object. Warning: if the array\n   * is mutated, no events will be dispatched by the collection, and the\n   * collection's \"length\" property won't be in sync with the actual length\n   * of the array.\n   * @return {!Array<T>} Array.\n   * @api\n   */\n  getArray() {\n    return this.array_;\n  }\n\n  /**\n   * Get the element at the provided index.\n   * @param {number} index Index.\n   * @return {T} Element.\n   * @api\n   */\n  item(index) {\n    return this.array_[index];\n  }\n\n  /**\n   * Get the length of this collection.\n   * @return {number} The length of the array.\n   * @observable\n   * @api\n   */\n  getLength() {\n    return this.get(Property.LENGTH);\n  }\n\n  /**\n   * Insert an element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  insertAt(index, elem) {\n    if (index < 0 || index > this.getLength()) {\n      throw new Error('Index out of bounds: ' + index);\n    }\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    this.array_.splice(index, 0, elem);\n    this.updateLength_();\n    this.dispatchEvent(new CollectionEvent(CollectionEventType.ADD, elem, index));\n  }\n\n  /**\n   * Remove the last element of the collection and return it.\n   * Return `undefined` if the collection is empty.\n   * @return {T|undefined} Element.\n   * @api\n   */\n  pop() {\n    return this.removeAt(this.getLength() - 1);\n  }\n\n  /**\n   * Insert the provided element at the end of the collection.\n   * @param {T} elem Element.\n   * @return {number} New length of the collection.\n   * @api\n   */\n  push(elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    const n = this.getLength();\n    this.insertAt(n, elem);\n    return this.getLength();\n  }\n\n  /**\n   * Remove the first occurrence of an element from the collection.\n   * @param {T} elem Element.\n   * @return {T|undefined} The removed element or undefined if none found.\n   * @api\n   */\n  remove(elem) {\n    const arr = this.array_;\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      if (arr[i] === elem) {\n        return this.removeAt(i);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Remove the element at the provided index and return it.\n   * Return `undefined` if the collection does not contain this index.\n   * @param {number} index Index.\n   * @return {T|undefined} Value.\n   * @api\n   */\n  removeAt(index) {\n    if (index < 0 || index >= this.getLength()) {\n      return undefined;\n    }\n    const prev = this.array_[index];\n    this.array_.splice(index, 1);\n    this.updateLength_();\n    this.dispatchEvent( /** @type {CollectionEvent<T>} */\n    new CollectionEvent(CollectionEventType.REMOVE, prev, index));\n    return prev;\n  }\n\n  /**\n   * Set the element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  setAt(index, elem) {\n    const n = this.getLength();\n    if (index >= n) {\n      this.insertAt(index, elem);\n      return;\n    }\n    if (index < 0) {\n      throw new Error('Index out of bounds: ' + index);\n    }\n    if (this.unique_) {\n      this.assertUnique_(elem, index);\n    }\n    const prev = this.array_[index];\n    this.array_[index] = elem;\n    this.dispatchEvent( /** @type {CollectionEvent<T>} */\n    new CollectionEvent(CollectionEventType.REMOVE, prev, index));\n    this.dispatchEvent( /** @type {CollectionEvent<T>} */\n    new CollectionEvent(CollectionEventType.ADD, elem, index));\n  }\n\n  /**\n   * @private\n   */\n  updateLength_() {\n    this.set(Property.LENGTH, this.array_.length);\n  }\n\n  /**\n   * @private\n   * @param {T} elem Element.\n   * @param {number} [except] Optional index to ignore.\n   */\n  assertUnique_(elem, except) {\n    for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n      if (this.array_[i] === elem && i !== except) {\n        throw new Error('Duplicate item added to a unique collection');\n      }\n    }\n  }\n}\nexport default Collection;","map":{"version":3,"names":["BaseObject","CollectionEventType","Event","Property","LENGTH","CollectionEvent","constructor","type","element","index","Collection","array","options","on","once","un","unique_","unique","array_","i","ii","length","assertUnique_","updateLength_","clear","getLength","pop","extend","arr","push","forEach","f","getArray","item","get","insertAt","elem","Error","splice","dispatchEvent","ADD","removeAt","n","remove","undefined","prev","REMOVE","setAt","set","except"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/Collection.js"],"sourcesContent":["/**\n * @module ol/Collection\n */\nimport BaseObject from './Object.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport Event from './events/Event.js';\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  LENGTH: 'length',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this\n * type.\n * @template T\n */\nexport class CollectionEvent extends Event {\n  /**\n   * @param {import(\"./CollectionEventType.js\").default} type Type.\n   * @param {T} element Element.\n   * @param {number} index The index of the added or removed element.\n   */\n  constructor(type, element, index) {\n    super(type);\n\n    /**\n     * The element that is added to or removed from the collection.\n     * @type {T}\n     * @api\n     */\n    this.element = element;\n\n    /**\n     * The index of the added or removed element.\n     * @type {number}\n     * @api\n     */\n    this.index = index;\n  }\n}\n\n/***\n * @template T\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:length', import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'add'|'remove', CollectionEvent<T>, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types|\n *     'change:length'|'add'|'remove',Return>} CollectionOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [unique=false] Disallow the same item from being added to\n * the collection twice.\n */\n\n/**\n * @classdesc\n * An expanded version of standard JS Array, adding convenience methods for\n * manipulation. Add and remove changes to the Collection trigger a Collection\n * event. Note that this does not cover changes to the objects _within_ the\n * Collection; they trigger events on the appropriate object, not on the\n * Collection as a whole.\n *\n * @fires CollectionEvent\n *\n * @template T\n * @api\n */\nclass Collection extends BaseObject {\n  /**\n   * @param {Array<T>} [array] Array.\n   * @param {Options} [options] Collection options.\n   */\n  constructor(array, options) {\n    super();\n\n    /***\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {CollectionOnSignature<T, void>}\n     */\n    this.un;\n\n    options = options || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.unique_ = !!options.unique;\n\n    /**\n     * @private\n     * @type {!Array<T>}\n     */\n    this.array_ = array ? array : [];\n\n    if (this.unique_) {\n      for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n        this.assertUnique_(this.array_[i], i);\n      }\n    }\n\n    this.updateLength_();\n  }\n\n  /**\n   * Remove all elements from the collection.\n   * @api\n   */\n  clear() {\n    while (this.getLength() > 0) {\n      this.pop();\n    }\n  }\n\n  /**\n   * Add elements to the collection.  This pushes each item in the provided array\n   * to the end of the collection.\n   * @param {!Array<T>} arr Array.\n   * @return {Collection<T>} This collection.\n   * @api\n   */\n  extend(arr) {\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      this.push(arr[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Iterate over each element, calling the provided callback.\n   * @param {function(T, number, Array<T>): *} f The function to call\n   *     for every element. This function takes 3 arguments (the element, the\n   *     index and the array). The return value is ignored.\n   * @api\n   */\n  forEach(f) {\n    const array = this.array_;\n    for (let i = 0, ii = array.length; i < ii; ++i) {\n      f(array[i], i, array);\n    }\n  }\n\n  /**\n   * Get a reference to the underlying Array object. Warning: if the array\n   * is mutated, no events will be dispatched by the collection, and the\n   * collection's \"length\" property won't be in sync with the actual length\n   * of the array.\n   * @return {!Array<T>} Array.\n   * @api\n   */\n  getArray() {\n    return this.array_;\n  }\n\n  /**\n   * Get the element at the provided index.\n   * @param {number} index Index.\n   * @return {T} Element.\n   * @api\n   */\n  item(index) {\n    return this.array_[index];\n  }\n\n  /**\n   * Get the length of this collection.\n   * @return {number} The length of the array.\n   * @observable\n   * @api\n   */\n  getLength() {\n    return this.get(Property.LENGTH);\n  }\n\n  /**\n   * Insert an element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  insertAt(index, elem) {\n    if (index < 0 || index > this.getLength()) {\n      throw new Error('Index out of bounds: ' + index);\n    }\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    this.array_.splice(index, 0, elem);\n    this.updateLength_();\n    this.dispatchEvent(\n      new CollectionEvent(CollectionEventType.ADD, elem, index)\n    );\n  }\n\n  /**\n   * Remove the last element of the collection and return it.\n   * Return `undefined` if the collection is empty.\n   * @return {T|undefined} Element.\n   * @api\n   */\n  pop() {\n    return this.removeAt(this.getLength() - 1);\n  }\n\n  /**\n   * Insert the provided element at the end of the collection.\n   * @param {T} elem Element.\n   * @return {number} New length of the collection.\n   * @api\n   */\n  push(elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    const n = this.getLength();\n    this.insertAt(n, elem);\n    return this.getLength();\n  }\n\n  /**\n   * Remove the first occurrence of an element from the collection.\n   * @param {T} elem Element.\n   * @return {T|undefined} The removed element or undefined if none found.\n   * @api\n   */\n  remove(elem) {\n    const arr = this.array_;\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      if (arr[i] === elem) {\n        return this.removeAt(i);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Remove the element at the provided index and return it.\n   * Return `undefined` if the collection does not contain this index.\n   * @param {number} index Index.\n   * @return {T|undefined} Value.\n   * @api\n   */\n  removeAt(index) {\n    if (index < 0 || index >= this.getLength()) {\n      return undefined;\n    }\n    const prev = this.array_[index];\n    this.array_.splice(index, 1);\n    this.updateLength_();\n    this.dispatchEvent(\n      /** @type {CollectionEvent<T>} */ (\n        new CollectionEvent(CollectionEventType.REMOVE, prev, index)\n      )\n    );\n    return prev;\n  }\n\n  /**\n   * Set the element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  setAt(index, elem) {\n    const n = this.getLength();\n    if (index >= n) {\n      this.insertAt(index, elem);\n      return;\n    }\n    if (index < 0) {\n      throw new Error('Index out of bounds: ' + index);\n    }\n    if (this.unique_) {\n      this.assertUnique_(elem, index);\n    }\n    const prev = this.array_[index];\n    this.array_[index] = elem;\n    this.dispatchEvent(\n      /** @type {CollectionEvent<T>} */ (\n        new CollectionEvent(CollectionEventType.REMOVE, prev, index)\n      )\n    );\n    this.dispatchEvent(\n      /** @type {CollectionEvent<T>} */ (\n        new CollectionEvent(CollectionEventType.ADD, elem, index)\n      )\n    );\n  }\n\n  /**\n   * @private\n   */\n  updateLength_() {\n    this.set(Property.LENGTH, this.array_.length);\n  }\n\n  /**\n   * @private\n   * @param {T} elem Element.\n   * @param {number} [except] Optional index to ignore.\n   */\n  assertUnique_(elem, except) {\n    for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n      if (this.array_[i] === elem && i !== except) {\n        throw new Error('Duplicate item added to a unique collection');\n      }\n    }\n  }\n}\n\nexport default Collection;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}