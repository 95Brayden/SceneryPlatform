{"ast":null,"code":"/**\n * @module ol/source/UrlTile\n */\nimport TileEventType from './TileEventType.js';\nimport TileSource, { TileSourceEvent } from './Tile.js';\nimport TileState from '../TileState.js';\nimport { createFromTemplates, expandUrl } from '../tileurlfunction.js';\nimport { getKeyZXY } from '../tilecoord.js';\nimport { getUid } from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Cache size.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] TileUrlFunction.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ = this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction;\n    }\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction ? this.tileUrlFunction.bind(this) : this.tileUrlFunction;\n  }\n\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */event.target;\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR : tileState == TileState.LOADED ? TileEventType.TILELOADEND : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\nexport default UrlTile;","map":{"version":3,"names":["TileEventType","TileSource","TileSourceEvent","TileState","createFromTemplates","expandUrl","getKeyZXY","getUid","UrlTile","constructor","options","attributions","cacheSize","opaque","projection","state","tileGrid","tilePixelRatio","wrapX","transition","interpolate","key","attributionsCollapsible","zDirection","generateTileUrlFunction_","tileUrlFunction","prototype","tileLoadFunction","urls","setUrls","url","setUrl","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","Object","getPrototypeOf","bind","getUrls","handleTileChange","event","tile","target","uid","tileState","getState","type","LOADING","TILELOADSTART","ERROR","TILELOADERROR","LOADED","TILELOADEND","undefined","dispatchEvent","setTileLoadFunction","tileCache","clear","changed","setTileUrlFunction","pruneExceptNewestZ","setKey","join","tileCoord","pixelRatio","useTile","z","x","y","tileCoordKey","containsKey","get"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/source/UrlTile.js"],"sourcesContent":["/**\n * @module ol/source/UrlTile\n */\nimport TileEventType from './TileEventType.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileState from '../TileState.js';\nimport {createFromTemplates, expandUrl} from '../tileurlfunction.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Cache size.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] TileUrlFunction.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ =\n      this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction;\n    }\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction\n      ? this.tileUrlFunction.bind(this)\n      : this.tileUrlFunction;\n  }\n\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n          ? TileEventType.TILELOADEND\n          : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\n\nexport default UrlTile;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}