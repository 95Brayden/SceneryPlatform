{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nexport function fromWhiteIsZero(raster, max) {\n  const {\n    width,\n    height\n  } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = 256 - raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\nexport function fromBlackIsZero(raster, max) {\n  const {\n    width,\n    height\n  } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\nexport function fromPalette(raster, colorMap) {\n  const {\n    width,\n    height\n  } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  const greenOffset = colorMap.length / 3;\n  const blueOffset = colorMap.length / 3 * 2;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    const mapIndex = raster[i];\n    rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;\n    rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;\n    rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;\n  }\n  return rgbRaster;\n}\nexport function fromCMYK(cmykRaster) {\n  const {\n    width,\n    height\n  } = cmykRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  for (let i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {\n    const c = cmykRaster[i];\n    const m = cmykRaster[i + 1];\n    const y = cmykRaster[i + 2];\n    const k = cmykRaster[i + 3];\n    rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);\n  }\n  return rgbRaster;\n}\nexport function fromYCbCr(yCbCrRaster) {\n  const {\n    width,\n    height\n  } = yCbCrRaster;\n  const rgbRaster = new Uint8ClampedArray(width * height * 3);\n  for (let i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {\n    const y = yCbCrRaster[i];\n    const cb = yCbCrRaster[i + 1];\n    const cr = yCbCrRaster[i + 2];\n    rgbRaster[j] = y + 1.40200 * (cr - 0x80);\n    rgbRaster[j + 1] = y - 0.34414 * (cb - 0x80) - 0.71414 * (cr - 0x80);\n    rgbRaster[j + 2] = y + 1.77200 * (cb - 0x80);\n  }\n  return rgbRaster;\n}\nconst Xn = 0.95047;\nconst Yn = 1.00000;\nconst Zn = 1.08883;\n\n// from https://github.com/antimatter15/rgb-lab/blob/master/color.js\n\nexport function fromCIELab(cieLabRaster) {\n  const {\n    width,\n    height\n  } = cieLabRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  for (let i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {\n    const L = cieLabRaster[i + 0];\n    const a_ = cieLabRaster[i + 1] << 24 >> 24; // conversion from uint8 to int8\n    const b_ = cieLabRaster[i + 2] << 24 >> 24; // same\n\n    let y = (L + 16) / 116;\n    let x = a_ / 500 + y;\n    let z = y - b_ / 200;\n    let r;\n    let g;\n    let b;\n    x = Xn * (x * x * x > 0.008856 ? x * x * x : (x - 16 / 116) / 7.787);\n    y = Yn * (y * y * y > 0.008856 ? y * y * y : (y - 16 / 116) / 7.787);\n    z = Zn * (z * z * z > 0.008856 ? z * z * z : (z - 16 / 116) / 7.787);\n    r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n    g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n    b = x * 0.0557 + y * -0.2040 + z * 1.0570;\n    r = r > 0.0031308 ? 1.055 * r ** (1 / 2.4) - 0.055 : 12.92 * r;\n    g = g > 0.0031308 ? 1.055 * g ** (1 / 2.4) - 0.055 : 12.92 * g;\n    b = b > 0.0031308 ? 1.055 * b ** (1 / 2.4) - 0.055 : 12.92 * b;\n    rgbRaster[j] = Math.max(0, Math.min(1, r)) * 255;\n    rgbRaster[j + 1] = Math.max(0, Math.min(1, g)) * 255;\n    rgbRaster[j + 2] = Math.max(0, Math.min(1, b)) * 255;\n  }\n  return rgbRaster;\n}","map":{"version":3,"names":["fromWhiteIsZero","raster","max","width","height","rgbRaster","Uint8Array","value","i","j","length","fromBlackIsZero","fromPalette","colorMap","greenOffset","blueOffset","mapIndex","fromCMYK","cmykRaster","c","m","y","k","fromYCbCr","yCbCrRaster","Uint8ClampedArray","cb","cr","Xn","Yn","Zn","fromCIELab","cieLabRaster","L","a_","b_","x","z","r","g","b","Math","min"],"sources":["E:/Desktop/scenerymonitor/node_modules/geotiff/dist-module/rgb.js"],"sourcesContent":["export function fromWhiteIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = 256 - (raster[i] / max * 256);\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromBlackIsZero(raster, max) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  let value;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    value = raster[i] / max * 256;\n    rgbRaster[j] = value;\n    rgbRaster[j + 1] = value;\n    rgbRaster[j + 2] = value;\n  }\n  return rgbRaster;\n}\n\nexport function fromPalette(raster, colorMap) {\n  const { width, height } = raster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  const greenOffset = colorMap.length / 3;\n  const blueOffset = colorMap.length / 3 * 2;\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\n    const mapIndex = raster[i];\n    rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;\n    rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;\n    rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;\n  }\n  return rgbRaster;\n}\n\nexport function fromCMYK(cmykRaster) {\n  const { width, height } = cmykRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n  for (let i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {\n    const c = cmykRaster[i];\n    const m = cmykRaster[i + 1];\n    const y = cmykRaster[i + 2];\n    const k = cmykRaster[i + 3];\n\n    rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);\n    rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);\n  }\n  return rgbRaster;\n}\n\nexport function fromYCbCr(yCbCrRaster) {\n  const { width, height } = yCbCrRaster;\n  const rgbRaster = new Uint8ClampedArray(width * height * 3);\n  for (let i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {\n    const y = yCbCrRaster[i];\n    const cb = yCbCrRaster[i + 1];\n    const cr = yCbCrRaster[i + 2];\n\n    rgbRaster[j] = (y + (1.40200 * (cr - 0x80)));\n    rgbRaster[j + 1] = (y - (0.34414 * (cb - 0x80)) - (0.71414 * (cr - 0x80)));\n    rgbRaster[j + 2] = (y + (1.77200 * (cb - 0x80)));\n  }\n  return rgbRaster;\n}\n\nconst Xn = 0.95047;\nconst Yn = 1.00000;\nconst Zn = 1.08883;\n\n// from https://github.com/antimatter15/rgb-lab/blob/master/color.js\n\nexport function fromCIELab(cieLabRaster) {\n  const { width, height } = cieLabRaster;\n  const rgbRaster = new Uint8Array(width * height * 3);\n\n  for (let i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {\n    const L = cieLabRaster[i + 0];\n    const a_ = cieLabRaster[i + 1] << 24 >> 24; // conversion from uint8 to int8\n    const b_ = cieLabRaster[i + 2] << 24 >> 24; // same\n\n    let y = (L + 16) / 116;\n    let x = (a_ / 500) + y;\n    let z = y - (b_ / 200);\n    let r;\n    let g;\n    let b;\n\n    x = Xn * ((x * x * x > 0.008856) ? x * x * x : (x - (16 / 116)) / 7.787);\n    y = Yn * ((y * y * y > 0.008856) ? y * y * y : (y - (16 / 116)) / 7.787);\n    z = Zn * ((z * z * z > 0.008856) ? z * z * z : (z - (16 / 116)) / 7.787);\n\n    r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n    g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n    b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n    r = (r > 0.0031308) ? ((1.055 * (r ** (1 / 2.4))) - 0.055) : 12.92 * r;\n    g = (g > 0.0031308) ? ((1.055 * (g ** (1 / 2.4))) - 0.055) : 12.92 * g;\n    b = (b > 0.0031308) ? ((1.055 * (b ** (1 / 2.4))) - 0.055) : 12.92 * b;\n\n    rgbRaster[j] = Math.max(0, Math.min(1, r)) * 255;\n    rgbRaster[j + 1] = Math.max(0, Math.min(1, g)) * 255;\n    rgbRaster[j + 2] = Math.max(0, Math.min(1, b)) * 255;\n  }\n  return rgbRaster;\n}\n"],"mappings":";;;AAAA,OAAO,SAASA,eAAeA,CAACC,MAAM,EAAEC,GAAG,EAAE;EAC3C,MAAM;IAAEC,KAAK;IAAEC;EAAO,CAAC,GAAGH,MAAM;EAChC,MAAMI,SAAS,GAAG,IAAIC,UAAU,CAACH,KAAK,GAAGC,MAAM,GAAG,CAAC,CAAC;EACpD,IAAIG,KAAK;EACT,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAED,CAAC,GAAGP,MAAM,CAACS,MAAM,EAAE,EAAEF,CAAC,EAAEC,CAAC,IAAI,CAAC,EAAE;IACrDF,KAAK,GAAG,GAAG,GAAIN,MAAM,CAACO,CAAC,CAAC,GAAGN,GAAG,GAAG,GAAI;IACrCG,SAAS,CAACI,CAAC,CAAC,GAAGF,KAAK;IACpBF,SAAS,CAACI,CAAC,GAAG,CAAC,CAAC,GAAGF,KAAK;IACxBF,SAAS,CAACI,CAAC,GAAG,CAAC,CAAC,GAAGF,KAAK;EAC1B;EACA,OAAOF,SAAS;AAClB;AAEA,OAAO,SAASM,eAAeA,CAACV,MAAM,EAAEC,GAAG,EAAE;EAC3C,MAAM;IAAEC,KAAK;IAAEC;EAAO,CAAC,GAAGH,MAAM;EAChC,MAAMI,SAAS,GAAG,IAAIC,UAAU,CAACH,KAAK,GAAGC,MAAM,GAAG,CAAC,CAAC;EACpD,IAAIG,KAAK;EACT,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAED,CAAC,GAAGP,MAAM,CAACS,MAAM,EAAE,EAAEF,CAAC,EAAEC,CAAC,IAAI,CAAC,EAAE;IACrDF,KAAK,GAAGN,MAAM,CAACO,CAAC,CAAC,GAAGN,GAAG,GAAG,GAAG;IAC7BG,SAAS,CAACI,CAAC,CAAC,GAAGF,KAAK;IACpBF,SAAS,CAACI,CAAC,GAAG,CAAC,CAAC,GAAGF,KAAK;IACxBF,SAAS,CAACI,CAAC,GAAG,CAAC,CAAC,GAAGF,KAAK;EAC1B;EACA,OAAOF,SAAS;AAClB;AAEA,OAAO,SAASO,WAAWA,CAACX,MAAM,EAAEY,QAAQ,EAAE;EAC5C,MAAM;IAAEV,KAAK;IAAEC;EAAO,CAAC,GAAGH,MAAM;EAChC,MAAMI,SAAS,GAAG,IAAIC,UAAU,CAACH,KAAK,GAAGC,MAAM,GAAG,CAAC,CAAC;EACpD,MAAMU,WAAW,GAAGD,QAAQ,CAACH,MAAM,GAAG,CAAC;EACvC,MAAMK,UAAU,GAAGF,QAAQ,CAACH,MAAM,GAAG,CAAC,GAAG,CAAC;EAC1C,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAED,CAAC,GAAGP,MAAM,CAACS,MAAM,EAAE,EAAEF,CAAC,EAAEC,CAAC,IAAI,CAAC,EAAE;IACrD,MAAMO,QAAQ,GAAGf,MAAM,CAACO,CAAC,CAAC;IAC1BH,SAAS,CAACI,CAAC,CAAC,GAAGI,QAAQ,CAACG,QAAQ,CAAC,GAAG,KAAK,GAAG,GAAG;IAC/CX,SAAS,CAACI,CAAC,GAAG,CAAC,CAAC,GAAGI,QAAQ,CAACG,QAAQ,GAAGF,WAAW,CAAC,GAAG,KAAK,GAAG,GAAG;IACjET,SAAS,CAACI,CAAC,GAAG,CAAC,CAAC,GAAGI,QAAQ,CAACG,QAAQ,GAAGD,UAAU,CAAC,GAAG,KAAK,GAAG,GAAG;EAClE;EACA,OAAOV,SAAS;AAClB;AAEA,OAAO,SAASY,QAAQA,CAACC,UAAU,EAAE;EACnC,MAAM;IAAEf,KAAK;IAAEC;EAAO,CAAC,GAAGc,UAAU;EACpC,MAAMb,SAAS,GAAG,IAAIC,UAAU,CAACH,KAAK,GAAGC,MAAM,GAAG,CAAC,CAAC;EACpD,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAED,CAAC,GAAGU,UAAU,CAACR,MAAM,EAAEF,CAAC,IAAI,CAAC,EAAEC,CAAC,IAAI,CAAC,EAAE;IAC5D,MAAMU,CAAC,GAAGD,UAAU,CAACV,CAAC,CAAC;IACvB,MAAMY,CAAC,GAAGF,UAAU,CAACV,CAAC,GAAG,CAAC,CAAC;IAC3B,MAAMa,CAAC,GAAGH,UAAU,CAACV,CAAC,GAAG,CAAC,CAAC;IAC3B,MAAMc,CAAC,GAAGJ,UAAU,CAACV,CAAC,GAAG,CAAC,CAAC;IAE3BH,SAAS,CAACI,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAGU,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,GAAGG,CAAC,IAAI,GAAG,CAAC;IAC1DjB,SAAS,CAACI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAGW,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,GAAGE,CAAC,IAAI,GAAG,CAAC;IAC9DjB,SAAS,CAACI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAGY,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,GAAGC,CAAC,IAAI,GAAG,CAAC;EAChE;EACA,OAAOjB,SAAS;AAClB;AAEA,OAAO,SAASkB,SAASA,CAACC,WAAW,EAAE;EACrC,MAAM;IAAErB,KAAK;IAAEC;EAAO,CAAC,GAAGoB,WAAW;EACrC,MAAMnB,SAAS,GAAG,IAAIoB,iBAAiB,CAACtB,KAAK,GAAGC,MAAM,GAAG,CAAC,CAAC;EAC3D,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAED,CAAC,GAAGgB,WAAW,CAACd,MAAM,EAAEF,CAAC,IAAI,CAAC,EAAEC,CAAC,IAAI,CAAC,EAAE;IAC7D,MAAMY,CAAC,GAAGG,WAAW,CAAChB,CAAC,CAAC;IACxB,MAAMkB,EAAE,GAAGF,WAAW,CAAChB,CAAC,GAAG,CAAC,CAAC;IAC7B,MAAMmB,EAAE,GAAGH,WAAW,CAAChB,CAAC,GAAG,CAAC,CAAC;IAE7BH,SAAS,CAACI,CAAC,CAAC,GAAIY,CAAC,GAAI,OAAO,IAAIM,EAAE,GAAG,IAAI,CAAG;IAC5CtB,SAAS,CAACI,CAAC,GAAG,CAAC,CAAC,GAAIY,CAAC,GAAI,OAAO,IAAIK,EAAE,GAAG,IAAI,CAAE,GAAI,OAAO,IAAIC,EAAE,GAAG,IAAI,CAAG;IAC1EtB,SAAS,CAACI,CAAC,GAAG,CAAC,CAAC,GAAIY,CAAC,GAAI,OAAO,IAAIK,EAAE,GAAG,IAAI,CAAG;EAClD;EACA,OAAOrB,SAAS;AAClB;AAEA,MAAMuB,EAAE,GAAG,OAAO;AAClB,MAAMC,EAAE,GAAG,OAAO;AAClB,MAAMC,EAAE,GAAG,OAAO;;AAElB;;AAEA,OAAO,SAASC,UAAUA,CAACC,YAAY,EAAE;EACvC,MAAM;IAAE7B,KAAK;IAAEC;EAAO,CAAC,GAAG4B,YAAY;EACtC,MAAM3B,SAAS,GAAG,IAAIC,UAAU,CAACH,KAAK,GAAGC,MAAM,GAAG,CAAC,CAAC;EAEpD,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAED,CAAC,GAAGwB,YAAY,CAACtB,MAAM,EAAEF,CAAC,IAAI,CAAC,EAAEC,CAAC,IAAI,CAAC,EAAE;IAC9D,MAAMwB,CAAC,GAAGD,YAAY,CAACxB,CAAC,GAAG,CAAC,CAAC;IAC7B,MAAM0B,EAAE,GAAGF,YAAY,CAACxB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAC5C,MAAM2B,EAAE,GAAGH,YAAY,CAACxB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;;IAE5C,IAAIa,CAAC,GAAG,CAACY,CAAC,GAAG,EAAE,IAAI,GAAG;IACtB,IAAIG,CAAC,GAAIF,EAAE,GAAG,GAAG,GAAIb,CAAC;IACtB,IAAIgB,CAAC,GAAGhB,CAAC,GAAIc,EAAE,GAAG,GAAI;IACtB,IAAIG,CAAC;IACL,IAAIC,CAAC;IACL,IAAIC,CAAC;IAELJ,CAAC,GAAGR,EAAE,IAAKQ,CAAC,GAAGA,CAAC,GAAGA,CAAC,GAAG,QAAQ,GAAIA,CAAC,GAAGA,CAAC,GAAGA,CAAC,GAAG,CAACA,CAAC,GAAI,EAAE,GAAG,GAAI,IAAI,KAAK,CAAC;IACxEf,CAAC,GAAGQ,EAAE,IAAKR,CAAC,GAAGA,CAAC,GAAGA,CAAC,GAAG,QAAQ,GAAIA,CAAC,GAAGA,CAAC,GAAGA,CAAC,GAAG,CAACA,CAAC,GAAI,EAAE,GAAG,GAAI,IAAI,KAAK,CAAC;IACxEgB,CAAC,GAAGP,EAAE,IAAKO,CAAC,GAAGA,CAAC,GAAGA,CAAC,GAAG,QAAQ,GAAIA,CAAC,GAAGA,CAAC,GAAGA,CAAC,GAAG,CAACA,CAAC,GAAI,EAAE,GAAG,GAAI,IAAI,KAAK,CAAC;IAExEC,CAAC,GAAIF,CAAC,GAAG,MAAM,GAAKf,CAAC,GAAG,CAAC,MAAO,GAAIgB,CAAC,GAAG,CAAC,MAAO;IAChDE,CAAC,GAAIH,CAAC,GAAG,CAAC,MAAM,GAAKf,CAAC,GAAG,MAAO,GAAIgB,CAAC,GAAG,MAAO;IAC/CG,CAAC,GAAIJ,CAAC,GAAG,MAAM,GAAKf,CAAC,GAAG,CAAC,MAAO,GAAIgB,CAAC,GAAG,MAAO;IAE/CC,CAAC,GAAIA,CAAC,GAAG,SAAS,GAAM,KAAK,GAAIA,CAAC,KAAK,CAAC,GAAG,GAAG,CAAE,GAAI,KAAK,GAAI,KAAK,GAAGA,CAAC;IACtEC,CAAC,GAAIA,CAAC,GAAG,SAAS,GAAM,KAAK,GAAIA,CAAC,KAAK,CAAC,GAAG,GAAG,CAAE,GAAI,KAAK,GAAI,KAAK,GAAGA,CAAC;IACtEC,CAAC,GAAIA,CAAC,GAAG,SAAS,GAAM,KAAK,GAAIA,CAAC,KAAK,CAAC,GAAG,GAAG,CAAE,GAAI,KAAK,GAAI,KAAK,GAAGA,CAAC;IAEtEnC,SAAS,CAACI,CAAC,CAAC,GAAGgC,IAAI,CAACvC,GAAG,CAAC,CAAC,EAAEuC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,CAAC,CAAC,CAAC,GAAG,GAAG;IAChDjC,SAAS,CAACI,CAAC,GAAG,CAAC,CAAC,GAAGgC,IAAI,CAACvC,GAAG,CAAC,CAAC,EAAEuC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,CAAC,CAAC,CAAC,GAAG,GAAG;IACpDlC,SAAS,CAACI,CAAC,GAAG,CAAC,CAAC,GAAGgC,IAAI,CAACvC,GAAG,CAAC,CAAC,EAAEuC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,CAAC,CAAC,CAAC,GAAG,GAAG;EACtD;EACA,OAAOnC,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}