{"ast":null,"code":"/**\n * @module ol/geom/flat/length\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Length.\n */\nexport function lineStringLength(flatCoordinates, offset, end, stride) {\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  let length = 0;\n  for (let i = offset + stride; i < end; i += stride) {\n    const x2 = flatCoordinates[i];\n    const y2 = flatCoordinates[i + 1];\n    length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    x1 = x2;\n    y1 = y2;\n  }\n  return length;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Perimeter.\n */\nexport function linearRingLength(flatCoordinates, offset, end, stride) {\n  let perimeter = lineStringLength(flatCoordinates, offset, end, stride);\n  const dx = flatCoordinates[end - stride] - flatCoordinates[offset];\n  const dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];\n  perimeter += Math.sqrt(dx * dx + dy * dy);\n  return perimeter;\n}","map":{"version":3,"names":["lineStringLength","flatCoordinates","offset","end","stride","x1","y1","length","i","x2","y2","Math","sqrt","linearRingLength","perimeter","dx","dy"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/geom/flat/length.js"],"sourcesContent":["/**\n * @module ol/geom/flat/length\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Length.\n */\nexport function lineStringLength(flatCoordinates, offset, end, stride) {\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  let length = 0;\n  for (let i = offset + stride; i < end; i += stride) {\n    const x2 = flatCoordinates[i];\n    const y2 = flatCoordinates[i + 1];\n    length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    x1 = x2;\n    y1 = y2;\n  }\n  return length;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Perimeter.\n */\nexport function linearRingLength(flatCoordinates, offset, end, stride) {\n  let perimeter = lineStringLength(flatCoordinates, offset, end, stride);\n  const dx = flatCoordinates[end - stride] - flatCoordinates[offset];\n  const dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];\n  perimeter += Math.sqrt(dx * dx + dy * dy);\n  return perimeter;\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,gBAAgBA,CAACC,eAAe,EAAEC,MAAM,EAAEC,GAAG,EAAEC,MAAM,EAAE;EACrE,IAAIC,EAAE,GAAGJ,eAAe,CAACC,MAAM,CAAC;EAChC,IAAII,EAAE,GAAGL,eAAe,CAACC,MAAM,GAAG,CAAC,CAAC;EACpC,IAAIK,MAAM,GAAG,CAAC;EACd,KAAK,IAAIC,CAAC,GAAGN,MAAM,GAAGE,MAAM,EAAEI,CAAC,GAAGL,GAAG,EAAEK,CAAC,IAAIJ,MAAM,EAAE;IAClD,MAAMK,EAAE,GAAGR,eAAe,CAACO,CAAC,CAAC;IAC7B,MAAME,EAAE,GAAGT,eAAe,CAACO,CAAC,GAAG,CAAC,CAAC;IACjCD,MAAM,IAAII,IAAI,CAACC,IAAI,CAAC,CAACH,EAAE,GAAGJ,EAAE,KAAKI,EAAE,GAAGJ,EAAE,CAAC,GAAG,CAACK,EAAE,GAAGJ,EAAE,KAAKI,EAAE,GAAGJ,EAAE,CAAC,CAAC;IAClED,EAAE,GAAGI,EAAE;IACPH,EAAE,GAAGI,EAAE;EACT;EACA,OAAOH,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,gBAAgBA,CAACZ,eAAe,EAAEC,MAAM,EAAEC,GAAG,EAAEC,MAAM,EAAE;EACrE,IAAIU,SAAS,GAAGd,gBAAgB,CAACC,eAAe,EAAEC,MAAM,EAAEC,GAAG,EAAEC,MAAM,CAAC;EACtE,MAAMW,EAAE,GAAGd,eAAe,CAACE,GAAG,GAAGC,MAAM,CAAC,GAAGH,eAAe,CAACC,MAAM,CAAC;EAClE,MAAMc,EAAE,GAAGf,eAAe,CAACE,GAAG,GAAGC,MAAM,GAAG,CAAC,CAAC,GAAGH,eAAe,CAACC,MAAM,GAAG,CAAC,CAAC;EAC1EY,SAAS,IAAIH,IAAI,CAACC,IAAI,CAACG,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;EACzC,OAAOF,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}