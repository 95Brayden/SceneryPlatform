{"ast":null,"code":"/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { asArray } from '../../color.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { equals } from '../../array.js';\nimport { getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../../extent.js';\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport const canvasPool = [];\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true\n  });\n}\n\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass CanvasLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.container = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tempTransform = createTransform();\n\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.pixelTransform = createTransform();\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform = createTransform();\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = null;\n\n    /**\n     * @type {boolean}\n     */\n    this.containerReused = false;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.pixelContext_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n    this.frameState = null;\n  }\n\n  /**\n   * @param {import('../../DataTile.js').ImageLike} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n  getImageData(image, col, row) {\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n    let data;\n    try {\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import('../../Map.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n  getBackground(frameState) {\n    const layer = this.getLayer();\n    let background = layer.getBackground();\n    if (typeof background === 'function') {\n      background = background(frameState.viewState.resolution);\n    }\n    return background || undefined;\n  }\n\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [backgroundColor] Background color.\n   */\n  useContainer(target, transform, backgroundColor) {\n    const layerClassName = this.getLayer().getClassName();\n    let container, context;\n    if (target && target.className === layerClassName && (!backgroundColor || target && target.style.backgroundColor && equals(asArray(target.style.backgroundColor), asArray(backgroundColor)))) {\n      const canvas = target.firstElementChild;\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    } else if (this.container) {\n      this.container.style.backgroundColor = null;\n    }\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      let style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      const canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n    if (!this.containerReused && backgroundColor && !this.container.style.backgroundColor) {\n      this.container.style.backgroundColor = backgroundColor;\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  clipUnrotated(context, frameState, extent) {\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n    const inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      const event = new RenderEvent(type, this.inversePixelTransform, frameState, context);\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.frameState = frameState;\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX) {\n    const dx1 = width / 2;\n    const dy1 = height / 2;\n    const sx = pixelRatio / resolution;\n    const sy = -sx;\n    const dx2 = -center[0] + offsetX;\n    const dy2 = -center[1];\n    return composeTransform(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    delete this.frameState;\n    super.disposeInternal();\n  }\n}\nexport default CanvasLayerRenderer;","map":{"version":3,"names":["LayerRenderer","RenderEvent","RenderEventType","apply","applyTransform","compose","composeTransform","create","createTransform","asArray","createCanvasContext2D","equals","getBottomLeft","getBottomRight","getTopLeft","getTopRight","canvasPool","pixelContext","createPixelContext","undefined","willReadFrequently","CanvasLayerRenderer","constructor","layer","container","renderedResolution","tempTransform","pixelTransform","inversePixelTransform","context","containerReused","pixelContext_","frameState","getImageData","image","col","row","clearRect","data","drawImage","err","getBackground","getLayer","background","viewState","resolution","useContainer","target","transform","backgroundColor","layerClassName","getClassName","className","style","canvas","firstElementChild","HTMLCanvasElement","getContext","document","createElement","position","width","height","appendChild","left","transformOrigin","clipUnrotated","extent","topLeft","topRight","bottomRight","bottomLeft","coordinateToPixelTransform","inverted","save","beginPath","moveTo","Math","round","lineTo","clip","dispatchRenderEvent_","type","hasListener","event","dispatchEvent","preRender","PRERENDER","postRender","POSTRENDER","getRenderTransform","center","rotation","pixelRatio","offsetX","dx1","dy1","sx","sy","dx2","dy2","disposeInternal"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/renderer/canvas/Layer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {asArray} from '../../color.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {equals} from '../../array.js';\nimport {\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n} from '../../extent.js';\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport const canvasPool = [];\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true,\n  });\n}\n\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass CanvasLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.container = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tempTransform = createTransform();\n\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.pixelTransform = createTransform();\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform = createTransform();\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = null;\n\n    /**\n     * @type {boolean}\n     */\n    this.containerReused = false;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.pixelContext_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n    this.frameState = null;\n  }\n\n  /**\n   * @param {import('../../DataTile.js').ImageLike} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n  getImageData(image, col, row) {\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    let data;\n    try {\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import('../../Map.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n  getBackground(frameState) {\n    const layer = this.getLayer();\n    let background = layer.getBackground();\n    if (typeof background === 'function') {\n      background = background(frameState.viewState.resolution);\n    }\n    return background || undefined;\n  }\n\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [backgroundColor] Background color.\n   */\n  useContainer(target, transform, backgroundColor) {\n    const layerClassName = this.getLayer().getClassName();\n    let container, context;\n    if (\n      target &&\n      target.className === layerClassName &&\n      (!backgroundColor ||\n        (target &&\n          target.style.backgroundColor &&\n          equals(\n            asArray(target.style.backgroundColor),\n            asArray(backgroundColor)\n          )))\n    ) {\n      const canvas = target.firstElementChild;\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    } else if (this.container) {\n      this.container.style.backgroundColor = null;\n    }\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      let style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      const canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n    if (\n      !this.containerReused &&\n      backgroundColor &&\n      !this.container.style.backgroundColor\n    ) {\n      this.container.style.backgroundColor = backgroundColor;\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  clipUnrotated(context, frameState, extent) {\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n\n    const inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      const event = new RenderEvent(\n        type,\n        this.inversePixelTransform,\n        frameState,\n        context\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.frameState = frameState;\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  getRenderTransform(\n    center,\n    resolution,\n    rotation,\n    pixelRatio,\n    width,\n    height,\n    offsetX\n  ) {\n    const dx1 = width / 2;\n    const dy1 = height / 2;\n    const sx = pixelRatio / resolution;\n    const sy = -sx;\n    const dx2 = -center[0] + offsetX;\n    const dy2 = -center[1];\n    return composeTransform(\n      this.tempTransform,\n      dx1,\n      dy1,\n      sx,\n      sy,\n      -rotation,\n      dx2,\n      dy2\n    );\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    delete this.frameState;\n    super.disposeInternal();\n  }\n}\n\nexport default CanvasLayerRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}