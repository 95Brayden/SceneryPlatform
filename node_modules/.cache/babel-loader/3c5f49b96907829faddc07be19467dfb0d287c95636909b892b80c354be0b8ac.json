{"ast":null,"code":"import BaseDecoder from './basedecoder.js';\n\n/**\n * class WebImageDecoder\n *\n * This decoder uses the browsers image decoding facilities to read image\n * formats like WebP when supported.\n */\nexport default class WebImageDecoder extends BaseDecoder {\n  constructor() {\n    super();\n    if (typeof createImageBitmap === 'undefined') {\n      throw new Error('Cannot decode WebImage as `createImageBitmap` is not available');\n    } else if (typeof document === 'undefined' && typeof OffscreenCanvas === 'undefined') {\n      throw new Error('Cannot decode WebImage as neither `document` nor `OffscreenCanvas` is not available');\n    }\n  }\n  async decode(fileDirectory, buffer) {\n    const blob = new Blob([buffer]);\n    const imageBitmap = await createImageBitmap(blob);\n    let canvas;\n    if (typeof document !== 'undefined') {\n      canvas = document.createElement('canvas');\n      canvas.width = imageBitmap.width;\n      canvas.height = imageBitmap.height;\n    } else {\n      canvas = new OffscreenCanvas(imageBitmap.width, imageBitmap.height);\n    }\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(imageBitmap, 0, 0);\n\n    // TODO: check how many samples per pixel we have, and return RGB/RGBA accordingly\n    // it seems like GDAL always encodes via RGBA which does not require a translation\n\n    return ctx.getImageData(0, 0, imageBitmap.width, imageBitmap.height).data.buffer;\n  }\n}","map":{"version":3,"names":["BaseDecoder","WebImageDecoder","constructor","createImageBitmap","Error","document","OffscreenCanvas","decode","fileDirectory","buffer","blob","Blob","imageBitmap","canvas","createElement","width","height","ctx","getContext","drawImage","getImageData","data"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/geotiff/dist-module/compression/webimage.js"],"sourcesContent":["import BaseDecoder from './basedecoder.js';\n\n/**\n * class WebImageDecoder\n *\n * This decoder uses the browsers image decoding facilities to read image\n * formats like WebP when supported.\n */\nexport default class WebImageDecoder extends BaseDecoder {\n  constructor() {\n    super();\n    if (typeof createImageBitmap === 'undefined') {\n      throw new Error('Cannot decode WebImage as `createImageBitmap` is not available');\n    } else if (typeof document === 'undefined' && typeof OffscreenCanvas === 'undefined') {\n      throw new Error('Cannot decode WebImage as neither `document` nor `OffscreenCanvas` is not available');\n    }\n  }\n\n  async decode(fileDirectory, buffer) {\n    const blob = new Blob([buffer]);\n    const imageBitmap = await createImageBitmap(blob);\n\n    let canvas;\n    if (typeof document !== 'undefined') {\n      canvas = document.createElement('canvas');\n      canvas.width = imageBitmap.width;\n      canvas.height = imageBitmap.height;\n    } else {\n      canvas = new OffscreenCanvas(imageBitmap.width, imageBitmap.height);\n    }\n\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(imageBitmap, 0, 0);\n\n    // TODO: check how many samples per pixel we have, and return RGB/RGBA accordingly\n    // it seems like GDAL always encodes via RGBA which does not require a translation\n\n    return ctx.getImageData(0, 0, imageBitmap.width, imageBitmap.height).data.buffer;\n  }\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,kBAAkB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,eAAe,SAASD,WAAW,CAAC;EACvDE,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IACP,IAAI,OAAOC,iBAAiB,KAAK,WAAW,EAAE;MAC5C,MAAM,IAAIC,KAAK,CAAC,gEAAgE,CAAC;IACnF,CAAC,MAAM,IAAI,OAAOC,QAAQ,KAAK,WAAW,IAAI,OAAOC,eAAe,KAAK,WAAW,EAAE;MACpF,MAAM,IAAIF,KAAK,CAAC,qFAAqF,CAAC;IACxG;EACF;EAEA,MAAMG,MAAMA,CAACC,aAAa,EAAEC,MAAM,EAAE;IAClC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACF,MAAM,CAAC,CAAC;IAC/B,MAAMG,WAAW,GAAG,MAAMT,iBAAiB,CAACO,IAAI,CAAC;IAEjD,IAAIG,MAAM;IACV,IAAI,OAAOR,QAAQ,KAAK,WAAW,EAAE;MACnCQ,MAAM,GAAGR,QAAQ,CAACS,aAAa,CAAC,QAAQ,CAAC;MACzCD,MAAM,CAACE,KAAK,GAAGH,WAAW,CAACG,KAAK;MAChCF,MAAM,CAACG,MAAM,GAAGJ,WAAW,CAACI,MAAM;IACpC,CAAC,MAAM;MACLH,MAAM,GAAG,IAAIP,eAAe,CAACM,WAAW,CAACG,KAAK,EAAEH,WAAW,CAACI,MAAM,CAAC;IACrE;IAEA,MAAMC,GAAG,GAAGJ,MAAM,CAACK,UAAU,CAAC,IAAI,CAAC;IACnCD,GAAG,CAACE,SAAS,CAACP,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;;IAEhC;IACA;;IAEA,OAAOK,GAAG,CAACG,YAAY,CAAC,CAAC,EAAE,CAAC,EAAER,WAAW,CAACG,KAAK,EAAEH,WAAW,CAACI,MAAM,CAAC,CAACK,IAAI,CAACZ,MAAM;EAClF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}