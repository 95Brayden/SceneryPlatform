{"ast":null,"code":"import Draw from 'ol/interaction/Draw';\nimport { unByKey } from 'ol/Observable.js';\nimport Overlay from 'ol/Overlay';\nimport { getArea, getLength } from 'ol/sphere.js';\nimport { Point, LineString, Polygon } from 'ol/geom.js';\nimport { Circle as CircleStyle, Fill, Stroke, Style } from 'ol/style.js';\nimport { Vector as VectorLayer } from 'ol/layer';\nimport { Vector as VectorSource } from 'ol/source';\nexport default {\n  measure(map, measureType, draw) {\n    /**\r\n     * Currently drawn feature.\r\n     * @type {import(\"../src/ol/Feature.js\").default}\r\n     */\n    var sketch;\n\n    /**\r\n     * The help tooltip element.\r\n     * @type {HTMLElement}\r\n     */\n    var helpTooltipElement;\n\n    /**\r\n     * Overlay to show the help messages.\r\n     * @type {Overlay}\r\n     */\n    var helpTooltip;\n\n    /**\r\n     * The measure tooltip element.\r\n     * @type {HTMLElement}\r\n     */\n    var measureTooltipElement;\n\n    /**\r\n     * Overlay to show the measurement.\r\n     * @type {Overlay}\r\n     */\n    var measureTooltip;\n\n    /**\r\n     * Message to show when the user is drawing a polygon.\r\n     * @type {string}\r\n     */\n    // var continuePolygonMsg = '单击此处可继续绘制多边形';\n    var continuePolygonMsg = '';\n\n    /**\r\n     * Message to show when the user is drawing a line.\r\n     * @type {string}\r\n     */\n    // var continueLineMsg = '单击此处继续绘制线条';\n    var continueLineMsg = '';\n\n    /**\r\n     * Handle pointer move.\r\n     * @param {import(\"../src/ol/MapBrowserEvent\").default} evt The event.\r\n     */\n    var pointerMoveHandler = function (evt) {\n      if (evt.dragging) {\n        return;\n      }\n      /** @type {string} */\n      var helpMsg = '';\n      // var helpMsg = '点击开始绘制';\n\n      if (sketch) {\n        var geom = sketch.getGeometry();\n        if (geom instanceof Polygon) {\n          helpMsg = continuePolygonMsg;\n        } else if (geom instanceof LineString) {\n          helpMsg = continueLineMsg;\n        }\n      }\n      helpTooltipElement.innerHTML = helpMsg;\n      helpTooltip.setPosition(evt.coordinate);\n      helpTooltipElement.classList.remove('hidden');\n    };\n    map.on('pointermove', pointerMoveHandler);\n    map.getViewport().addEventListener('mouseout', function () {\n      helpTooltipElement.classList.add('hidden');\n    });\n\n    /**\r\n     * Format length output.\r\n     * @param {LineString} line The line.\r\n     * @return {string} The formatted length.\r\n     */\n    var formatLength = function (line) {\n      var sourceProj = map.getView().getProjection(); // 获取投影坐标系\n      var length = getLength(line, {\n        projection: sourceProj\n      });\n      var output;\n      if (length > 100) {\n        output = Math.round(length / 1000 * 100) / 100 + ' ' + 'km';\n      } else {\n        output = Math.round(length * 100) / 100 + ' ' + 'm';\n      }\n      return output;\n    };\n\n    /**\r\n     * Format area output.\r\n     * @param {Polygon} polygon The polygon.\r\n     * @return {string} Formatted area.\r\n     */\n    var formatArea = function (polygon) {\n      var sourceProj = map.getView().getProjection(); // 获取投影坐标系\n      var area = getArea(polygon, {\n        projection: sourceProj\n      });\n      var output;\n      if (area > 10000) {\n        output = Math.round(area / 1000000 * 100) / 100 + ' ' + 'km<sup>2</sup>';\n      } else {\n        output = Math.round(area * 100) / 100 + ' ' + 'm<sup>2</sup>';\n      }\n      return output;\n    };\n\n    // 将画好的 VectorLayer 图层添加到 map 中\n    var source = new VectorSource();\n    var vector = new VectorLayer({\n      source: source,\n      style: new Style({\n        fill: new Fill({\n          color: 'rgba(255, 255, 255, 0.2)'\n        }),\n        stroke: new Stroke({\n          color: '#ffcc33',\n          width: 4\n        }),\n        image: new CircleStyle({\n          radius: 7,\n          fill: new Fill({\n            color: '#ffcc33'\n          })\n        })\n      }),\n      zIndex: 9,\n      name: 'vector'\n    });\n    map.addLayer(vector);\n    for (let layerTmp of map.getLayers().getArray()) {\n      if (layerTmp.get(\"name\") == \"feature\") {\n        layerTmp.setSource(null);\n        source = layerTmp.getSource();\n      }\n    }\n    function addInteraction() {\n      //移除绘制图形\n      if (draw != null) {\n        map.removeInteraction(draw);\n      }\n      draw = new Draw({\n        source: source,\n        type: measureType,\n        style: new Style({\n          fill: new Fill({\n            color: 'rgba(255, 255, 255, 0.2)'\n          }),\n          stroke: new Stroke({\n            color: 'rgba(0, 0, 0, 0.5)',\n            lineDash: [10, 10],\n            width: 2\n          }),\n          image: new CircleStyle({\n            radius: 5,\n            stroke: new Stroke({\n              color: 'rgba(0, 0, 0, 0.7)'\n            }),\n            fill: new Fill({\n              color: 'rgba(255, 255, 255, 0.2)'\n            })\n          })\n        })\n      });\n      map.addInteraction(draw);\n      createMeasureTooltip();\n      createHelpTooltip();\n      var listener;\n      draw.on('drawstart', function (evt) {\n        // set sketch\n        sketch = evt.feature;\n        let type = sketch.getGeometry();\n        if (type instanceof Point) {\n          // 如果是绘制点\n          let pointCoordinates = sketch.getGeometry().flatCoordinates;\n          measureTooltipElement.innerHTML = pointCoordinates;\n          measureTooltip.setPosition(pointCoordinates);\n        } else {\n          // 如果是绘制线和面\n          var tooltipCoord = evt.coordinate;\n          listener = sketch.getGeometry().on('change', function (evt) {\n            var geom = evt.target;\n            var output;\n            if (geom instanceof Polygon) {\n              output = formatArea(geom);\n              tooltipCoord = geom.getInteriorPoint().getCoordinates();\n            } else if (geom instanceof LineString) {\n              output = formatLength(geom);\n              tooltipCoord = geom.getLastCoordinate();\n            }\n            measureTooltipElement.innerHTML = output;\n            measureTooltip.setPosition(tooltipCoord);\n          });\n        }\n      });\n      draw.on('drawend', function () {\n        measureTooltipElement.className = 'ol-tooltip ol-tooltip-static';\n        measureTooltip.setOffset([0, -7]);\n        // unset sketch\n        sketch = null;\n        // unset tooltip so that a new one can be created\n        measureTooltipElement = null;\n        createMeasureTooltip();\n        unByKey(listener);\n        map.un('pointermove', pointerMoveHandler);\n        map.removeInteraction(draw);\n        helpTooltipElement.classList.add('hidden');\n      });\n    }\n\n    /**\r\n     * Creates a new help tooltip\r\n     */\n    function createHelpTooltip() {\n      if (helpTooltipElement) {\n        helpTooltipElement.parentNode.removeChild(helpTooltipElement);\n      }\n      helpTooltipElement = document.createElement('div');\n      helpTooltipElement.className = 'ol-tooltip hidden';\n      helpTooltip = new Overlay({\n        element: helpTooltipElement,\n        offset: [15, 0],\n        positioning: 'center-left'\n      });\n      map.addOverlay(helpTooltip);\n    }\n\n    /**\r\n     * Creates a new measure tooltip\r\n     */\n    function createMeasureTooltip() {\n      if (measureTooltipElement) {\n        measureTooltipElement.parentNode.removeChild(measureTooltipElement);\n      }\n      measureTooltipElement = document.createElement('div');\n      measureTooltipElement.className = 'ol-tooltip ol-tooltip-measure';\n      measureTooltip = new Overlay({\n        element: measureTooltipElement,\n        offset: [0, -15],\n        positioning: 'bottom-center'\n      });\n      map.addOverlay(measureTooltip);\n    }\n    addInteraction();\n  }\n};","map":{"version":3,"names":["Draw","unByKey","Overlay","getArea","getLength","Point","LineString","Polygon","Circle","CircleStyle","Fill","Stroke","Style","Vector","VectorLayer","VectorSource","measure","map","measureType","draw","sketch","helpTooltipElement","helpTooltip","measureTooltipElement","measureTooltip","continuePolygonMsg","continueLineMsg","pointerMoveHandler","evt","dragging","helpMsg","geom","getGeometry","innerHTML","setPosition","coordinate","classList","remove","on","getViewport","addEventListener","add","formatLength","line","sourceProj","getView","getProjection","length","projection","output","Math","round","formatArea","polygon","area","source","vector","style","fill","color","stroke","width","image","radius","zIndex","name","addLayer","layerTmp","getLayers","getArray","get","setSource","getSource","addInteraction","removeInteraction","type","lineDash","createMeasureTooltip","createHelpTooltip","listener","feature","pointCoordinates","flatCoordinates","tooltipCoord","target","getInteriorPoint","getCoordinates","getLastCoordinate","className","setOffset","un","parentNode","removeChild","document","createElement","element","offset","positioning","addOverlay"],"sources":["E:/Desktop/scenerymonitor/src/js/measure.js"],"sourcesContent":["import Draw from 'ol/interaction/Draw'\r\n\r\nimport {\r\n    unByKey\r\n} from 'ol/Observable.js'\r\nimport Overlay from 'ol/Overlay'\r\nimport {\r\n    getArea,\r\n    getLength\r\n} from 'ol/sphere.js'\r\nimport {\r\n    Point,\r\n    LineString,\r\n    Polygon\r\n} from 'ol/geom.js'\r\nimport {\r\n    Circle as CircleStyle,\r\n    Fill,\r\n    Stroke,\r\n    Style\r\n} from 'ol/style.js'\r\n\r\nimport {\r\n    Vector as VectorLayer\r\n} from 'ol/layer'\r\nimport {\r\n    Vector as VectorSource\r\n} from 'ol/source'\r\n\r\nexport default {\r\n\r\n    measure(map, measureType, draw) {\r\n\r\n        /**\r\n         * Currently drawn feature.\r\n         * @type {import(\"../src/ol/Feature.js\").default}\r\n         */\r\n        var sketch;\r\n\r\n\r\n        /**\r\n         * The help tooltip element.\r\n         * @type {HTMLElement}\r\n         */\r\n        var helpTooltipElement;\r\n\r\n\r\n        /**\r\n         * Overlay to show the help messages.\r\n         * @type {Overlay}\r\n         */\r\n        var helpTooltip;\r\n\r\n\r\n        /**\r\n         * The measure tooltip element.\r\n         * @type {HTMLElement}\r\n         */\r\n        var measureTooltipElement;\r\n\r\n\r\n        /**\r\n         * Overlay to show the measurement.\r\n         * @type {Overlay}\r\n         */\r\n        var measureTooltip;\r\n\r\n\r\n        /**\r\n         * Message to show when the user is drawing a polygon.\r\n         * @type {string}\r\n         */\r\n        // var continuePolygonMsg = '单击此处可继续绘制多边形';\r\n        var continuePolygonMsg = '';\r\n\r\n\r\n        /**\r\n         * Message to show when the user is drawing a line.\r\n         * @type {string}\r\n         */\r\n        // var continueLineMsg = '单击此处继续绘制线条';\r\n        var continueLineMsg = '';\r\n\r\n\r\n\r\n\r\n        /**\r\n         * Handle pointer move.\r\n         * @param {import(\"../src/ol/MapBrowserEvent\").default} evt The event.\r\n         */\r\n        var pointerMoveHandler = function (evt) {\r\n            if (evt.dragging) {\r\n                return;\r\n            }\r\n            /** @type {string} */\r\n            var helpMsg = '';\r\n            // var helpMsg = '点击开始绘制';\r\n\r\n            if (sketch) {\r\n                var geom = sketch.getGeometry();\r\n                if (geom instanceof Polygon) {\r\n                    helpMsg = continuePolygonMsg;\r\n                } else if (geom instanceof LineString) {\r\n                    helpMsg = continueLineMsg;\r\n                }\r\n            }\r\n\r\n            helpTooltipElement.innerHTML = helpMsg;\r\n            helpTooltip.setPosition(evt.coordinate);\r\n\r\n            helpTooltipElement.classList.remove('hidden');\r\n        };\r\n\r\n        map.on('pointermove', pointerMoveHandler);\r\n\r\n        map.getViewport().addEventListener('mouseout', function () {\r\n            helpTooltipElement.classList.add('hidden');\r\n        });\r\n\r\n        \r\n\r\n        /**\r\n         * Format length output.\r\n         * @param {LineString} line The line.\r\n         * @return {string} The formatted length.\r\n         */\r\n        var formatLength = function (line) {\r\n            var sourceProj = map.getView().getProjection(); // 获取投影坐标系\r\n            var length = getLength(line, {\r\n                projection: sourceProj\r\n            });\r\n            var output;\r\n            if (length > 100) {\r\n                output = (Math.round(length / 1000 * 100) / 100) +\r\n                    ' ' + 'km';\r\n            } else {\r\n                output = (Math.round(length * 100) / 100) +\r\n                    ' ' + 'm';\r\n            }\r\n            return output;\r\n        };\r\n\r\n\r\n        /**\r\n         * Format area output.\r\n         * @param {Polygon} polygon The polygon.\r\n         * @return {string} Formatted area.\r\n         */\r\n        var formatArea = function (polygon) {\r\n            var sourceProj = map.getView().getProjection(); // 获取投影坐标系\r\n            var area = getArea(polygon, {\r\n                projection: sourceProj\r\n            });\r\n            var output;\r\n            if (area > 10000) {\r\n                output = (Math.round(area / 1000000 * 100) / 100) +\r\n                    ' ' + 'km<sup>2</sup>';\r\n            } else {\r\n                output = (Math.round(area * 100) / 100) +\r\n                    ' ' + 'm<sup>2</sup>';\r\n            }\r\n            return output;\r\n        };\r\n\r\n        // 将画好的 VectorLayer 图层添加到 map 中\r\n        var source = new VectorSource()\r\n        var vector = new VectorLayer({\r\n            source: source,\r\n            style: new Style({\r\n                fill: new Fill({\r\n                    color: 'rgba(255, 255, 255, 0.2)'\r\n                }),\r\n                stroke: new Stroke({\r\n                    color: '#ffcc33',\r\n                    width: 4\r\n                }),\r\n                image: new CircleStyle({\r\n                    radius: 7,\r\n                    fill: new Fill({\r\n                        color: '#ffcc33'\r\n                    })\r\n                })\r\n            }),\r\n            zIndex: 9,\r\n            name: 'vector'\r\n        })\r\n        map.addLayer(vector)\r\n        for (let layerTmp of map.getLayers().getArray()) {\r\n            if (layerTmp.get(\"name\") == \"feature\") {\r\n                layerTmp.setSource(null)\r\n                source = layerTmp.getSource();\r\n            }\r\n        }\r\n\r\n        function addInteraction() {\r\n            //移除绘制图形\r\n            if(draw != null){\r\n                map.removeInteraction(draw);\r\n            }\r\n            \r\n\r\n            draw = new Draw({\r\n                source: source,\r\n                type: measureType,\r\n                style: new Style({\r\n                    fill: new Fill({\r\n                        color: 'rgba(255, 255, 255, 0.2)'\r\n                    }),\r\n                    stroke: new Stroke({\r\n                        color: 'rgba(0, 0, 0, 0.5)',\r\n                        lineDash: [10, 10],\r\n                        width: 2\r\n                    }),\r\n                    image: new CircleStyle({\r\n                        radius: 5,\r\n                        stroke: new Stroke({\r\n                            color: 'rgba(0, 0, 0, 0.7)'\r\n                        }),\r\n                        fill: new Fill({\r\n                            color: 'rgba(255, 255, 255, 0.2)'\r\n                        })\r\n                    })\r\n                })\r\n            });\r\n            map.addInteraction(draw);\r\n\r\n            createMeasureTooltip();\r\n            createHelpTooltip();\r\n\r\n            var listener;\r\n            draw.on('drawstart',\r\n                function (evt) {\r\n                    // set sketch\r\n                    sketch = evt.feature;\r\n\r\n                    let type = sketch.getGeometry()\r\n                    if (type instanceof Point) {\r\n                        // 如果是绘制点\r\n                        let pointCoordinates = sketch.getGeometry().flatCoordinates\r\n                        measureTooltipElement.innerHTML = pointCoordinates;\r\n                        measureTooltip.setPosition(pointCoordinates);\r\n                    } else {\r\n                        // 如果是绘制线和面\r\n                        var tooltipCoord = evt.coordinate;\r\n                        listener = sketch.getGeometry().on('change', function (evt) {\r\n                            var geom = evt.target;\r\n                            var output;\r\n                            if (geom instanceof Polygon) {\r\n                                output = formatArea(geom);\r\n                                tooltipCoord = geom.getInteriorPoint().getCoordinates();\r\n                            } else if (geom instanceof LineString) {\r\n                                output = formatLength(geom);\r\n                                tooltipCoord = geom.getLastCoordinate();\r\n                            }\r\n                            measureTooltipElement.innerHTML = output;\r\n                            measureTooltip.setPosition(tooltipCoord);\r\n                        });\r\n                    }\r\n                });\r\n\r\n            draw.on('drawend',\r\n                function () {\r\n                    measureTooltipElement.className = 'ol-tooltip ol-tooltip-static';\r\n                    measureTooltip.setOffset([0, -7]);\r\n                    // unset sketch\r\n                    sketch = null;\r\n                    // unset tooltip so that a new one can be created\r\n                    measureTooltipElement = null;\r\n                    createMeasureTooltip();\r\n                    unByKey(listener);\r\n                    map.un('pointermove', pointerMoveHandler);\r\n                    map.removeInteraction(draw);\r\n                    helpTooltipElement.classList.add('hidden');\r\n                });\r\n        }\r\n\r\n        /**\r\n         * Creates a new help tooltip\r\n         */\r\n        function createHelpTooltip() {\r\n            if (helpTooltipElement) {\r\n                helpTooltipElement.parentNode.removeChild(helpTooltipElement);\r\n            }\r\n            helpTooltipElement = document.createElement('div');\r\n            helpTooltipElement.className = 'ol-tooltip hidden';\r\n            helpTooltip = new Overlay({\r\n                element: helpTooltipElement,\r\n                offset: [15, 0],\r\n                positioning: 'center-left'\r\n            });\r\n            map.addOverlay(helpTooltip);\r\n        }\r\n\r\n\r\n        /**\r\n         * Creates a new measure tooltip\r\n         */\r\n        function createMeasureTooltip() {\r\n            if (measureTooltipElement) {\r\n                measureTooltipElement.parentNode.removeChild(measureTooltipElement);\r\n            }\r\n            measureTooltipElement = document.createElement('div');\r\n            measureTooltipElement.className = 'ol-tooltip ol-tooltip-measure';\r\n            measureTooltip = new Overlay({\r\n                element: measureTooltipElement,\r\n                offset: [0, -15],\r\n                positioning: 'bottom-center'\r\n            });\r\n            map.addOverlay(measureTooltip);\r\n        }\r\n\r\n        addInteraction();\r\n\r\n    },\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}