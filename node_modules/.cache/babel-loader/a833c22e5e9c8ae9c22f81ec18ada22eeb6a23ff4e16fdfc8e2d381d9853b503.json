{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/geom/MultiLineString\n */\nimport LineString from './LineString.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { arrayMaxSquaredDelta, assignClosestArrayPoint } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinatesArray } from './flat/deflate.js';\nimport { douglasPeuckerArray } from './flat/simplify.js';\nimport { extend } from '../array.js';\nimport { inflateCoordinatesArray } from './flat/inflate.js';\nimport { interpolatePoint, lineStringsCoordinateAtM } from './flat/interpolate.js';\nimport { intersectsLineStringArray } from './flat/intersectsextent.js';\n\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @api\n */\nclass MultiLineString extends SimpleGeometry {\n  /**\n   * @param {Array<Array<import(\"../coordinate.js\").Coordinate>|LineString>|Array<number>} coordinates\n   *     Coordinates or LineString geometries. (For internal use, flat coordinates in\n   *     combination with `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Flat coordinate ends for internal use.\n   */\n  constructor(coordinates, layout, ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n    if (Array.isArray(coordinates[0])) {\n      this.setCoordinates( /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */\n      coordinates, layout);\n    } else if (layout !== undefined && ends) {\n      this.setFlatCoordinates(layout, /** @type {Array<number>} */coordinates);\n      this.ends_ = ends;\n    } else {\n      let layout = this.getLayout();\n      const lineStrings = /** @type {Array<LineString>} */coordinates;\n      const flatCoordinates = [];\n      const ends = [];\n      for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n        const lineString = lineStrings[i];\n        if (i === 0) {\n          layout = lineString.getLayout();\n        }\n        extend(flatCoordinates, lineString.getFlatCoordinates());\n        ends.push(flatCoordinates.length);\n      }\n      this.setFlatCoordinates(layout, flatCoordinates);\n      this.ends_ = ends;\n    }\n  }\n\n  /**\n   * Append the passed linestring to the multilinestring.\n   * @param {LineString} lineString LineString.\n   * @api\n   */\n  appendLineString(lineString) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = lineString.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiLineString} Clone.\n   * @api\n   */\n  clone() {\n    const multiLineString = new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n    multiLineString.applyProperties(this);\n    return multiLineString;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * `interpolate` controls interpolation between consecutive LineStrings\n   * within the MultiLineString. If `interpolate` is `true` the coordinates\n   * will be linearly interpolated between the last coordinate of one LineString\n   * and the first coordinate of the next LineString.  If `interpolate` is\n   * `false` then the function will return `null` for Ms falling between\n   * LineStrings.\n   *\n   * @param {number} m M.\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\n   * @param {boolean} [interpolate] Interpolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, extrapolate, interpolate) {\n    if (this.layout != 'XYM' && this.layout != 'XYZM' || this.flatCoordinates.length === 0) {\n      return null;\n    }\n    extrapolate = extrapolate !== undefined ? extrapolate : false;\n    interpolate = interpolate !== undefined ? interpolate : false;\n    return lineStringsCoordinateAtM(this.flatCoordinates, 0, this.ends_, this.stride, m, extrapolate, interpolate);\n  }\n\n  /**\n   * Return the coordinates of the multilinestring.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinatesArray(this.flatCoordinates, 0, this.ends_, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * Return the linestring at the specified index.\n   * @param {number} index Index.\n   * @return {LineString} LineString.\n   * @api\n   */\n  getLineString(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LineString(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n  }\n\n  /**\n   * Return the linestrings of this multilinestring.\n   * @return {Array<LineString>} LineStrings.\n   * @api\n   */\n  getLineStrings() {\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const layout = this.layout;\n    /** @type {Array<LineString>} */\n    const lineStrings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const lineString = new LineString(flatCoordinates.slice(offset, end), layout);\n      lineStrings.push(lineString);\n      offset = end;\n    }\n    return lineStrings;\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoints.\n   */\n  getFlatMidpoints() {\n    const midpoints = [];\n    const flatCoordinates = this.flatCoordinates;\n    let offset = 0;\n    const ends = this.ends_;\n    const stride = this.stride;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const midpoint = interpolatePoint(flatCoordinates, offset, end, stride, 0.5);\n      extend(midpoints, midpoint);\n      offset = end;\n    }\n    return midpoints;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {MultiLineString} Simplified MultiLineString.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = douglasPeuckerArray(this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);\n    return new MultiLineString(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'MultiLineString';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineStringArray(this.flatCoordinates, 0, this.ends_, this.stride, extent);\n  }\n\n  /**\n   * Set the coordinates of the multilinestring.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\nexport default MultiLineString;","map":{"version":3,"names":["LineString","SimpleGeometry","arrayMaxSquaredDelta","assignClosestArrayPoint","closestSquaredDistanceXY","deflateCoordinatesArray","douglasPeuckerArray","extend","inflateCoordinatesArray","interpolatePoint","lineStringsCoordinateAtM","intersectsLineStringArray","MultiLineString","constructor","coordinates","layout","ends","ends_","maxDelta_","maxDeltaRevision_","Array","isArray","setCoordinates","undefined","setFlatCoordinates","getLayout","lineStrings","flatCoordinates","i","ii","length","lineString","getFlatCoordinates","push","appendLineString","slice","changed","clone","multiLineString","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","stride","getCoordinateAtM","m","extrapolate","interpolate","getCoordinates","getEnds","getLineString","index","getLineStrings","offset","end","getFlatMidpoints","midpoints","midpoint","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEnds","getType","intersectsExtent","extent","setLayout"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/geom/MultiLineString.js"],"sourcesContent":["/**\n * @module ol/geom/MultiLineString\n */\nimport LineString from './LineString.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {douglasPeuckerArray} from './flat/simplify.js';\nimport {extend} from '../array.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {\n  interpolatePoint,\n  lineStringsCoordinateAtM,\n} from './flat/interpolate.js';\nimport {intersectsLineStringArray} from './flat/intersectsextent.js';\n\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @api\n */\nclass MultiLineString extends SimpleGeometry {\n  /**\n   * @param {Array<Array<import(\"../coordinate.js\").Coordinate>|LineString>|Array<number>} coordinates\n   *     Coordinates or LineString geometries. (For internal use, flat coordinates in\n   *     combination with `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Flat coordinate ends for internal use.\n   */\n  constructor(coordinates, layout, ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (Array.isArray(coordinates[0])) {\n      this.setCoordinates(\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\n          coordinates\n        ),\n        layout\n      );\n    } else if (layout !== undefined && ends) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n      this.ends_ = ends;\n    } else {\n      let layout = this.getLayout();\n      const lineStrings = /** @type {Array<LineString>} */ (coordinates);\n      const flatCoordinates = [];\n      const ends = [];\n      for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n        const lineString = lineStrings[i];\n        if (i === 0) {\n          layout = lineString.getLayout();\n        }\n        extend(flatCoordinates, lineString.getFlatCoordinates());\n        ends.push(flatCoordinates.length);\n      }\n      this.setFlatCoordinates(layout, flatCoordinates);\n      this.ends_ = ends;\n    }\n  }\n\n  /**\n   * Append the passed linestring to the multilinestring.\n   * @param {LineString} lineString LineString.\n   * @api\n   */\n  appendLineString(lineString) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = lineString.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiLineString} Clone.\n   * @api\n   */\n  clone() {\n    const multiLineString = new MultiLineString(\n      this.flatCoordinates.slice(),\n      this.layout,\n      this.ends_.slice()\n    );\n    multiLineString.applyProperties(this);\n    return multiLineString;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        arrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.ends_,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      this.maxDelta_,\n      false,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * `interpolate` controls interpolation between consecutive LineStrings\n   * within the MultiLineString. If `interpolate` is `true` the coordinates\n   * will be linearly interpolated between the last coordinate of one LineString\n   * and the first coordinate of the next LineString.  If `interpolate` is\n   * `false` then the function will return `null` for Ms falling between\n   * LineStrings.\n   *\n   * @param {number} m M.\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\n   * @param {boolean} [interpolate] Interpolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, extrapolate, interpolate) {\n    if (\n      (this.layout != 'XYM' && this.layout != 'XYZM') ||\n      this.flatCoordinates.length === 0\n    ) {\n      return null;\n    }\n    extrapolate = extrapolate !== undefined ? extrapolate : false;\n    interpolate = interpolate !== undefined ? interpolate : false;\n    return lineStringsCoordinateAtM(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      m,\n      extrapolate,\n      interpolate\n    );\n  }\n\n  /**\n   * Return the coordinates of the multilinestring.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride\n    );\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * Return the linestring at the specified index.\n   * @param {number} index Index.\n   * @return {LineString} LineString.\n   * @api\n   */\n  getLineString(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LineString(\n      this.flatCoordinates.slice(\n        index === 0 ? 0 : this.ends_[index - 1],\n        this.ends_[index]\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the linestrings of this multilinestring.\n   * @return {Array<LineString>} LineStrings.\n   * @api\n   */\n  getLineStrings() {\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const layout = this.layout;\n    /** @type {Array<LineString>} */\n    const lineStrings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const lineString = new LineString(\n        flatCoordinates.slice(offset, end),\n        layout\n      );\n      lineStrings.push(lineString);\n      offset = end;\n    }\n    return lineStrings;\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoints.\n   */\n  getFlatMidpoints() {\n    const midpoints = [];\n    const flatCoordinates = this.flatCoordinates;\n    let offset = 0;\n    const ends = this.ends_;\n    const stride = this.stride;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const midpoint = interpolatePoint(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        0.5\n      );\n      extend(midpoints, midpoint);\n      offset = end;\n    }\n    return midpoints;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {MultiLineString} Simplified MultiLineString.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = douglasPeuckerArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEnds\n    );\n    return new MultiLineString(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'MultiLineString';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineStringArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the multilinestring.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.ends_\n    );\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\nexport default MultiLineString;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}