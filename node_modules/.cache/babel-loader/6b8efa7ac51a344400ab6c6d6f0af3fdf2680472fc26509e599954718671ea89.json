{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/tilegrid/WMTS\n */\n\nimport TileGrid from './TileGrid.js';\nimport { get as getProjection } from '../proj.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles\n * outside this extent will be requested by {@link module:ol/source/Tile~TileSource} sources.\n * When no `origin` or `origins` are configured, the `origin` will be set to the\n * top-left corner of the extent.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e.\n * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left\n * to right and downwards. If not specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins,\n * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If\n * given, the array length should match the length of the `resolutions` array, i.e.\n * each resolution can have a different origin. Tile coordinates increase left to\n * right and downwards. If not specified, `extent` or `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each\n * resolution needs to match the zoom level. This means that even if a `minZoom`\n * is configured, the resolutions array will have a length of `maxZoom + 1`\n * @property {!Array<string>} matrixIds matrix IDs. The length of this array needs\n * to match the length of the `resolutions` array.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. The values here are the `TileMatrixWidth` and\n * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent for\n * which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. The length of\n * this array needs to match the length of the `resolutions` array.\n */\n\n/**\n * @classdesc\n * Set the grid pattern for sources accessing WMTS tiled-image servers.\n * @api\n */\nclass WMTSTileGrid extends TileGrid {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    super({\n      extent: options.extent,\n      origin: options.origin,\n      origins: options.origins,\n      resolutions: options.resolutions,\n      tileSize: options.tileSize,\n      tileSizes: options.tileSizes,\n      sizes: options.sizes\n    });\n\n    /**\n     * @private\n     * @type {!Array<string>}\n     */\n    this.matrixIds_ = options.matrixIds;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @return {string} MatrixId..\n   */\n  getMatrixId(z) {\n    return this.matrixIds_[z];\n  }\n\n  /**\n   * Get the list of matrix identifiers.\n   * @return {Array<string>} MatrixIds.\n   * @api\n   */\n  getMatrixIds() {\n    return this.matrixIds_;\n  }\n}\nexport default WMTSTileGrid;\n\n/**\n * Create a tile grid from a WMTS capabilities matrix set and an\n * optional TileMatrixSetLimits.\n * @param {Object} matrixSet An object representing a matrixSet in the\n *     capabilities document.\n * @param {import(\"../extent.js\").Extent} [extent] An optional extent to restrict the tile\n *     ranges the server provides.\n * @param {Array<Object>} [matrixLimits] An optional object representing\n *     the available matrices for tileGrid.\n * @return {WMTSTileGrid} WMTS tileGrid instance.\n * @api\n */\nexport function createFromCapabilitiesMatrixSet(matrixSet, extent, matrixLimits) {\n  /** @type {!Array<number>} */\n  const resolutions = [];\n  /** @type {!Array<string>} */\n  const matrixIds = [];\n  /** @type {!Array<import(\"../coordinate.js\").Coordinate>} */\n  const origins = [];\n  /** @type {!Array<number|import(\"../size.js\").Size>} */\n  const tileSizes = [];\n  /** @type {!Array<import(\"../size.js\").Size>} */\n  const sizes = [];\n  matrixLimits = matrixLimits !== undefined ? matrixLimits : [];\n  const supportedCRSPropName = 'SupportedCRS';\n  const matrixIdsPropName = 'TileMatrix';\n  const identifierPropName = 'Identifier';\n  const scaleDenominatorPropName = 'ScaleDenominator';\n  const topLeftCornerPropName = 'TopLeftCorner';\n  const tileWidthPropName = 'TileWidth';\n  const tileHeightPropName = 'TileHeight';\n  const code = matrixSet[supportedCRSPropName];\n  const projection = getProjection(code);\n  const metersPerUnit = projection.getMetersPerUnit();\n  // swap origin x and y coordinates if axis orientation is lat/long\n  const switchOriginXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n  matrixSet[matrixIdsPropName].sort(function (a, b) {\n    return b[scaleDenominatorPropName] - a[scaleDenominatorPropName];\n  });\n  matrixSet[matrixIdsPropName].forEach(function (elt) {\n    let matrixAvailable;\n    // use of matrixLimits to filter TileMatrices from GetCapabilities\n    // TileMatrixSet from unavailable matrix levels.\n    if (matrixLimits.length > 0) {\n      matrixAvailable = matrixLimits.find(function (elt_ml) {\n        if (elt[identifierPropName] == elt_ml[matrixIdsPropName]) {\n          return true;\n        }\n        // Fallback for tileMatrix identifiers that don't get prefixed\n        // by their tileMatrixSet identifiers.\n        if (!elt[identifierPropName].includes(':')) {\n          return matrixSet[identifierPropName] + ':' + elt[identifierPropName] === elt_ml[matrixIdsPropName];\n        }\n        return false;\n      });\n    } else {\n      matrixAvailable = true;\n    }\n    if (matrixAvailable) {\n      matrixIds.push(elt[identifierPropName]);\n      const resolution = elt[scaleDenominatorPropName] * 0.28e-3 / metersPerUnit;\n      const tileWidth = elt[tileWidthPropName];\n      const tileHeight = elt[tileHeightPropName];\n      if (switchOriginXY) {\n        origins.push([elt[topLeftCornerPropName][1], elt[topLeftCornerPropName][0]]);\n      } else {\n        origins.push(elt[topLeftCornerPropName]);\n      }\n      resolutions.push(resolution);\n      tileSizes.push(tileWidth == tileHeight ? tileWidth : [tileWidth, tileHeight]);\n      sizes.push([elt['MatrixWidth'], elt['MatrixHeight']]);\n    }\n  });\n  return new WMTSTileGrid({\n    extent: extent,\n    origins: origins,\n    resolutions: resolutions,\n    matrixIds: matrixIds,\n    tileSizes: tileSizes,\n    sizes: sizes\n  });\n}","map":{"version":3,"names":["TileGrid","get","getProjection","WMTSTileGrid","constructor","options","extent","origin","origins","resolutions","tileSize","tileSizes","sizes","matrixIds_","matrixIds","getMatrixId","z","getMatrixIds","createFromCapabilitiesMatrixSet","matrixSet","matrixLimits","undefined","supportedCRSPropName","matrixIdsPropName","identifierPropName","scaleDenominatorPropName","topLeftCornerPropName","tileWidthPropName","tileHeightPropName","code","projection","metersPerUnit","getMetersPerUnit","switchOriginXY","getAxisOrientation","substr","sort","a","b","forEach","elt","matrixAvailable","length","find","elt_ml","includes","push","resolution","tileWidth","tileHeight"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/tilegrid/WMTS.js"],"sourcesContent":["/**\n * @module ol/tilegrid/WMTS\n */\n\nimport TileGrid from './TileGrid.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles\n * outside this extent will be requested by {@link module:ol/source/Tile~TileSource} sources.\n * When no `origin` or `origins` are configured, the `origin` will be set to the\n * top-left corner of the extent.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e.\n * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left\n * to right and downwards. If not specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins,\n * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If\n * given, the array length should match the length of the `resolutions` array, i.e.\n * each resolution can have a different origin. Tile coordinates increase left to\n * right and downwards. If not specified, `extent` or `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each\n * resolution needs to match the zoom level. This means that even if a `minZoom`\n * is configured, the resolutions array will have a length of `maxZoom + 1`\n * @property {!Array<string>} matrixIds matrix IDs. The length of this array needs\n * to match the length of the `resolutions` array.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. The values here are the `TileMatrixWidth` and\n * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent for\n * which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. The length of\n * this array needs to match the length of the `resolutions` array.\n */\n\n/**\n * @classdesc\n * Set the grid pattern for sources accessing WMTS tiled-image servers.\n * @api\n */\nclass WMTSTileGrid extends TileGrid {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    super({\n      extent: options.extent,\n      origin: options.origin,\n      origins: options.origins,\n      resolutions: options.resolutions,\n      tileSize: options.tileSize,\n      tileSizes: options.tileSizes,\n      sizes: options.sizes,\n    });\n\n    /**\n     * @private\n     * @type {!Array<string>}\n     */\n    this.matrixIds_ = options.matrixIds;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @return {string} MatrixId..\n   */\n  getMatrixId(z) {\n    return this.matrixIds_[z];\n  }\n\n  /**\n   * Get the list of matrix identifiers.\n   * @return {Array<string>} MatrixIds.\n   * @api\n   */\n  getMatrixIds() {\n    return this.matrixIds_;\n  }\n}\n\nexport default WMTSTileGrid;\n\n/**\n * Create a tile grid from a WMTS capabilities matrix set and an\n * optional TileMatrixSetLimits.\n * @param {Object} matrixSet An object representing a matrixSet in the\n *     capabilities document.\n * @param {import(\"../extent.js\").Extent} [extent] An optional extent to restrict the tile\n *     ranges the server provides.\n * @param {Array<Object>} [matrixLimits] An optional object representing\n *     the available matrices for tileGrid.\n * @return {WMTSTileGrid} WMTS tileGrid instance.\n * @api\n */\nexport function createFromCapabilitiesMatrixSet(\n  matrixSet,\n  extent,\n  matrixLimits\n) {\n  /** @type {!Array<number>} */\n  const resolutions = [];\n  /** @type {!Array<string>} */\n  const matrixIds = [];\n  /** @type {!Array<import(\"../coordinate.js\").Coordinate>} */\n  const origins = [];\n  /** @type {!Array<number|import(\"../size.js\").Size>} */\n  const tileSizes = [];\n  /** @type {!Array<import(\"../size.js\").Size>} */\n  const sizes = [];\n\n  matrixLimits = matrixLimits !== undefined ? matrixLimits : [];\n\n  const supportedCRSPropName = 'SupportedCRS';\n  const matrixIdsPropName = 'TileMatrix';\n  const identifierPropName = 'Identifier';\n  const scaleDenominatorPropName = 'ScaleDenominator';\n  const topLeftCornerPropName = 'TopLeftCorner';\n  const tileWidthPropName = 'TileWidth';\n  const tileHeightPropName = 'TileHeight';\n\n  const code = matrixSet[supportedCRSPropName];\n  const projection = getProjection(code);\n  const metersPerUnit = projection.getMetersPerUnit();\n  // swap origin x and y coordinates if axis orientation is lat/long\n  const switchOriginXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n\n  matrixSet[matrixIdsPropName].sort(function (a, b) {\n    return b[scaleDenominatorPropName] - a[scaleDenominatorPropName];\n  });\n\n  matrixSet[matrixIdsPropName].forEach(function (elt) {\n    let matrixAvailable;\n    // use of matrixLimits to filter TileMatrices from GetCapabilities\n    // TileMatrixSet from unavailable matrix levels.\n    if (matrixLimits.length > 0) {\n      matrixAvailable = matrixLimits.find(function (elt_ml) {\n        if (elt[identifierPropName] == elt_ml[matrixIdsPropName]) {\n          return true;\n        }\n        // Fallback for tileMatrix identifiers that don't get prefixed\n        // by their tileMatrixSet identifiers.\n        if (!elt[identifierPropName].includes(':')) {\n          return (\n            matrixSet[identifierPropName] + ':' + elt[identifierPropName] ===\n            elt_ml[matrixIdsPropName]\n          );\n        }\n        return false;\n      });\n    } else {\n      matrixAvailable = true;\n    }\n\n    if (matrixAvailable) {\n      matrixIds.push(elt[identifierPropName]);\n      const resolution =\n        (elt[scaleDenominatorPropName] * 0.28e-3) / metersPerUnit;\n      const tileWidth = elt[tileWidthPropName];\n      const tileHeight = elt[tileHeightPropName];\n      if (switchOriginXY) {\n        origins.push([\n          elt[topLeftCornerPropName][1],\n          elt[topLeftCornerPropName][0],\n        ]);\n      } else {\n        origins.push(elt[topLeftCornerPropName]);\n      }\n      resolutions.push(resolution);\n      tileSizes.push(\n        tileWidth == tileHeight ? tileWidth : [tileWidth, tileHeight]\n      );\n      sizes.push([elt['MatrixWidth'], elt['MatrixHeight']]);\n    }\n  });\n\n  return new WMTSTileGrid({\n    extent: extent,\n    origins: origins,\n    resolutions: resolutions,\n    matrixIds: matrixIds,\n    tileSizes: tileSizes,\n    sizes: sizes,\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}