{"ast":null,"code":"/**\n * @module ol/centerconstraint\n */\nimport { clamp } from './math.js';\n\n/**\n * @typedef {function((import(\"./coordinate.js\").Coordinate|undefined), number, import(\"./size.js\").Size, boolean=, Array<number>=): (import(\"./coordinate.js\").Coordinate|undefined)} Type\n */\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.\n * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent\n * (only during interaction and animation).\n * @return {Type} The constraint.\n */\nexport function createExtent(extent, onlyCenter, smooth) {\n  return (\n    /**\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n     * @param {number|undefined} resolution Resolution.\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @param {Array<number>} [centerShift] Shift between map center and viewport center.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n     */\n    function (center, resolution, size, isMoving, centerShift) {\n      if (!center) {\n        return undefined;\n      }\n      if (!resolution && !onlyCenter) {\n        return center;\n      }\n      const viewWidth = onlyCenter ? 0 : size[0] * resolution;\n      const viewHeight = onlyCenter ? 0 : size[1] * resolution;\n      const shiftX = centerShift ? centerShift[0] : 0;\n      const shiftY = centerShift ? centerShift[1] : 0;\n      let minX = extent[0] + viewWidth / 2 + shiftX;\n      let maxX = extent[2] - viewWidth / 2 + shiftX;\n      let minY = extent[1] + viewHeight / 2 + shiftY;\n      let maxY = extent[3] - viewHeight / 2 + shiftY;\n\n      // note: when zooming out of bounds, min and max values for x and y may\n      // end up inverted (min > max); this has to be accounted for\n      if (minX > maxX) {\n        minX = (maxX + minX) / 2;\n        maxX = minX;\n      }\n      if (minY > maxY) {\n        minY = (maxY + minY) / 2;\n        maxY = minY;\n      }\n      let x = clamp(center[0], minX, maxX);\n      let y = clamp(center[1], minY, maxY);\n\n      // during an interaction, allow some overscroll\n      if (isMoving && smooth && resolution) {\n        const ratio = 30 * resolution;\n        x += -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) + ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\n        y += -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) + ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\n      }\n      return [x, y];\n    }\n  );\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} [center] Center.\n * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n */\nexport function none(center) {\n  return center;\n}","map":{"version":3,"names":["clamp","createExtent","extent","onlyCenter","smooth","center","resolution","size","isMoving","centerShift","undefined","viewWidth","viewHeight","shiftX","shiftY","minX","maxX","minY","maxY","x","y","ratio","Math","log","max","none"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/centerconstraint.js"],"sourcesContent":["/**\n * @module ol/centerconstraint\n */\nimport {clamp} from './math.js';\n\n/**\n * @typedef {function((import(\"./coordinate.js\").Coordinate|undefined), number, import(\"./size.js\").Size, boolean=, Array<number>=): (import(\"./coordinate.js\").Coordinate|undefined)} Type\n */\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.\n * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent\n * (only during interaction and animation).\n * @return {Type} The constraint.\n */\nexport function createExtent(extent, onlyCenter, smooth) {\n  return (\n    /**\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n     * @param {number|undefined} resolution Resolution.\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @param {Array<number>} [centerShift] Shift between map center and viewport center.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n     */\n    function (center, resolution, size, isMoving, centerShift) {\n      if (!center) {\n        return undefined;\n      }\n      if (!resolution && !onlyCenter) {\n        return center;\n      }\n      const viewWidth = onlyCenter ? 0 : size[0] * resolution;\n      const viewHeight = onlyCenter ? 0 : size[1] * resolution;\n      const shiftX = centerShift ? centerShift[0] : 0;\n      const shiftY = centerShift ? centerShift[1] : 0;\n      let minX = extent[0] + viewWidth / 2 + shiftX;\n      let maxX = extent[2] - viewWidth / 2 + shiftX;\n      let minY = extent[1] + viewHeight / 2 + shiftY;\n      let maxY = extent[3] - viewHeight / 2 + shiftY;\n\n      // note: when zooming out of bounds, min and max values for x and y may\n      // end up inverted (min > max); this has to be accounted for\n      if (minX > maxX) {\n        minX = (maxX + minX) / 2;\n        maxX = minX;\n      }\n      if (minY > maxY) {\n        minY = (maxY + minY) / 2;\n        maxY = minY;\n      }\n\n      let x = clamp(center[0], minX, maxX);\n      let y = clamp(center[1], minY, maxY);\n\n      // during an interaction, allow some overscroll\n      if (isMoving && smooth && resolution) {\n        const ratio = 30 * resolution;\n        x +=\n          -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +\n          ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\n        y +=\n          -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +\n          ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\n      }\n\n      return [x, y];\n    }\n  );\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} [center] Center.\n * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n */\nexport function none(center) {\n  return center;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}