{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/control/ScaleLine\n */\nimport Control from './Control.js';\nimport { CLASS_UNSELECTABLE } from '../css.js';\nimport { METERS_PER_UNIT, getPointResolution } from '../proj.js';\n\n/**\n * @type {string}\n */\nconst UNITS_PROP = 'units';\n\n/**\n * @typedef {'degrees' | 'imperial' | 'nautical' | 'metric' | 'us'} Units\n * Units for the scale line.\n */\n\n/**\n * @const\n * @type {Array<number>}\n */\nconst LEADING_DIGITS = [1, 2, 5];\n\n/**\n * @const\n * @type {number}\n */\nconst DEFAULT_DPI = 25.4 / 0.28;\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:units', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |'change:units', Return>} ScaleLineOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className] CSS class name. The default is `ol-scale-bar` when configured with\n * `bar: true`. Otherwise the default is `ol-scale-line`.\n * @property {number} [minWidth=64] Minimum width in pixels at the OGC default dpi. The width will be\n * adjusted to match the dpi used.\n * @property {number} [maxWidth] Maximum width in pixels at the OGC default dpi. The width will be\n * adjusted to match the dpi used.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {Units} [units='metric'] Units.\n * @property {boolean} [bar=false] Render scalebars instead of a line.\n * @property {number} [steps=4] Number of steps the scalebar should use. Use even numbers\n * for best results. Only applies when `bar` is `true`.\n * @property {boolean} [text=false] Render the text scale above of the scalebar. Only applies\n * when `bar` is `true`.\n * @property {number|undefined} [dpi=undefined] dpi of output device such as printer. Only applies\n * when `bar` is `true`. If undefined the OGC default screen pixel size of 0.28mm will be assumed.\n */\n\n/**\n * @classdesc\n * A control displaying rough y-axis distances, calculated for the center of the\n * viewport. For conformal projections (e.g. EPSG:3857, the default view\n * projection in OpenLayers), the scale is valid for all directions.\n * No scale line will be shown when the y-axis distance of a pixel at the\n * viewport center cannot be calculated in the view projection.\n * By default the scale line will show in the bottom left portion of the map,\n * but this can be changed by using the css selector `.ol-scale-line`.\n * When specifying `bar` as `true`, a scalebar will be rendered instead\n * of a scaleline.\n *\n * @api\n */\nclass ScaleLine extends Control {\n  /**\n   * @param {Options} [options] Scale line options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    const element = document.createElement('div');\n    element.style.pointerEvents = 'none';\n    super({\n      element: element,\n      render: options.render,\n      target: options.target\n    });\n\n    /***\n     * @type {ScaleLineOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ScaleLineOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ScaleLineOnSignature<void>}\n     */\n    this.un;\n    const className = options.className !== undefined ? options.className : options.bar ? 'ol-scale-bar' : 'ol-scale-line';\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.innerElement_ = document.createElement('div');\n    this.innerElement_.className = className + '-inner';\n    this.element.className = className + ' ' + CLASS_UNSELECTABLE;\n    this.element.appendChild(this.innerElement_);\n\n    /**\n     * @private\n     * @type {?import(\"../View.js\").State}\n     */\n    this.viewState_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.maxWidth_ = options.maxWidth;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = false;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.renderedWidth_ = undefined;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.renderedHTML_ = '';\n    this.addChangeListener(UNITS_PROP, this.handleUnitsChanged_);\n    this.setUnits(options.units || 'metric');\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.scaleBar_ = options.bar || false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.scaleBarSteps_ = options.steps || 4;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.scaleBarText_ = options.text || false;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.dpi_ = options.dpi || undefined;\n  }\n\n  /**\n   * Return the units to use in the scale line.\n   * @return {Units} The units\n   * to use in the scale line.\n   * @observable\n   * @api\n   */\n  getUnits() {\n    return this.get(UNITS_PROP);\n  }\n\n  /**\n   * @private\n   */\n  handleUnitsChanged_() {\n    this.updateElement_();\n  }\n\n  /**\n   * Set the units to use in the scale line.\n   * @param {Units} units The units to use in the scale line.\n   * @observable\n   * @api\n   */\n  setUnits(units) {\n    this.set(UNITS_PROP, units);\n  }\n\n  /**\n   * Specify the dpi of output device such as printer.\n   * @param {number|undefined} dpi The dpi of output device.\n   * @api\n   */\n  setDpi(dpi) {\n    this.dpi_ = dpi;\n  }\n\n  /**\n   * @private\n   */\n  updateElement_() {\n    const viewState = this.viewState_;\n    if (!viewState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n    const center = viewState.center;\n    const projection = viewState.projection;\n    const units = this.getUnits();\n    const pointResolutionUnits = units == 'degrees' ? 'degrees' : 'm';\n    let pointResolution = getPointResolution(projection, viewState.resolution, center, pointResolutionUnits);\n    const minWidth = this.minWidth_ * (this.dpi_ || DEFAULT_DPI) / DEFAULT_DPI;\n    const maxWidth = this.maxWidth_ !== undefined ? this.maxWidth_ * (this.dpi_ || DEFAULT_DPI) / DEFAULT_DPI : undefined;\n    let nominalCount = minWidth * pointResolution;\n    let suffix = '';\n    if (units == 'degrees') {\n      const metersPerDegree = METERS_PER_UNIT.degrees;\n      nominalCount *= metersPerDegree;\n      if (nominalCount < metersPerDegree / 60) {\n        suffix = '\\u2033'; // seconds\n        pointResolution *= 3600;\n      } else if (nominalCount < metersPerDegree) {\n        suffix = '\\u2032'; // minutes\n        pointResolution *= 60;\n      } else {\n        suffix = '\\u00b0'; // degrees\n      }\n    } else if (units == 'imperial') {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution /= 0.0254;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.3048;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.344;\n      }\n    } else if (units == 'nautical') {\n      pointResolution /= 1852;\n      suffix = 'NM';\n    } else if (units == 'metric') {\n      if (nominalCount < 0.001) {\n        suffix = 'Î¼m';\n        pointResolution *= 1000000;\n      } else if (nominalCount < 1) {\n        suffix = 'mm';\n        pointResolution *= 1000;\n      } else if (nominalCount < 1000) {\n        suffix = 'm';\n      } else {\n        suffix = 'km';\n        pointResolution /= 1000;\n      }\n    } else if (units == 'us') {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution *= 39.37;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.30480061;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.3472;\n      }\n    } else {\n      throw new Error('Invalid units');\n    }\n    let i = 3 * Math.floor(Math.log(minWidth * pointResolution) / Math.log(10));\n    let count, width, decimalCount;\n    let previousCount, previousWidth, previousDecimalCount;\n    while (true) {\n      decimalCount = Math.floor(i / 3);\n      const decimal = Math.pow(10, decimalCount);\n      count = LEADING_DIGITS[(i % 3 + 3) % 3] * decimal;\n      width = Math.round(count / pointResolution);\n      if (isNaN(width)) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n        return;\n      }\n      if (maxWidth !== undefined && width >= maxWidth) {\n        count = previousCount;\n        width = previousWidth;\n        decimalCount = previousDecimalCount;\n        break;\n      } else if (width >= minWidth) {\n        break;\n      }\n      previousCount = count;\n      previousWidth = width;\n      previousDecimalCount = decimalCount;\n      ++i;\n    }\n    const html = this.scaleBar_ ? this.createScaleBar(width, count, suffix) : count.toFixed(decimalCount < 0 ? -decimalCount : 0) + ' ' + suffix;\n    if (this.renderedHTML_ != html) {\n      this.innerElement_.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n    if (this.renderedWidth_ != width) {\n      this.innerElement_.style.width = width + 'px';\n      this.renderedWidth_ = width;\n    }\n    if (!this.renderedVisible_) {\n      this.element.style.display = '';\n      this.renderedVisible_ = true;\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} width The current width of the scalebar.\n   * @param {number} scale The current scale.\n   * @param {string} suffix The suffix to append to the scale text.\n   * @return {string} The stringified HTML of the scalebar.\n   */\n  createScaleBar(width, scale, suffix) {\n    const resolutionScale = this.getScaleForResolution();\n    const mapScale = resolutionScale < 1 ? Math.round(1 / resolutionScale).toLocaleString() + ' : 1' : '1 : ' + Math.round(resolutionScale).toLocaleString();\n    const steps = this.scaleBarSteps_;\n    const stepWidth = width / steps;\n    const scaleSteps = [this.createMarker('absolute')];\n    for (let i = 0; i < steps; ++i) {\n      const cls = i % 2 === 0 ? 'ol-scale-singlebar-odd' : 'ol-scale-singlebar-even';\n      scaleSteps.push('<div>' + '<div ' + `class=\"ol-scale-singlebar ${cls}\" ` + `style=\"width: ${stepWidth}px;\"` + '>' + '</div>' + this.createMarker('relative') + (\n      // render text every second step, except when only 2 steps\n      i % 2 === 0 || steps === 2 ? this.createStepText(i, width, false, scale, suffix) : '') + '</div>');\n    }\n    // render text at the end\n    scaleSteps.push(this.createStepText(steps, width, true, scale, suffix));\n    const scaleBarText = this.scaleBarText_ ? `<div class=\"ol-scale-text\" style=\"width: ${width}px;\">` + mapScale + '</div>' : '';\n    return scaleBarText + scaleSteps.join('');\n  }\n\n  /**\n   * Creates a marker at given position\n   * @param {'absolute'|'relative'} position The position, absolute or relative\n   * @return {string} The stringified div containing the marker\n   */\n  createMarker(position) {\n    const top = position === 'absolute' ? 3 : -10;\n    return '<div ' + 'class=\"ol-scale-step-marker\" ' + `style=\"position: ${position}; top: ${top}px;\"` + '></div>';\n  }\n\n  /**\n   * Creates the label for a marker marker at given position\n   * @param {number} i The iterator\n   * @param {number} width The width the scalebar will currently use\n   * @param {boolean} isLast Flag indicating if we add the last step text\n   * @param {number} scale The current scale for the whole scalebar\n   * @param {string} suffix The suffix for the scale\n   * @return {string} The stringified div containing the step text\n   */\n  createStepText(i, width, isLast, scale, suffix) {\n    const length = i === 0 ? 0 : Math.round(scale / this.scaleBarSteps_ * i * 100) / 100;\n    const lengthString = length + (i === 0 ? '' : ' ' + suffix);\n    const margin = i === 0 ? -3 : width / this.scaleBarSteps_ * -1;\n    const minWidth = i === 0 ? 0 : width / this.scaleBarSteps_ * 2;\n    return '<div ' + 'class=\"ol-scale-step-text\" ' + 'style=\"' + `margin-left: ${margin}px;` + `text-align: ${i === 0 ? 'left' : 'center'};` + `min-width: ${minWidth}px;` + `left: ${isLast ? width + 'px' : 'unset'};` + '\">' + lengthString + '</div>';\n  }\n\n  /**\n   * Returns the appropriate scale for the given resolution and units.\n   * @return {number} The appropriate scale.\n   */\n  getScaleForResolution() {\n    const resolution = getPointResolution(this.viewState_.projection, this.viewState_.resolution, this.viewState_.center, 'm');\n    const dpi = this.dpi_ || DEFAULT_DPI;\n    const inchesPerMeter = 1000 / 25.4;\n    return resolution * inchesPerMeter * dpi;\n  }\n\n  /**\n   * Update the scale line element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    const frameState = mapEvent.frameState;\n    if (!frameState) {\n      this.viewState_ = null;\n    } else {\n      this.viewState_ = frameState.viewState;\n    }\n    this.updateElement_();\n  }\n}\nexport default ScaleLine;","map":{"version":3,"names":["Control","CLASS_UNSELECTABLE","METERS_PER_UNIT","getPointResolution","UNITS_PROP","LEADING_DIGITS","DEFAULT_DPI","ScaleLine","constructor","options","element","document","createElement","style","pointerEvents","render","target","on","once","un","className","undefined","bar","innerElement_","appendChild","viewState_","minWidth_","minWidth","maxWidth_","maxWidth","renderedVisible_","renderedWidth_","renderedHTML_","addChangeListener","handleUnitsChanged_","setUnits","units","scaleBar_","scaleBarSteps_","steps","scaleBarText_","text","dpi_","dpi","getUnits","get","updateElement_","set","setDpi","viewState","display","center","projection","pointResolutionUnits","pointResolution","resolution","nominalCount","suffix","metersPerDegree","degrees","Error","i","Math","floor","log","count","width","decimalCount","previousCount","previousWidth","previousDecimalCount","decimal","pow","round","isNaN","html","createScaleBar","toFixed","innerHTML","scale","resolutionScale","getScaleForResolution","mapScale","toLocaleString","stepWidth","scaleSteps","createMarker","cls","push","createStepText","scaleBarText","join","position","top","isLast","length","lengthString","margin","inchesPerMeter","mapEvent","frameState"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/control/ScaleLine.js"],"sourcesContent":["/**\n * @module ol/control/ScaleLine\n */\nimport Control from './Control.js';\nimport {CLASS_UNSELECTABLE} from '../css.js';\nimport {METERS_PER_UNIT, getPointResolution} from '../proj.js';\n\n/**\n * @type {string}\n */\nconst UNITS_PROP = 'units';\n\n/**\n * @typedef {'degrees' | 'imperial' | 'nautical' | 'metric' | 'us'} Units\n * Units for the scale line.\n */\n\n/**\n * @const\n * @type {Array<number>}\n */\nconst LEADING_DIGITS = [1, 2, 5];\n\n/**\n * @const\n * @type {number}\n */\nconst DEFAULT_DPI = 25.4 / 0.28;\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:units', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |'change:units', Return>} ScaleLineOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className] CSS class name. The default is `ol-scale-bar` when configured with\n * `bar: true`. Otherwise the default is `ol-scale-line`.\n * @property {number} [minWidth=64] Minimum width in pixels at the OGC default dpi. The width will be\n * adjusted to match the dpi used.\n * @property {number} [maxWidth] Maximum width in pixels at the OGC default dpi. The width will be\n * adjusted to match the dpi used.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {Units} [units='metric'] Units.\n * @property {boolean} [bar=false] Render scalebars instead of a line.\n * @property {number} [steps=4] Number of steps the scalebar should use. Use even numbers\n * for best results. Only applies when `bar` is `true`.\n * @property {boolean} [text=false] Render the text scale above of the scalebar. Only applies\n * when `bar` is `true`.\n * @property {number|undefined} [dpi=undefined] dpi of output device such as printer. Only applies\n * when `bar` is `true`. If undefined the OGC default screen pixel size of 0.28mm will be assumed.\n */\n\n/**\n * @classdesc\n * A control displaying rough y-axis distances, calculated for the center of the\n * viewport. For conformal projections (e.g. EPSG:3857, the default view\n * projection in OpenLayers), the scale is valid for all directions.\n * No scale line will be shown when the y-axis distance of a pixel at the\n * viewport center cannot be calculated in the view projection.\n * By default the scale line will show in the bottom left portion of the map,\n * but this can be changed by using the css selector `.ol-scale-line`.\n * When specifying `bar` as `true`, a scalebar will be rendered instead\n * of a scaleline.\n *\n * @api\n */\nclass ScaleLine extends Control {\n  /**\n   * @param {Options} [options] Scale line options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const element = document.createElement('div');\n    element.style.pointerEvents = 'none';\n\n    super({\n      element: element,\n      render: options.render,\n      target: options.target,\n    });\n\n    /***\n     * @type {ScaleLineOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ScaleLineOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ScaleLineOnSignature<void>}\n     */\n    this.un;\n\n    const className =\n      options.className !== undefined\n        ? options.className\n        : options.bar\n        ? 'ol-scale-bar'\n        : 'ol-scale-line';\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.innerElement_ = document.createElement('div');\n    this.innerElement_.className = className + '-inner';\n\n    this.element.className = className + ' ' + CLASS_UNSELECTABLE;\n    this.element.appendChild(this.innerElement_);\n\n    /**\n     * @private\n     * @type {?import(\"../View.js\").State}\n     */\n    this.viewState_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.maxWidth_ = options.maxWidth;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = false;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.renderedWidth_ = undefined;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.renderedHTML_ = '';\n\n    this.addChangeListener(UNITS_PROP, this.handleUnitsChanged_);\n\n    this.setUnits(options.units || 'metric');\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.scaleBar_ = options.bar || false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.scaleBarSteps_ = options.steps || 4;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.scaleBarText_ = options.text || false;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.dpi_ = options.dpi || undefined;\n  }\n\n  /**\n   * Return the units to use in the scale line.\n   * @return {Units} The units\n   * to use in the scale line.\n   * @observable\n   * @api\n   */\n  getUnits() {\n    return this.get(UNITS_PROP);\n  }\n\n  /**\n   * @private\n   */\n  handleUnitsChanged_() {\n    this.updateElement_();\n  }\n\n  /**\n   * Set the units to use in the scale line.\n   * @param {Units} units The units to use in the scale line.\n   * @observable\n   * @api\n   */\n  setUnits(units) {\n    this.set(UNITS_PROP, units);\n  }\n\n  /**\n   * Specify the dpi of output device such as printer.\n   * @param {number|undefined} dpi The dpi of output device.\n   * @api\n   */\n  setDpi(dpi) {\n    this.dpi_ = dpi;\n  }\n\n  /**\n   * @private\n   */\n  updateElement_() {\n    const viewState = this.viewState_;\n\n    if (!viewState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n\n    const center = viewState.center;\n    const projection = viewState.projection;\n    const units = this.getUnits();\n    const pointResolutionUnits = units == 'degrees' ? 'degrees' : 'm';\n    let pointResolution = getPointResolution(\n      projection,\n      viewState.resolution,\n      center,\n      pointResolutionUnits\n    );\n\n    const minWidth =\n      (this.minWidth_ * (this.dpi_ || DEFAULT_DPI)) / DEFAULT_DPI;\n\n    const maxWidth =\n      this.maxWidth_ !== undefined\n        ? (this.maxWidth_ * (this.dpi_ || DEFAULT_DPI)) / DEFAULT_DPI\n        : undefined;\n\n    let nominalCount = minWidth * pointResolution;\n    let suffix = '';\n    if (units == 'degrees') {\n      const metersPerDegree = METERS_PER_UNIT.degrees;\n      nominalCount *= metersPerDegree;\n      if (nominalCount < metersPerDegree / 60) {\n        suffix = '\\u2033'; // seconds\n        pointResolution *= 3600;\n      } else if (nominalCount < metersPerDegree) {\n        suffix = '\\u2032'; // minutes\n        pointResolution *= 60;\n      } else {\n        suffix = '\\u00b0'; // degrees\n      }\n    } else if (units == 'imperial') {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution /= 0.0254;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.3048;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.344;\n      }\n    } else if (units == 'nautical') {\n      pointResolution /= 1852;\n      suffix = 'NM';\n    } else if (units == 'metric') {\n      if (nominalCount < 0.001) {\n        suffix = 'Î¼m';\n        pointResolution *= 1000000;\n      } else if (nominalCount < 1) {\n        suffix = 'mm';\n        pointResolution *= 1000;\n      } else if (nominalCount < 1000) {\n        suffix = 'm';\n      } else {\n        suffix = 'km';\n        pointResolution /= 1000;\n      }\n    } else if (units == 'us') {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution *= 39.37;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.30480061;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.3472;\n      }\n    } else {\n      throw new Error('Invalid units');\n    }\n\n    let i = 3 * Math.floor(Math.log(minWidth * pointResolution) / Math.log(10));\n    let count, width, decimalCount;\n    let previousCount, previousWidth, previousDecimalCount;\n    while (true) {\n      decimalCount = Math.floor(i / 3);\n      const decimal = Math.pow(10, decimalCount);\n      count = LEADING_DIGITS[((i % 3) + 3) % 3] * decimal;\n      width = Math.round(count / pointResolution);\n      if (isNaN(width)) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n        return;\n      }\n      if (maxWidth !== undefined && width >= maxWidth) {\n        count = previousCount;\n        width = previousWidth;\n        decimalCount = previousDecimalCount;\n        break;\n      } else if (width >= minWidth) {\n        break;\n      }\n      previousCount = count;\n      previousWidth = width;\n      previousDecimalCount = decimalCount;\n      ++i;\n    }\n    const html = this.scaleBar_\n      ? this.createScaleBar(width, count, suffix)\n      : count.toFixed(decimalCount < 0 ? -decimalCount : 0) + ' ' + suffix;\n\n    if (this.renderedHTML_ != html) {\n      this.innerElement_.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n\n    if (this.renderedWidth_ != width) {\n      this.innerElement_.style.width = width + 'px';\n      this.renderedWidth_ = width;\n    }\n\n    if (!this.renderedVisible_) {\n      this.element.style.display = '';\n      this.renderedVisible_ = true;\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} width The current width of the scalebar.\n   * @param {number} scale The current scale.\n   * @param {string} suffix The suffix to append to the scale text.\n   * @return {string} The stringified HTML of the scalebar.\n   */\n  createScaleBar(width, scale, suffix) {\n    const resolutionScale = this.getScaleForResolution();\n    const mapScale =\n      resolutionScale < 1\n        ? Math.round(1 / resolutionScale).toLocaleString() + ' : 1'\n        : '1 : ' + Math.round(resolutionScale).toLocaleString();\n    const steps = this.scaleBarSteps_;\n    const stepWidth = width / steps;\n    const scaleSteps = [this.createMarker('absolute')];\n    for (let i = 0; i < steps; ++i) {\n      const cls =\n        i % 2 === 0 ? 'ol-scale-singlebar-odd' : 'ol-scale-singlebar-even';\n      scaleSteps.push(\n        '<div>' +\n          '<div ' +\n          `class=\"ol-scale-singlebar ${cls}\" ` +\n          `style=\"width: ${stepWidth}px;\"` +\n          '>' +\n          '</div>' +\n          this.createMarker('relative') +\n          // render text every second step, except when only 2 steps\n          (i % 2 === 0 || steps === 2\n            ? this.createStepText(i, width, false, scale, suffix)\n            : '') +\n          '</div>'\n      );\n    }\n    // render text at the end\n    scaleSteps.push(this.createStepText(steps, width, true, scale, suffix));\n\n    const scaleBarText = this.scaleBarText_\n      ? `<div class=\"ol-scale-text\" style=\"width: ${width}px;\">` +\n        mapScale +\n        '</div>'\n      : '';\n    return scaleBarText + scaleSteps.join('');\n  }\n\n  /**\n   * Creates a marker at given position\n   * @param {'absolute'|'relative'} position The position, absolute or relative\n   * @return {string} The stringified div containing the marker\n   */\n  createMarker(position) {\n    const top = position === 'absolute' ? 3 : -10;\n    return (\n      '<div ' +\n      'class=\"ol-scale-step-marker\" ' +\n      `style=\"position: ${position}; top: ${top}px;\"` +\n      '></div>'\n    );\n  }\n\n  /**\n   * Creates the label for a marker marker at given position\n   * @param {number} i The iterator\n   * @param {number} width The width the scalebar will currently use\n   * @param {boolean} isLast Flag indicating if we add the last step text\n   * @param {number} scale The current scale for the whole scalebar\n   * @param {string} suffix The suffix for the scale\n   * @return {string} The stringified div containing the step text\n   */\n  createStepText(i, width, isLast, scale, suffix) {\n    const length =\n      i === 0 ? 0 : Math.round((scale / this.scaleBarSteps_) * i * 100) / 100;\n    const lengthString = length + (i === 0 ? '' : ' ' + suffix);\n    const margin = i === 0 ? -3 : (width / this.scaleBarSteps_) * -1;\n    const minWidth = i === 0 ? 0 : (width / this.scaleBarSteps_) * 2;\n    return (\n      '<div ' +\n      'class=\"ol-scale-step-text\" ' +\n      'style=\"' +\n      `margin-left: ${margin}px;` +\n      `text-align: ${i === 0 ? 'left' : 'center'};` +\n      `min-width: ${minWidth}px;` +\n      `left: ${isLast ? width + 'px' : 'unset'};` +\n      '\">' +\n      lengthString +\n      '</div>'\n    );\n  }\n\n  /**\n   * Returns the appropriate scale for the given resolution and units.\n   * @return {number} The appropriate scale.\n   */\n  getScaleForResolution() {\n    const resolution = getPointResolution(\n      this.viewState_.projection,\n      this.viewState_.resolution,\n      this.viewState_.center,\n      'm'\n    );\n    const dpi = this.dpi_ || DEFAULT_DPI;\n    const inchesPerMeter = 1000 / 25.4;\n    return resolution * inchesPerMeter * dpi;\n  }\n\n  /**\n   * Update the scale line element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    const frameState = mapEvent.frameState;\n    if (!frameState) {\n      this.viewState_ = null;\n    } else {\n      this.viewState_ = frameState.viewState;\n    }\n    this.updateElement_();\n  }\n}\n\nexport default ScaleLine;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}