{"ast":null,"code":"/**\n * @module ol/interaction/DragRotate\n */\nimport PointerInteraction from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { altShiftKeysOnly, mouseActionButton, mouseOnly } from '../events/condition.js';\nimport { disable } from '../rotationconstraint.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */\nclass DragRotate extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      stopDown: FALSE\n    });\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : altShiftKeysOnly;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return;\n    }\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n    const size = map.getSize();\n    const offset = mapBrowserEvent.pixel;\n    const theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n    if (this.lastAngle_ !== undefined) {\n      const delta = theta - this.lastAngle_;\n      view.adjustRotationInternal(-delta);\n    }\n    this.lastAngle_ = theta;\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return true;\n    }\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    view.endInteraction(this.duration_);\n    return false;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return false;\n    }\n    if (mouseActionButton(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {\n      const map = mapBrowserEvent.map;\n      map.getView().beginInteraction();\n      this.lastAngle_ = undefined;\n      return true;\n    }\n    return false;\n  }\n}\nexport default DragRotate;","map":{"version":3,"names":["PointerInteraction","FALSE","altShiftKeysOnly","mouseActionButton","mouseOnly","disable","DragRotate","constructor","options","stopDown","condition_","condition","lastAngle_","undefined","duration_","duration","handleDragEvent","mapBrowserEvent","map","view","getView","getConstraints","rotation","size","getSize","offset","pixel","theta","Math","atan2","delta","adjustRotationInternal","handleUpEvent","endInteraction","handleDownEvent","beginInteraction"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/interaction/DragRotate.js"],"sourcesContent":["/**\n * @module ol/interaction/DragRotate\n */\nimport PointerInteraction from './Pointer.js';\nimport {FALSE} from '../functions.js';\nimport {\n  altShiftKeysOnly,\n  mouseActionButton,\n  mouseOnly,\n} from '../events/condition.js';\nimport {disable} from '../rotationconstraint.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */\nclass DragRotate extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      stopDown: FALSE,\n    });\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : altShiftKeysOnly;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return;\n    }\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n    const size = map.getSize();\n    const offset = mapBrowserEvent.pixel;\n    const theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n    if (this.lastAngle_ !== undefined) {\n      const delta = theta - this.lastAngle_;\n      view.adjustRotationInternal(-delta);\n    }\n    this.lastAngle_ = theta;\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return true;\n    }\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    view.endInteraction(this.duration_);\n    return false;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return false;\n    }\n\n    if (\n      mouseActionButton(mapBrowserEvent) &&\n      this.condition_(mapBrowserEvent)\n    ) {\n      const map = mapBrowserEvent.map;\n      map.getView().beginInteraction();\n      this.lastAngle_ = undefined;\n      return true;\n    }\n    return false;\n  }\n}\n\nexport default DragRotate;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}