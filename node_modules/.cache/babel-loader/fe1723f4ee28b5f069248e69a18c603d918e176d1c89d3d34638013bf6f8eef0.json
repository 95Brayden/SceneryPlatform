{"ast":null,"code":"/**\n * @module ol/tilegrid\n */\nimport TileGrid from './tilegrid/TileGrid.js';\nimport { DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, get as getProjection } from './proj.js';\nimport { containsCoordinate, createOrUpdate, getCorner, getHeight, getWidth } from './extent.js';\nimport { toSize } from './size.js';\n\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\nexport function getForProjection(projection) {\n  let tileGrid = projection.getDefaultTileGrid();\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n  return tileGrid;\n}\n\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n  const z = tileCoord[0];\n  const center = tileGrid.getTileCoordCenter(tileCoord);\n  const projectionExtent = extentFromProjection(projection);\n  if (!containsCoordinate(projectionExtent, center)) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  }\n  return tileCoord;\n}\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForExtent(extent, maxZoom, tileSize, corner) {\n  corner = corner !== undefined ? corner : 'top-left';\n  const resolutions = resolutionsFromExtent(extent, maxZoom, tileSize);\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: tileSize\n  });\n}\n\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions} [options] Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\nexport function createXYZ(options) {\n  const xyzOptions = options || {};\n  const extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n  const gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution)\n  };\n  return new TileGrid(gridOptions);\n}\n\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\nfunction resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {\n  maxZoom = maxZoom !== undefined ? maxZoom : DEFAULT_MAX_ZOOM;\n  tileSize = toSize(tileSize !== undefined ? tileSize : DEFAULT_TILE_SIZE);\n  const height = getHeight(extent);\n  const width = getWidth(extent);\n  maxResolution = maxResolution > 0 ? maxResolution : Math.max(width / tileSize[0], height / tileSize[1]);\n  const length = maxZoom + 1;\n  const resolutions = new Array(length);\n  for (let z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n  return resolutions;\n}\n\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForProjection(projection, maxZoom, tileSize, corner) {\n  const extent = extentFromProjection(projection);\n  return createForExtent(extent, maxZoom, tileSize, corner);\n}\n\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  let extent = projection.getExtent();\n  if (!extent) {\n    const half = 180 * METERS_PER_UNIT.degrees / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n  return extent;\n}","map":{"version":3,"names":["TileGrid","DEFAULT_MAX_ZOOM","DEFAULT_TILE_SIZE","METERS_PER_UNIT","get","getProjection","containsCoordinate","createOrUpdate","getCorner","getHeight","getWidth","toSize","getForProjection","projection","tileGrid","getDefaultTileGrid","createForProjection","setDefaultTileGrid","wrapX","tileCoord","z","center","getTileCoordCenter","projectionExtent","extentFromProjection","worldWidth","worldsAway","Math","ceil","getTileCoordForCoordAndZ","createForExtent","extent","maxZoom","tileSize","corner","undefined","resolutions","resolutionsFromExtent","origin","createXYZ","options","xyzOptions","getExtent","gridOptions","minZoom","maxResolution","height","width","max","length","Array","pow","half","degrees","getMetersPerUnit"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/tilegrid.js"],"sourcesContent":["/**\n * @module ol/tilegrid\n */\nimport TileGrid from './tilegrid/TileGrid.js';\nimport {DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {METERS_PER_UNIT, get as getProjection} from './proj.js';\nimport {\n  containsCoordinate,\n  createOrUpdate,\n  getCorner,\n  getHeight,\n  getWidth,\n} from './extent.js';\nimport {toSize} from './size.js';\n\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\nexport function getForProjection(projection) {\n  let tileGrid = projection.getDefaultTileGrid();\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n  return tileGrid;\n}\n\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n  const z = tileCoord[0];\n  const center = tileGrid.getTileCoordCenter(tileCoord);\n  const projectionExtent = extentFromProjection(projection);\n  if (!containsCoordinate(projectionExtent, center)) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.ceil(\n      (projectionExtent[0] - center[0]) / worldWidth\n    );\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  }\n  return tileCoord;\n}\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForExtent(extent, maxZoom, tileSize, corner) {\n  corner = corner !== undefined ? corner : 'top-left';\n\n  const resolutions = resolutionsFromExtent(extent, maxZoom, tileSize);\n\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: tileSize,\n  });\n}\n\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions} [options] Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\nexport function createXYZ(options) {\n  const xyzOptions = options || {};\n\n  const extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n\n  const gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(\n      extent,\n      xyzOptions.maxZoom,\n      xyzOptions.tileSize,\n      xyzOptions.maxResolution\n    ),\n  };\n  return new TileGrid(gridOptions);\n}\n\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\nfunction resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {\n  maxZoom = maxZoom !== undefined ? maxZoom : DEFAULT_MAX_ZOOM;\n  tileSize = toSize(tileSize !== undefined ? tileSize : DEFAULT_TILE_SIZE);\n\n  const height = getHeight(extent);\n  const width = getWidth(extent);\n\n  maxResolution =\n    maxResolution > 0\n      ? maxResolution\n      : Math.max(width / tileSize[0], height / tileSize[1]);\n\n  const length = maxZoom + 1;\n  const resolutions = new Array(length);\n  for (let z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n  return resolutions;\n}\n\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForProjection(projection, maxZoom, tileSize, corner) {\n  const extent = extentFromProjection(projection);\n  return createForExtent(extent, maxZoom, tileSize, corner);\n}\n\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  let extent = projection.getExtent();\n  if (!extent) {\n    const half =\n      (180 * METERS_PER_UNIT.degrees) / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n  return extent;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}