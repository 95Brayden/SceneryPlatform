{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/control/OverviewMap\n */\nimport Collection from '../Collection.js';\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport Map from '../Map.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport View from '../View.js';\nimport ViewProperty from '../ViewProperty.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { containsExtent, equals as equalsExtent, getBottomRight, getTopLeft, scaleFromCenter } from '../extent.js';\nimport { listen, listenOnce } from '../events.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\nimport { replaceNode } from '../dom.js';\n\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\nconst MAX_RATIO = 0.75;\n\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\nconst MIN_RATIO = 0.1;\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Base.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Base.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\n * a default view with the same projection as the main map will be used.\n */\n\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\nclass OverviewMap extends Control {\n  /**\n   * @param {Options} [options] OverviewMap options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target\n    });\n\n    /**\n     * @private\n     */\n    this.boundHandleRotationChanged_ = this.handleRotationChanged_.bind(this);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotateWithView_ = options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n    this.viewExtent_ = undefined;\n    const className = options.className !== undefined ? options.className : 'ol-overviewmap';\n    const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n    const collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u2039';\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n    const label = options.label !== undefined ? options.label : '\\u203A';\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n    }\n    const activeLabel = this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n    button.addEventListener(EventType.CLICK, this.handleClick_.bind(this), false);\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    this.ovmapDiv_ = document.createElement('div');\n    this.ovmapDiv_.className = 'ol-overviewmap-map';\n\n    /**\n     * Explicitly given view to be used instead of a view derived from the main map.\n     * @type {View}\n     * @private\n     */\n    this.view_ = options.view;\n    const ovmap = new Map({\n      view: options.view,\n      controls: new Collection(),\n      interactions: new Collection()\n    });\n\n    /**\n     * @type {Map}\n     * @private\n     */\n    this.ovmap_ = ovmap;\n    if (options.layers) {\n      options.layers.forEach(function (layer) {\n        ovmap.addLayer(layer);\n      });\n    }\n    const box = document.createElement('div');\n    box.className = 'ol-overviewmap-box';\n    box.style.boxSizing = 'border-box';\n\n    /**\n     * @type {import(\"../Overlay.js\").default}\n     * @private\n     */\n    this.boxOverlay_ = new Overlay({\n      position: [0, 0],\n      positioning: 'center-center',\n      element: box\n    });\n    this.ovmap_.addOverlay(this.boxOverlay_);\n    const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.ovmapDiv_);\n    element.appendChild(button);\n\n    /* Interactive map */\n\n    const scope = this;\n    const overlay = this.boxOverlay_;\n    const overlayBox = this.boxOverlay_.getElement();\n\n    /* Functions definition */\n\n    const computeDesiredMousePosition = function (mousePosition) {\n      return {\n        clientX: mousePosition.clientX,\n        clientY: mousePosition.clientY\n      };\n    };\n    const move = function (event) {\n      const position = /** @type {?} */computeDesiredMousePosition(event);\n      const coordinates = ovmap.getEventCoordinateInternal( /** @type {MouseEvent} */position);\n      overlay.setPosition(coordinates);\n    };\n    const endMoving = function (event) {\n      const coordinates = ovmap.getEventCoordinateInternal(event);\n      scope.getMap().getView().setCenterInternal(coordinates);\n      window.removeEventListener('mousemove', move);\n      window.removeEventListener('mouseup', endMoving);\n    };\n\n    /* Binding */\n\n    overlayBox.addEventListener('mousedown', function () {\n      window.addEventListener('mousemove', move);\n      window.addEventListener('mouseup', endMoving);\n    });\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    const oldMap = this.getMap();\n    if (map === oldMap) {\n      return;\n    }\n    if (oldMap) {\n      const oldView = oldMap.getView();\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      this.ovmap_.setTarget(null);\n    }\n    super.setMap(map);\n    if (map) {\n      this.ovmap_.setTarget(this.ovmapDiv_);\n      this.listenerKeys.push(listen(map, ObjectEventType.PROPERTYCHANGE, this.handleMapPropertyChange_, this));\n      const view = map.getView();\n      if (view) {\n        this.bindView_(view);\n        if (view.isDef()) {\n          this.ovmap_.updateSize();\n          this.resetExtent_();\n        }\n      }\n      if (!this.ovmap_.isRendered()) {\n        this.updateBoxAfterOvmapIsRendered_();\n      }\n    }\n  }\n\n  /**\n   * Handle map property changes.  This only deals with changes to the map's view.\n   * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n   * @private\n   */\n  handleMapPropertyChange_(event) {\n    if (event.key === MapProperty.VIEW) {\n      const oldView = /** @type {import(\"../View.js\").default} */\n      event.oldValue;\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      const newView = this.getMap().getView();\n      this.bindView_(newView);\n    } else if (!this.ovmap_.isRendered() && (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)) {\n      this.ovmap_.updateSize();\n    }\n  }\n\n  /**\n   * Register listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  bindView_(view) {\n    if (!this.view_) {\n      // Unless an explicit view definition was given, derive default from whatever main map uses.\n      const newView = new View({\n        projection: view.getProjection()\n      });\n      this.ovmap_.setView(newView);\n    }\n    view.addChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n    // Sync once with the new view\n    this.handleRotationChanged_();\n  }\n\n  /**\n   * Unregister listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  unbindView_(view) {\n    view.removeChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n  }\n\n  /**\n   * Handle rotation changes to the main map.\n   * @private\n   */\n  handleRotationChanged_() {\n    if (this.rotateWithView_) {\n      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n    }\n  }\n\n  /**\n   * Reset the overview map extent if the box size (width or\n   * height) is less than the size of the overview map size times minRatio\n   * or is greater than the size of the overview size times maxRatio.\n   *\n   * If the map extent was not reset, the box size can fits in the defined\n   * ratio sizes. This method then checks if is contained inside the overview\n   * map current extent. If not, recenter the overview map to the current\n   * main map center location.\n   * @private\n   */\n  validateExtent_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n    const mapSize = /** @type {import(\"../size.js\").Size} */map.getSize();\n    const view = map.getView();\n    const extent = view.calculateExtentInternal(mapSize);\n    if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n      // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n      return;\n    }\n    this.viewExtent_ = extent;\n    const ovmapSize = /** @type {import(\"../size.js\").Size} */\n    ovmap.getSize();\n    const ovview = ovmap.getView();\n    const ovextent = ovview.calculateExtentInternal(ovmapSize);\n    const topLeftPixel = ovmap.getPixelFromCoordinateInternal(getTopLeft(extent));\n    const bottomRightPixel = ovmap.getPixelFromCoordinateInternal(getBottomRight(extent));\n    const boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n    const boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n    const ovmapWidth = ovmapSize[0];\n    const ovmapHeight = ovmapSize[1];\n    if (boxWidth < ovmapWidth * MIN_RATIO || boxHeight < ovmapHeight * MIN_RATIO || boxWidth > ovmapWidth * MAX_RATIO || boxHeight > ovmapHeight * MAX_RATIO) {\n      this.resetExtent_();\n    } else if (!containsExtent(ovextent, extent)) {\n      this.recenter_();\n    }\n  }\n\n  /**\n   * Reset the overview map extent to half calculated min and max ratio times\n   * the extent of the main map.\n   * @private\n   */\n  resetExtent_() {\n    if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n      return;\n    }\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n    const mapSize = /** @type {import(\"../size.js\").Size} */map.getSize();\n    const view = map.getView();\n    const extent = view.calculateExtentInternal(mapSize);\n    const ovview = ovmap.getView();\n\n    // get how many times the current map overview could hold different\n    // box sizes using the min and max ratio, pick the step in the middle used\n    // to calculate the extent from the main map to set it to the overview map,\n    const steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n    const ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n    scaleFromCenter(extent, ratio);\n    ovview.fitInternal(polygonFromExtent(extent));\n  }\n\n  /**\n   * Set the center of the overview map to the map center without changing its\n   * resolution.\n   * @private\n   */\n  recenter_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n    const view = map.getView();\n    const ovview = ovmap.getView();\n    ovview.setCenterInternal(view.getCenterInternal());\n  }\n\n  /**\n   * Update the box using the main map extent\n   * @private\n   */\n  updateBox_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n    const mapSize = /** @type {import(\"../size.js\").Size} */map.getSize();\n    const view = map.getView();\n    const ovview = ovmap.getView();\n    const rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n    const overlay = this.boxOverlay_;\n    const box = this.boxOverlay_.getElement();\n    const center = view.getCenterInternal();\n    const resolution = view.getResolution();\n    const ovresolution = ovview.getResolution();\n    const width = mapSize[0] * resolution / ovresolution;\n    const height = mapSize[1] * resolution / ovresolution;\n\n    // set position using center coordinates\n    overlay.setPosition(center);\n\n    // set box size calculated from map extent size and overview map resolution\n    if (box) {\n      box.style.width = width + 'px';\n      box.style.height = height + 'px';\n      const transform = 'rotate(' + rotation + 'rad)';\n      box.style.transform = transform;\n    }\n  }\n\n  /**\n   * @private\n   */\n  updateBoxAfterOvmapIsRendered_() {\n    if (this.ovmapPostrenderKey_) {\n      return;\n    }\n    this.ovmapPostrenderKey_ = listenOnce(this.ovmap_, MapEventType.POSTRENDER, function (event) {\n      delete this.ovmapPostrenderKey_;\n      this.updateBox_();\n    }, this);\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n  }\n\n  /**\n   * @private\n   */\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n\n    // manage overview map if it had not been rendered before and control\n    // is expanded\n    const ovmap = this.ovmap_;\n    if (!this.collapsed_) {\n      if (ovmap.isRendered()) {\n        this.viewExtent_ = undefined;\n        ovmap.render();\n        return;\n      }\n      ovmap.updateSize();\n      this.resetExtent_();\n      this.updateBoxAfterOvmapIsRendered_();\n    }\n  }\n\n  /**\n   * Return `true` if the overview map is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  getCollapsible() {\n    return this.collapsible_;\n  }\n\n  /**\n   * Set whether the overview map should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  }\n\n  /**\n   * Collapse or expand the overview map according to the passed parameter. Will\n   * not do anything if the overview map isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  setCollapsed(collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  }\n\n  /**\n   * Determine if the overview map is collapsed.\n   * @return {boolean} The overview map is collapsed.\n   * @api\n   */\n  getCollapsed() {\n    return this.collapsed_;\n  }\n\n  /**\n   * Return `true` if the overview map view can rotate, `false` otherwise.\n   * @return {boolean} True if the control view can rotate.\n   * @api\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n   * Set whether the overview map view should rotate with the main map view.\n   * @param {boolean} rotateWithView True if the control view should rotate.\n   * @api\n   */\n  setRotateWithView(rotateWithView) {\n    if (this.rotateWithView_ === rotateWithView) {\n      return;\n    }\n    this.rotateWithView_ = rotateWithView;\n    if (this.getMap().getView().getRotation() !== 0) {\n      if (this.rotateWithView_) {\n        this.handleRotationChanged_();\n      } else {\n        this.ovmap_.getView().setRotation(0);\n      }\n      this.viewExtent_ = undefined;\n      this.validateExtent_();\n      this.updateBox_();\n    }\n  }\n\n  /**\n   * Return the overview map.\n   * @return {import(\"../Map.js\").default} Overview map.\n   * @api\n   */\n  getOverviewMap() {\n    return this.ovmap_;\n  }\n\n  /**\n   * Update the overview map element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    this.validateExtent_();\n    this.updateBox_();\n  }\n}\nexport default OverviewMap;","map":{"version":3,"names":["Collection","Control","EventType","Map","MapEventType","MapProperty","ObjectEventType","Overlay","View","ViewProperty","CLASS_COLLAPSED","CLASS_CONTROL","CLASS_UNSELECTABLE","containsExtent","equals","equalsExtent","getBottomRight","getTopLeft","scaleFromCenter","listen","listenOnce","fromExtent","polygonFromExtent","replaceNode","MAX_RATIO","MIN_RATIO","OverviewMap","constructor","options","element","document","createElement","render","target","boundHandleRotationChanged_","handleRotationChanged_","bind","collapsed_","collapsed","undefined","collapsible_","collapsible","rotateWithView_","rotateWithView","viewExtent_","className","tipLabel","collapseLabel","collapseLabel_","textContent","label","label_","activeLabel","button","setAttribute","title","appendChild","addEventListener","CLICK","handleClick_","ovmapDiv_","view_","view","ovmap","controls","interactions","ovmap_","layers","forEach","layer","addLayer","box","style","boxSizing","boxOverlay_","position","positioning","addOverlay","cssClasses","scope","overlay","overlayBox","getElement","computeDesiredMousePosition","mousePosition","clientX","clientY","move","event","coordinates","getEventCoordinateInternal","setPosition","endMoving","getMap","getView","setCenterInternal","window","removeEventListener","setMap","map","oldMap","oldView","unbindView_","setTarget","listenerKeys","push","PROPERTYCHANGE","handleMapPropertyChange_","bindView_","isDef","updateSize","resetExtent_","isRendered","updateBoxAfterOvmapIsRendered_","key","VIEW","oldValue","newView","TARGET","SIZE","projection","getProjection","setView","addChangeListener","ROTATION","removeChangeListener","setRotation","getRotation","validateExtent_","mapSize","getSize","extent","calculateExtentInternal","ovmapSize","ovview","ovextent","topLeftPixel","getPixelFromCoordinateInternal","bottomRightPixel","boxWidth","Math","abs","boxHeight","ovmapWidth","ovmapHeight","recenter_","steps","log","LN2","ratio","pow","fitInternal","getCenterInternal","updateBox_","rotation","center","resolution","getResolution","ovresolution","width","height","transform","ovmapPostrenderKey_","POSTRENDER","preventDefault","handleToggle_","classList","toggle","getCollapsible","setCollapsible","setCollapsed","getCollapsed","getRotateWithView","setRotateWithView","getOverviewMap","mapEvent"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/control/OverviewMap.js"],"sourcesContent":["/**\n * @module ol/control/OverviewMap\n */\nimport Collection from '../Collection.js';\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport Map from '../Map.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport View from '../View.js';\nimport ViewProperty from '../ViewProperty.js';\nimport {CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {\n  containsExtent,\n  equals as equalsExtent,\n  getBottomRight,\n  getTopLeft,\n  scaleFromCenter,\n} from '../extent.js';\nimport {listen, listenOnce} from '../events.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport {replaceNode} from '../dom.js';\n\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\nconst MAX_RATIO = 0.75;\n\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\nconst MIN_RATIO = 0.1;\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Base.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Base.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\n * a default view with the same projection as the main map will be used.\n */\n\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\nclass OverviewMap extends Control {\n  /**\n   * @param {Options} [options] OverviewMap options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target,\n    });\n\n    /**\n     * @private\n     */\n    this.boundHandleRotationChanged_ = this.handleRotationChanged_.bind(this);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.collapsed_ =\n      options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ =\n      options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotateWithView_ =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n    this.viewExtent_ = undefined;\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-overviewmap';\n\n    const tipLabel =\n      options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n\n    const collapseLabel =\n      options.collapseLabel !== undefined ? options.collapseLabel : '\\u2039';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    const label = options.label !== undefined ? options.label : '\\u203A';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n    }\n\n    const activeLabel =\n      this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n\n    button.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    this.ovmapDiv_ = document.createElement('div');\n    this.ovmapDiv_.className = 'ol-overviewmap-map';\n\n    /**\n     * Explicitly given view to be used instead of a view derived from the main map.\n     * @type {View}\n     * @private\n     */\n    this.view_ = options.view;\n\n    const ovmap = new Map({\n      view: options.view,\n      controls: new Collection(),\n      interactions: new Collection(),\n    });\n\n    /**\n     * @type {Map}\n     * @private\n     */\n    this.ovmap_ = ovmap;\n\n    if (options.layers) {\n      options.layers.forEach(function (layer) {\n        ovmap.addLayer(layer);\n      });\n    }\n\n    const box = document.createElement('div');\n    box.className = 'ol-overviewmap-box';\n    box.style.boxSizing = 'border-box';\n\n    /**\n     * @type {import(\"../Overlay.js\").default}\n     * @private\n     */\n    this.boxOverlay_ = new Overlay({\n      position: [0, 0],\n      positioning: 'center-center',\n      element: box,\n    });\n    this.ovmap_.addOverlay(this.boxOverlay_);\n\n    const cssClasses =\n      className +\n      ' ' +\n      CLASS_UNSELECTABLE +\n      ' ' +\n      CLASS_CONTROL +\n      (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n      (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.ovmapDiv_);\n    element.appendChild(button);\n\n    /* Interactive map */\n\n    const scope = this;\n\n    const overlay = this.boxOverlay_;\n    const overlayBox = this.boxOverlay_.getElement();\n\n    /* Functions definition */\n\n    const computeDesiredMousePosition = function (mousePosition) {\n      return {\n        clientX: mousePosition.clientX,\n        clientY: mousePosition.clientY,\n      };\n    };\n\n    const move = function (event) {\n      const position = /** @type {?} */ (computeDesiredMousePosition(event));\n      const coordinates = ovmap.getEventCoordinateInternal(\n        /** @type {MouseEvent} */ (position)\n      );\n\n      overlay.setPosition(coordinates);\n    };\n\n    const endMoving = function (event) {\n      const coordinates = ovmap.getEventCoordinateInternal(event);\n\n      scope.getMap().getView().setCenterInternal(coordinates);\n\n      window.removeEventListener('mousemove', move);\n      window.removeEventListener('mouseup', endMoving);\n    };\n\n    /* Binding */\n\n    overlayBox.addEventListener('mousedown', function () {\n      window.addEventListener('mousemove', move);\n      window.addEventListener('mouseup', endMoving);\n    });\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    const oldMap = this.getMap();\n    if (map === oldMap) {\n      return;\n    }\n    if (oldMap) {\n      const oldView = oldMap.getView();\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      this.ovmap_.setTarget(null);\n    }\n    super.setMap(map);\n\n    if (map) {\n      this.ovmap_.setTarget(this.ovmapDiv_);\n      this.listenerKeys.push(\n        listen(\n          map,\n          ObjectEventType.PROPERTYCHANGE,\n          this.handleMapPropertyChange_,\n          this\n        )\n      );\n\n      const view = map.getView();\n      if (view) {\n        this.bindView_(view);\n        if (view.isDef()) {\n          this.ovmap_.updateSize();\n          this.resetExtent_();\n        }\n      }\n\n      if (!this.ovmap_.isRendered()) {\n        this.updateBoxAfterOvmapIsRendered_();\n      }\n    }\n  }\n\n  /**\n   * Handle map property changes.  This only deals with changes to the map's view.\n   * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n   * @private\n   */\n  handleMapPropertyChange_(event) {\n    if (event.key === MapProperty.VIEW) {\n      const oldView = /** @type {import(\"../View.js\").default} */ (\n        event.oldValue\n      );\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      const newView = this.getMap().getView();\n      this.bindView_(newView);\n    } else if (\n      !this.ovmap_.isRendered() &&\n      (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)\n    ) {\n      this.ovmap_.updateSize();\n    }\n  }\n\n  /**\n   * Register listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  bindView_(view) {\n    if (!this.view_) {\n      // Unless an explicit view definition was given, derive default from whatever main map uses.\n      const newView = new View({\n        projection: view.getProjection(),\n      });\n      this.ovmap_.setView(newView);\n    }\n\n    view.addChangeListener(\n      ViewProperty.ROTATION,\n      this.boundHandleRotationChanged_\n    );\n    // Sync once with the new view\n    this.handleRotationChanged_();\n  }\n\n  /**\n   * Unregister listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  unbindView_(view) {\n    view.removeChangeListener(\n      ViewProperty.ROTATION,\n      this.boundHandleRotationChanged_\n    );\n  }\n\n  /**\n   * Handle rotation changes to the main map.\n   * @private\n   */\n  handleRotationChanged_() {\n    if (this.rotateWithView_) {\n      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n    }\n  }\n\n  /**\n   * Reset the overview map extent if the box size (width or\n   * height) is less than the size of the overview map size times minRatio\n   * or is greater than the size of the overview size times maxRatio.\n   *\n   * If the map extent was not reset, the box size can fits in the defined\n   * ratio sizes. This method then checks if is contained inside the overview\n   * map current extent. If not, recenter the overview map to the current\n   * main map center location.\n   * @private\n   */\n  validateExtent_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n    const extent = view.calculateExtentInternal(mapSize);\n\n    if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n      // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n      return;\n    }\n    this.viewExtent_ = extent;\n\n    const ovmapSize = /** @type {import(\"../size.js\").Size} */ (\n      ovmap.getSize()\n    );\n\n    const ovview = ovmap.getView();\n    const ovextent = ovview.calculateExtentInternal(ovmapSize);\n\n    const topLeftPixel = ovmap.getPixelFromCoordinateInternal(\n      getTopLeft(extent)\n    );\n    const bottomRightPixel = ovmap.getPixelFromCoordinateInternal(\n      getBottomRight(extent)\n    );\n\n    const boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n    const boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n\n    const ovmapWidth = ovmapSize[0];\n    const ovmapHeight = ovmapSize[1];\n\n    if (\n      boxWidth < ovmapWidth * MIN_RATIO ||\n      boxHeight < ovmapHeight * MIN_RATIO ||\n      boxWidth > ovmapWidth * MAX_RATIO ||\n      boxHeight > ovmapHeight * MAX_RATIO\n    ) {\n      this.resetExtent_();\n    } else if (!containsExtent(ovextent, extent)) {\n      this.recenter_();\n    }\n  }\n\n  /**\n   * Reset the overview map extent to half calculated min and max ratio times\n   * the extent of the main map.\n   * @private\n   */\n  resetExtent_() {\n    if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n      return;\n    }\n\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n    const extent = view.calculateExtentInternal(mapSize);\n\n    const ovview = ovmap.getView();\n\n    // get how many times the current map overview could hold different\n    // box sizes using the min and max ratio, pick the step in the middle used\n    // to calculate the extent from the main map to set it to the overview map,\n    const steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n    const ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n    scaleFromCenter(extent, ratio);\n    ovview.fitInternal(polygonFromExtent(extent));\n  }\n\n  /**\n   * Set the center of the overview map to the map center without changing its\n   * resolution.\n   * @private\n   */\n  recenter_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    const view = map.getView();\n\n    const ovview = ovmap.getView();\n\n    ovview.setCenterInternal(view.getCenterInternal());\n  }\n\n  /**\n   * Update the box using the main map extent\n   * @private\n   */\n  updateBox_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n\n    const ovview = ovmap.getView();\n\n    const rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n\n    const overlay = this.boxOverlay_;\n    const box = this.boxOverlay_.getElement();\n    const center = view.getCenterInternal();\n    const resolution = view.getResolution();\n    const ovresolution = ovview.getResolution();\n    const width = (mapSize[0] * resolution) / ovresolution;\n    const height = (mapSize[1] * resolution) / ovresolution;\n\n    // set position using center coordinates\n    overlay.setPosition(center);\n\n    // set box size calculated from map extent size and overview map resolution\n    if (box) {\n      box.style.width = width + 'px';\n      box.style.height = height + 'px';\n      const transform = 'rotate(' + rotation + 'rad)';\n      box.style.transform = transform;\n    }\n  }\n\n  /**\n   * @private\n   */\n  updateBoxAfterOvmapIsRendered_() {\n    if (this.ovmapPostrenderKey_) {\n      return;\n    }\n    this.ovmapPostrenderKey_ = listenOnce(\n      this.ovmap_,\n      MapEventType.POSTRENDER,\n      function (event) {\n        delete this.ovmapPostrenderKey_;\n        this.updateBox_();\n      },\n      this\n    );\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n  }\n\n  /**\n   * @private\n   */\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n\n    // manage overview map if it had not been rendered before and control\n    // is expanded\n    const ovmap = this.ovmap_;\n    if (!this.collapsed_) {\n      if (ovmap.isRendered()) {\n        this.viewExtent_ = undefined;\n        ovmap.render();\n        return;\n      }\n      ovmap.updateSize();\n      this.resetExtent_();\n      this.updateBoxAfterOvmapIsRendered_();\n    }\n  }\n\n  /**\n   * Return `true` if the overview map is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  getCollapsible() {\n    return this.collapsible_;\n  }\n\n  /**\n   * Set whether the overview map should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  }\n\n  /**\n   * Collapse or expand the overview map according to the passed parameter. Will\n   * not do anything if the overview map isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  setCollapsed(collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  }\n\n  /**\n   * Determine if the overview map is collapsed.\n   * @return {boolean} The overview map is collapsed.\n   * @api\n   */\n  getCollapsed() {\n    return this.collapsed_;\n  }\n\n  /**\n   * Return `true` if the overview map view can rotate, `false` otherwise.\n   * @return {boolean} True if the control view can rotate.\n   * @api\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n   * Set whether the overview map view should rotate with the main map view.\n   * @param {boolean} rotateWithView True if the control view should rotate.\n   * @api\n   */\n  setRotateWithView(rotateWithView) {\n    if (this.rotateWithView_ === rotateWithView) {\n      return;\n    }\n    this.rotateWithView_ = rotateWithView;\n    if (this.getMap().getView().getRotation() !== 0) {\n      if (this.rotateWithView_) {\n        this.handleRotationChanged_();\n      } else {\n        this.ovmap_.getView().setRotation(0);\n      }\n      this.viewExtent_ = undefined;\n      this.validateExtent_();\n      this.updateBox_();\n    }\n  }\n\n  /**\n   * Return the overview map.\n   * @return {import(\"../Map.js\").default} Overview map.\n   * @api\n   */\n  getOverviewMap() {\n    return this.ovmap_;\n  }\n\n  /**\n   * Update the overview map element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    this.validateExtent_();\n    this.updateBox_();\n  }\n}\n\nexport default OverviewMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}