{"ast":null,"code":"/**\n * @module ol/source/DataTile\n */\nimport DataTile from '../DataTile.js';\nimport EventType from '../events/EventType.js';\nimport ReprojDataTile from '../reproj/DataTile.js';\nimport TileCache from '../TileCache.js';\nimport TileEventType from './TileEventType.js';\nimport TileSource, { TileSourceEvent } from './Tile.js';\nimport TileState from '../TileState.js';\nimport { createXYZ, extentFromProjection, getForProjection as getTileGridForProjection } from '../tilegrid.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport { getKeyZXY } from '../tilecoord.js';\nimport { getUid } from '../util.js';\nimport { toPromise } from '../functions.js';\nimport { toSize } from '../size.js';\n\n/**\n * Data tile loading function.  The function is called with z, x, and y tile coordinates and\n * returns {@link import(\"../DataTile.js\").Data data} for a tile or a promise for the same.\n * @typedef {function(number, number, number) : (import(\"../DataTile.js\").Data|Promise<import(\"../DataTile.js\").Data>)} Loader\n */\n\n/**\n * @typedef {Object} Options\n * @property {Loader} [loader] Data loader.  Called with z, x, and y tile coordinates.\n * Returns {@link import(\"../DataTile.js\").Data data} for a tile or a promise for the same.\n * For loaders that generate images, the promise should not resolve until the image is loaded.\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The pixel width and height of the source tiles.\n * This may be different than the rendered pixel size if a `tileGrid` is provided.\n * @property {number} [gutter=0] The size in pixels of the gutter around data tiles to ignore.\n * This allows artifacts of rendering at tile edges to be ignored.\n * Supported data should be wider and taller than the tile size by a value of `2 x gutter`.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Tile projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"./Source.js\").State} [state] The source state.\n * @property {boolean} [wrapX=false] Render tiles beyond the antimeridian.\n * @property {number} [transition] Transition time when fading in new tiles (in milliseconds).\n * @property {number} [bandCount=4] Number of bands represented in the data.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * A source for typed array data tiles.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass DataTileSource extends TileSource {\n  /**\n   * @param {Options} options DataTile source options.\n   */\n  constructor(options) {\n    const projection = options.projection === undefined ? 'EPSG:3857' : options.projection;\n    let tileGrid = options.tileGrid;\n    if (tileGrid === undefined && projection) {\n      tileGrid = createXYZ({\n        extent: extentFromProjection(projection),\n        maxResolution: options.maxResolution,\n        maxZoom: options.maxZoom,\n        minZoom: options.minZoom,\n        tileSize: options.tileSize\n      });\n    }\n    super({\n      cacheSize: 0.1,\n      // don't cache on the source\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: projection,\n      tileGrid: tileGrid,\n      opaque: options.opaque,\n      state: options.state,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {import('../size.js').Size|null}\n     */\n    this.tileSize_ = options.tileSize ? toSize(options.tileSize) : null;\n\n    /**\n     * @private\n     * @type {Array<import('../size.js').Size>|null}\n     */\n    this.tileSizes_ = null;\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n\n    /**\n     * @private\n     */\n    this.loader_ = options.loader;\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\n\n    /**\n     * @type {number}\n     */\n    this.bandCount = options.bandCount === undefined ? 4 : options.bandCount; // assume RGBA if undefined\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection_ = {};\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../TileCache.js\").default>}\n     */\n    this.tileCacheForProjection_ = {};\n  }\n\n  /**\n   * Set the source tile sizes.  The length of the array is expected to match the number of\n   * levels in the tile grid.\n   * @protected\n   * @param {Array<import('../size.js').Size>} tileSizes An array of tile sizes.\n   */\n  setTileSizes(tileSizes) {\n    this.tileSizes_ = tileSizes;\n  }\n\n  /**\n   * Get the source tile size at the given zoom level.  This may be different than the rendered tile\n   * size.\n   * @protected\n   * @param {number} z Tile zoom level.\n   * @return {import('../size.js').Size} The source tile size.\n   */\n  getTileSize(z) {\n    if (this.tileSizes_) {\n      return this.tileSizes_[z];\n    }\n    if (this.tileSize_) {\n      return this.tileSize_;\n    }\n    const tileGrid = this.getTileGrid();\n    return tileGrid ? toSize(tileGrid.getTileSize(z)) : [256, 256];\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.gutter_;\n    }\n    return 0;\n  }\n\n  /**\n   * @param {Loader} loader The data loader.\n   * @protected\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} targetProj The output projection.\n   * @param {import(\"../proj/Projection.js\").default} sourceProj The input projection.\n   * @return {!DataTile} Tile.\n   */\n  getReprojTile_(z, x, y, targetProj, sourceProj) {\n    const cache = this.getTileCacheForProjection(targetProj);\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (cache.containsKey(tileCoordKey)) {\n      const tile = cache.get(tileCoordKey);\n      if (tile && tile.key == this.getKey()) {\n        return tile;\n      }\n    }\n    const tileGrid = this.getTileGrid();\n    const reprojTilePixelRatio = Math.max.apply(null, tileGrid.getResolutions().map((r, z) => {\n      const tileSize = toSize(tileGrid.getTileSize(z));\n      const textureSize = this.getTileSize(z);\n      return Math.max(textureSize[0] / tileSize[0], textureSize[1] / tileSize[1]);\n    }));\n    const sourceTileGrid = this.getTileGridForProjection(sourceProj);\n    const targetTileGrid = this.getTileGridForProjection(targetProj);\n    const tileCoord = [z, x, y];\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, targetProj);\n    const options = Object.assign({\n      sourceProj,\n      sourceTileGrid,\n      targetProj,\n      targetTileGrid,\n      tileCoord,\n      wrappedTileCoord,\n      pixelRatio: reprojTilePixelRatio,\n      gutter: this.getGutterForProjection(sourceProj),\n      getTileFunction: (z, x, y, pixelRatio) => this.getTile(z, x, y, pixelRatio, sourceProj)\n    }, this.tileOptions);\n    const newTile = new ReprojDataTile(options);\n    newTile.key = this.getKey();\n    return newTile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!DataTile} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (sourceProjection && projection && !equivalent(sourceProjection, projection)) {\n      return this.getReprojTile_(z, x, y, projection, sourceProjection);\n    }\n    const size = this.getTileSize(z);\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return this.tileCache.get(tileCoordKey);\n    }\n    const sourceLoader = this.loader_;\n    function loader() {\n      return toPromise(function () {\n        return sourceLoader(z, x, y);\n      });\n    }\n    const options = Object.assign({\n      tileCoord: [z, x, y],\n      loader: loader,\n      size: size\n    }, this.tileOptions);\n    const tile = new DataTile(options);\n    tile.key = this.getKey();\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n    this.tileCache.set(tileCoordKey, tile);\n    return tile;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   */\n  handleTileChange_(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */event.target;\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR : tileState == TileState.LOADED ? TileEventType.TILELOADEND : undefined;\n    }\n    if (type) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection_)) {\n      this.tileGridForProjection_[projKey] = getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection_[projKey];\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection_)) {\n        this.tileGridForProjection_[projKey] = tilegrid;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   */\n  getTileCacheForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileCacheForProjection_)) {\n      this.tileCacheForProjection_[projKey] = new TileCache(0.1); // don't cache\n    }\n\n    return this.tileCacheForProjection_[projKey];\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const usedTileCache = this.getTileCacheForProjection(projection);\n    this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n    for (const id in this.tileCacheForProjection_) {\n      const tileCache = this.tileCacheForProjection_[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  }\n  clear() {\n    super.clear();\n    for (const id in this.tileCacheForProjection_) {\n      this.tileCacheForProjection_[id].clear();\n    }\n  }\n}\nexport default DataTileSource;","map":{"version":3,"names":["DataTile","EventType","ReprojDataTile","TileCache","TileEventType","TileSource","TileSourceEvent","TileState","createXYZ","extentFromProjection","getForProjection","getTileGridForProjection","equivalent","get","getProjection","getKeyZXY","getUid","toPromise","toSize","DataTileSource","constructor","options","projection","undefined","tileGrid","extent","maxResolution","maxZoom","minZoom","tileSize","cacheSize","attributions","attributionsCollapsible","opaque","state","wrapX","transition","interpolate","gutter_","gutter","tileSize_","tileSizes_","tileLoadingKeys_","loader_","loader","handleTileChange_","bind","bandCount","tileGridForProjection_","tileCacheForProjection_","setTileSizes","tileSizes","getTileSize","z","getTileGrid","getGutterForProjection","thisProj","setLoader","getReprojTile_","x","y","targetProj","sourceProj","cache","getTileCacheForProjection","tileCoordKey","containsKey","tile","key","getKey","reprojTilePixelRatio","Math","max","apply","getResolutions","map","r","textureSize","sourceTileGrid","targetTileGrid","tileCoord","wrappedTileCoord","getTileCoordForTileUrlFunction","Object","assign","pixelRatio","getTileFunction","getTile","tileOptions","newTile","sourceProjection","size","tileCache","sourceLoader","addEventListener","CHANGE","set","event","target","uid","tileState","getState","type","LOADING","TILELOADSTART","ERROR","TILELOADERROR","LOADED","TILELOADEND","dispatchEvent","projKey","setTileGridForProjection","tilegrid","proj","expireCache","usedTiles","usedTileCache","id","clear"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/source/DataTile.js"],"sourcesContent":["/**\n * @module ol/source/DataTile\n */\nimport DataTile from '../DataTile.js';\nimport EventType from '../events/EventType.js';\nimport ReprojDataTile from '../reproj/DataTile.js';\nimport TileCache from '../TileCache.js';\nimport TileEventType from './TileEventType.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileState from '../TileState.js';\nimport {\n  createXYZ,\n  extentFromProjection,\n  getForProjection as getTileGridForProjection,\n} from '../tilegrid.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {getUid} from '../util.js';\nimport {toPromise} from '../functions.js';\nimport {toSize} from '../size.js';\n\n/**\n * Data tile loading function.  The function is called with z, x, and y tile coordinates and\n * returns {@link import(\"../DataTile.js\").Data data} for a tile or a promise for the same.\n * @typedef {function(number, number, number) : (import(\"../DataTile.js\").Data|Promise<import(\"../DataTile.js\").Data>)} Loader\n */\n\n/**\n * @typedef {Object} Options\n * @property {Loader} [loader] Data loader.  Called with z, x, and y tile coordinates.\n * Returns {@link import(\"../DataTile.js\").Data data} for a tile or a promise for the same.\n * For loaders that generate images, the promise should not resolve until the image is loaded.\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The pixel width and height of the source tiles.\n * This may be different than the rendered pixel size if a `tileGrid` is provided.\n * @property {number} [gutter=0] The size in pixels of the gutter around data tiles to ignore.\n * This allows artifacts of rendering at tile edges to be ignored.\n * Supported data should be wider and taller than the tile size by a value of `2 x gutter`.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Tile projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"./Source.js\").State} [state] The source state.\n * @property {boolean} [wrapX=false] Render tiles beyond the antimeridian.\n * @property {number} [transition] Transition time when fading in new tiles (in milliseconds).\n * @property {number} [bandCount=4] Number of bands represented in the data.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * A source for typed array data tiles.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass DataTileSource extends TileSource {\n  /**\n   * @param {Options} options DataTile source options.\n   */\n  constructor(options) {\n    const projection =\n      options.projection === undefined ? 'EPSG:3857' : options.projection;\n\n    let tileGrid = options.tileGrid;\n    if (tileGrid === undefined && projection) {\n      tileGrid = createXYZ({\n        extent: extentFromProjection(projection),\n        maxResolution: options.maxResolution,\n        maxZoom: options.maxZoom,\n        minZoom: options.minZoom,\n        tileSize: options.tileSize,\n      });\n    }\n\n    super({\n      cacheSize: 0.1, // don't cache on the source\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: projection,\n      tileGrid: tileGrid,\n      opaque: options.opaque,\n      state: options.state,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {import('../size.js').Size|null}\n     */\n    this.tileSize_ = options.tileSize ? toSize(options.tileSize) : null;\n\n    /**\n     * @private\n     * @type {Array<import('../size.js').Size>|null}\n     */\n    this.tileSizes_ = null;\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n\n    /**\n     * @private\n     */\n    this.loader_ = options.loader;\n\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\n\n    /**\n     * @type {number}\n     */\n    this.bandCount = options.bandCount === undefined ? 4 : options.bandCount; // assume RGBA if undefined\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection_ = {};\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../TileCache.js\").default>}\n     */\n    this.tileCacheForProjection_ = {};\n  }\n\n  /**\n   * Set the source tile sizes.  The length of the array is expected to match the number of\n   * levels in the tile grid.\n   * @protected\n   * @param {Array<import('../size.js').Size>} tileSizes An array of tile sizes.\n   */\n  setTileSizes(tileSizes) {\n    this.tileSizes_ = tileSizes;\n  }\n\n  /**\n   * Get the source tile size at the given zoom level.  This may be different than the rendered tile\n   * size.\n   * @protected\n   * @param {number} z Tile zoom level.\n   * @return {import('../size.js').Size} The source tile size.\n   */\n  getTileSize(z) {\n    if (this.tileSizes_) {\n      return this.tileSizes_[z];\n    }\n    if (this.tileSize_) {\n      return this.tileSize_;\n    }\n    const tileGrid = this.getTileGrid();\n    return tileGrid ? toSize(tileGrid.getTileSize(z)) : [256, 256];\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.gutter_;\n    }\n\n    return 0;\n  }\n\n  /**\n   * @param {Loader} loader The data loader.\n   * @protected\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} targetProj The output projection.\n   * @param {import(\"../proj/Projection.js\").default} sourceProj The input projection.\n   * @return {!DataTile} Tile.\n   */\n  getReprojTile_(z, x, y, targetProj, sourceProj) {\n    const cache = this.getTileCacheForProjection(targetProj);\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (cache.containsKey(tileCoordKey)) {\n      const tile = cache.get(tileCoordKey);\n      if (tile && tile.key == this.getKey()) {\n        return tile;\n      }\n    }\n\n    const tileGrid = this.getTileGrid();\n    const reprojTilePixelRatio = Math.max.apply(\n      null,\n      tileGrid.getResolutions().map((r, z) => {\n        const tileSize = toSize(tileGrid.getTileSize(z));\n        const textureSize = this.getTileSize(z);\n        return Math.max(\n          textureSize[0] / tileSize[0],\n          textureSize[1] / tileSize[1]\n        );\n      })\n    );\n\n    const sourceTileGrid = this.getTileGridForProjection(sourceProj);\n    const targetTileGrid = this.getTileGridForProjection(targetProj);\n    const tileCoord = [z, x, y];\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      targetProj\n    );\n\n    const options = Object.assign(\n      {\n        sourceProj,\n        sourceTileGrid,\n        targetProj,\n        targetTileGrid,\n        tileCoord,\n        wrappedTileCoord,\n        pixelRatio: reprojTilePixelRatio,\n        gutter: this.getGutterForProjection(sourceProj),\n        getTileFunction: (z, x, y, pixelRatio) =>\n          this.getTile(z, x, y, pixelRatio, sourceProj),\n      },\n      this.tileOptions\n    );\n    const newTile = new ReprojDataTile(options);\n    newTile.key = this.getKey();\n    return newTile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!DataTile} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      sourceProjection &&\n      projection &&\n      !equivalent(sourceProjection, projection)\n    ) {\n      return this.getReprojTile_(z, x, y, projection, sourceProjection);\n    }\n\n    const size = this.getTileSize(z);\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return this.tileCache.get(tileCoordKey);\n    }\n\n    const sourceLoader = this.loader_;\n\n    function loader() {\n      return toPromise(function () {\n        return sourceLoader(z, x, y);\n      });\n    }\n\n    const options = Object.assign(\n      {\n        tileCoord: [z, x, y],\n        loader: loader,\n        size: size,\n      },\n      this.tileOptions\n    );\n\n    const tile = new DataTile(options);\n    tile.key = this.getKey();\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n\n    this.tileCache.set(tileCoordKey, tile);\n    return tile;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   */\n  handleTileChange_(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n          ? TileEventType.TILELOADEND\n          : undefined;\n    }\n    if (type) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection_)) {\n      this.tileGridForProjection_[projKey] =\n        getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection_[projKey];\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection_)) {\n        this.tileGridForProjection_[projKey] = tilegrid;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   */\n  getTileCacheForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    }\n\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileCacheForProjection_)) {\n      this.tileCacheForProjection_[projKey] = new TileCache(0.1); // don't cache\n    }\n    return this.tileCacheForProjection_[projKey];\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const usedTileCache = this.getTileCacheForProjection(projection);\n\n    this.tileCache.expireCache(\n      this.tileCache == usedTileCache ? usedTiles : {}\n    );\n    for (const id in this.tileCacheForProjection_) {\n      const tileCache = this.tileCacheForProjection_[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  }\n\n  clear() {\n    super.clear();\n    for (const id in this.tileCacheForProjection_) {\n      this.tileCacheForProjection_[id].clear();\n    }\n  }\n}\n\nexport default DataTileSource;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}