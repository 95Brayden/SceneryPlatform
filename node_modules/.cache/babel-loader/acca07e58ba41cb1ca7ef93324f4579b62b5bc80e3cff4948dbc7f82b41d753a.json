{"ast":null,"code":"/**\n * @module ol/source/TileDebug\n */\n\nimport XYZ from './XYZ.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { toSize } from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Set to `1` when debugging `VectorTile` sources with a default configuration.\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {string} [template='z:{z} x:{x} y:{y}'] Template for labeling the tiles.\n * Should include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n */\n\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n * @api\n */\nclass TileDebug extends XYZ {\n  /**\n   * @param {Options} [options] Debug tile options.\n   */\n  constructor(options) {\n    /**\n     * @type {Options}\n     */\n    options = options || {};\n    super({\n      opaque: false,\n      projection: options.projection,\n      tileGrid: options.tileGrid,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      zDirection: options.zDirection,\n      url: options.template || 'z:{z} x:{x} y:{y}',\n      tileLoadFunction: (tile, text) => {\n        const z = tile.getTileCoord()[0];\n        const tileSize = toSize(this.tileGrid.getTileSize(z));\n        const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n        context.strokeStyle = 'grey';\n        context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n        context.fillStyle = 'grey';\n        context.strokeStyle = 'white';\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.font = '24px sans-serif';\n        context.lineWidth = 4;\n        context.strokeText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n        context.fillText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n\n        /** @type {import(\"../ImageTile.js\").default} */\n        tile.setImage(context.canvas);\n      }\n    });\n  }\n}\nexport default TileDebug;","map":{"version":3,"names":["XYZ","createCanvasContext2D","toSize","TileDebug","constructor","options","opaque","projection","tileGrid","wrapX","undefined","zDirection","url","template","tileLoadFunction","tile","text","z","getTileCoord","tileSize","getTileSize","context","strokeStyle","strokeRect","fillStyle","textAlign","textBaseline","font","lineWidth","strokeText","fillText","setImage","canvas"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/source/TileDebug.js"],"sourcesContent":["/**\n * @module ol/source/TileDebug\n */\n\nimport XYZ from './XYZ.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Set to `1` when debugging `VectorTile` sources with a default configuration.\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n * @property {string} [template='z:{z} x:{x} y:{y}'] Template for labeling the tiles.\n * Should include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n */\n\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n * @api\n */\nclass TileDebug extends XYZ {\n  /**\n   * @param {Options} [options] Debug tile options.\n   */\n  constructor(options) {\n    /**\n     * @type {Options}\n     */\n    options = options || {};\n\n    super({\n      opaque: false,\n      projection: options.projection,\n      tileGrid: options.tileGrid,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      zDirection: options.zDirection,\n      url: options.template || 'z:{z} x:{x} y:{y}',\n      tileLoadFunction: (tile, text) => {\n        const z = tile.getTileCoord()[0];\n        const tileSize = toSize(this.tileGrid.getTileSize(z));\n        const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n\n        context.strokeStyle = 'grey';\n        context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n\n        context.fillStyle = 'grey';\n        context.strokeStyle = 'white';\n        context.textAlign = 'center';\n        context.textBaseline = 'middle';\n        context.font = '24px sans-serif';\n        context.lineWidth = 4;\n        context.strokeText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n        context.fillText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n\n        /** @type {import(\"../ImageTile.js\").default} */ (tile).setImage(\n          context.canvas\n        );\n      },\n    });\n  }\n}\n\nexport default TileDebug;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAOA,GAAG,MAAM,UAAU;AAC1B,SAAQC,qBAAqB,QAAO,WAAW;AAC/C,SAAQC,MAAM,QAAO,YAAY;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,SAASH,GAAG,CAAC;EAC1B;AACF;AACA;EACEI,WAAWA,CAACC,OAAO,EAAE;IACnB;AACJ;AACA;IACIA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IAEvB,KAAK,CAAC;MACJC,MAAM,EAAE,KAAK;MACbC,UAAU,EAAEF,OAAO,CAACE,UAAU;MAC9BC,QAAQ,EAAEH,OAAO,CAACG,QAAQ;MAC1BC,KAAK,EAAEJ,OAAO,CAACI,KAAK,KAAKC,SAAS,GAAGL,OAAO,CAACI,KAAK,GAAG,IAAI;MACzDE,UAAU,EAAEN,OAAO,CAACM,UAAU;MAC9BC,GAAG,EAAEP,OAAO,CAACQ,QAAQ,IAAI,mBAAmB;MAC5CC,gBAAgB,EAAEA,CAACC,IAAI,EAAEC,IAAI,KAAK;QAChC,MAAMC,CAAC,GAAGF,IAAI,CAACG,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QAChC,MAAMC,QAAQ,GAAGjB,MAAM,CAAC,IAAI,CAACM,QAAQ,CAACY,WAAW,CAACH,CAAC,CAAC,CAAC;QACrD,MAAMI,OAAO,GAAGpB,qBAAqB,CAACkB,QAAQ,CAAC,CAAC,CAAC,EAAEA,QAAQ,CAAC,CAAC,CAAC,CAAC;QAE/DE,OAAO,CAACC,WAAW,GAAG,MAAM;QAC5BD,OAAO,CAACE,UAAU,CAAC,GAAG,EAAE,GAAG,EAAEJ,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,EAAEA,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;QAElEE,OAAO,CAACG,SAAS,GAAG,MAAM;QAC1BH,OAAO,CAACC,WAAW,GAAG,OAAO;QAC7BD,OAAO,CAACI,SAAS,GAAG,QAAQ;QAC5BJ,OAAO,CAACK,YAAY,GAAG,QAAQ;QAC/BL,OAAO,CAACM,IAAI,GAAG,iBAAiB;QAChCN,OAAO,CAACO,SAAS,GAAG,CAAC;QACrBP,OAAO,CAACQ,UAAU,CAACb,IAAI,EAAEG,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,QAAQ,CAAC,CAAC,CAAC,CAAC;QACvEE,OAAO,CAACS,QAAQ,CAACd,IAAI,EAAEG,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,QAAQ,CAAC,CAAC,CAAC,CAAC;;QAErE;QAAkDJ,IAAI,CAAEgB,QAAQ,CAC9DV,OAAO,CAACW,MACV,CAAC;MACH;IACF,CAAC,CAAC;EACJ;AACF;AAEA,eAAe7B,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}