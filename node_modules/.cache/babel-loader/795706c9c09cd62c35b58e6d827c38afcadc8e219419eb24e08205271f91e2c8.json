{"ast":null,"code":"/**\n * @module ol/source/arcgisRest\n */\n\nimport { DECIMALS } from './common.js';\nimport { appendParams } from '../uri.js';\nimport { decode } from '../Image.js';\nimport { getHeight, getWidth } from '../extent.js';\nimport { get as getProjection } from '../proj.js';\nimport { getRequestExtent } from './Image.js';\nimport { round } from '../math.js';\n\n/**\n * @param {string} baseUrl Base URL for the ArcGIS Rest service.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {import(\"../proj/Projection.js\").default} projection Projection.\n * @param {Object} params Params.\n * @return {string} Request URL.\n */\nexport function getRequestUrl(baseUrl, extent, resolution, pixelRatio, projection, params) {\n  // ArcGIS Server only wants the numeric portion of the projection ID.\n  // (if there is no numeric portion the entire projection code must\n  // form a valid ArcGIS SpatialReference definition).\n  const srid = projection.getCode().split(/:(?=\\d+$)/).pop();\n  const imageResolution = resolution / pixelRatio;\n  const imageSize = [round(getWidth(extent) / imageResolution, DECIMALS), round(getHeight(extent) / imageResolution, DECIMALS)];\n  params['SIZE'] = imageSize[0] + ',' + imageSize[1];\n  params['BBOX'] = extent.join(',');\n  params['BBOXSR'] = srid;\n  params['IMAGESR'] = srid;\n  params['DPI'] = Math.round(params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio);\n  const modifiedUrl = baseUrl.replace(/MapServer\\/?$/, 'MapServer/export').replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n  if (modifiedUrl == baseUrl) {\n    throw new Error('`options.featureTypes` should be an Array');\n  }\n  return appendParams(modifiedUrl, params);\n}\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is 'EPSG:3857'.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * Creates a loader for ArcGIS Rest images.\n * @param {LoaderOptions} options Image ArcGIS Rest Options.\n * @return {import('../Image.js').ImageObjectPromiseLoader} ArcGIS Rest image.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load ? options.load : decode;\n  const projection = getProjection(options.projection || 'EPSG:3857');\n\n  /** @type {import('../Image.js').ImageObjectPromiseLoader} */\n  return function (extent, resolution, pixelRatio) {\n    pixelRatio = options.hidpi ? pixelRatio : 1;\n    const params = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true\n    };\n    Object.assign(params, options.params);\n    extent = getRequestExtent(extent, resolution, pixelRatio, options.ratio);\n    const src = getRequestUrl(options.url, extent, resolution, pixelRatio, projection, params);\n    const image = new Image();\n    if (options.crossOrigin !== null) {\n      image.crossOrigin = options.crossOrigin;\n    }\n    return load(image, src).then(image => {\n      // Update resolution, because the server may return a smaller size than requested\n      const resolution = getWidth(extent) / image.width * pixelRatio;\n      return {\n        image,\n        extent,\n        resolution,\n        pixelRatio\n      };\n    });\n  };\n}","map":{"version":3,"names":["DECIMALS","appendParams","decode","getHeight","getWidth","get","getProjection","getRequestExtent","round","getRequestUrl","baseUrl","extent","resolution","pixelRatio","projection","params","srid","getCode","split","pop","imageResolution","imageSize","join","Math","modifiedUrl","replace","Error","createLoader","options","load","hidpi","Object","assign","ratio","src","url","image","Image","crossOrigin","then","width"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/source/arcgisRest.js"],"sourcesContent":["/**\n * @module ol/source/arcgisRest\n */\n\nimport {DECIMALS} from './common.js';\nimport {appendParams} from '../uri.js';\nimport {decode} from '../Image.js';\nimport {getHeight, getWidth} from '../extent.js';\nimport {get as getProjection} from '../proj.js';\nimport {getRequestExtent} from './Image.js';\nimport {round} from '../math.js';\n\n/**\n * @param {string} baseUrl Base URL for the ArcGIS Rest service.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {import(\"../proj/Projection.js\").default} projection Projection.\n * @param {Object} params Params.\n * @return {string} Request URL.\n */\nexport function getRequestUrl(\n  baseUrl,\n  extent,\n  resolution,\n  pixelRatio,\n  projection,\n  params\n) {\n  // ArcGIS Server only wants the numeric portion of the projection ID.\n  // (if there is no numeric portion the entire projection code must\n  // form a valid ArcGIS SpatialReference definition).\n  const srid = projection\n    .getCode()\n    .split(/:(?=\\d+$)/)\n    .pop();\n\n  const imageResolution = resolution / pixelRatio;\n\n  const imageSize = [\n    round(getWidth(extent) / imageResolution, DECIMALS),\n    round(getHeight(extent) / imageResolution, DECIMALS),\n  ];\n\n  params['SIZE'] = imageSize[0] + ',' + imageSize[1];\n  params['BBOX'] = extent.join(',');\n  params['BBOXSR'] = srid;\n  params['IMAGESR'] = srid;\n  params['DPI'] = Math.round(\n    params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio\n  );\n\n  const modifiedUrl = baseUrl\n    .replace(/MapServer\\/?$/, 'MapServer/export')\n    .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n  if (modifiedUrl == baseUrl) {\n    throw new Error('`options.featureTypes` should be an Array');\n  }\n  return appendParams(modifiedUrl, params);\n}\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is 'EPSG:3857'.\n * The projection code must contain a numeric end portion separated by :\n * or the entire code must form a valid ArcGIS SpatialReference definition.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * Creates a loader for ArcGIS Rest images.\n * @param {LoaderOptions} options Image ArcGIS Rest Options.\n * @return {import('../Image.js').ImageObjectPromiseLoader} ArcGIS Rest image.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load ? options.load : decode;\n  const projection = getProjection(options.projection || 'EPSG:3857');\n\n  /** @type {import('../Image.js').ImageObjectPromiseLoader} */\n  return function (extent, resolution, pixelRatio) {\n    pixelRatio = options.hidpi ? pixelRatio : 1;\n\n    const params = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true,\n    };\n    Object.assign(params, options.params);\n\n    extent = getRequestExtent(extent, resolution, pixelRatio, options.ratio);\n\n    const src = getRequestUrl(\n      options.url,\n      extent,\n      resolution,\n      pixelRatio,\n      projection,\n      params\n    );\n\n    const image = new Image();\n    if (options.crossOrigin !== null) {\n      image.crossOrigin = options.crossOrigin;\n    }\n\n    return load(image, src).then((image) => {\n      // Update resolution, because the server may return a smaller size than requested\n      const resolution = (getWidth(extent) / image.width) * pixelRatio;\n      return {image, extent, resolution, pixelRatio};\n    });\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}