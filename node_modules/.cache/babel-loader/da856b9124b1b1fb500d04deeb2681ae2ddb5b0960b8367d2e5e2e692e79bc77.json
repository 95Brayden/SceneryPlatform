{"ast":null,"code":"/**\n * @module ol/interaction/DragPan\n */\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { all, focusWithTabindex, noModifierKeys, primaryAction } from '../events/condition.js';\nimport { easeOut } from '../easing.js';\nimport { rotate as rotateCoordinate, scale as scaleCoordinate } from '../coordinate.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n * @api\n */\nclass DragPan extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super({\n      stopDown: FALSE\n    });\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {import(\"../Kinetic.js\").default|undefined}\n     */\n    this.kinetic_ = options.kinetic;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    this.lastCentroid = null;\n\n    /**\n     * @type {number}\n     */\n    this.lastPointersCount_;\n\n    /**\n     * @type {boolean}\n     */\n    this.panning_ = false;\n    const condition = options.condition ? options.condition : all(noModifierKeys, primaryAction);\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.onFocusOnly ? all(focusWithTabindex, condition) : condition;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.noKinetic_ = false;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    const map = mapBrowserEvent.map;\n    if (!this.panning_) {\n      this.panning_ = true;\n      map.getView().beginInteraction();\n    }\n    const targetPointers = this.targetPointers;\n    const centroid = map.getEventPixel(centroidFromPointers(targetPointers));\n    if (targetPointers.length == this.lastPointersCount_) {\n      if (this.kinetic_) {\n        this.kinetic_.update(centroid[0], centroid[1]);\n      }\n      if (this.lastCentroid) {\n        const delta = [this.lastCentroid[0] - centroid[0], centroid[1] - this.lastCentroid[1]];\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        scaleCoordinate(delta, view.getResolution());\n        rotateCoordinate(delta, view.getRotation());\n        view.adjustCenterInternal(delta);\n      }\n    } else if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger down, tiny drag, second finger down\n      this.kinetic_.begin();\n    }\n    this.lastCentroid = centroid;\n    this.lastPointersCount_ = targetPointers.length;\n    mapBrowserEvent.originalEvent.preventDefault();\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (this.targetPointers.length === 0) {\n      if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n        const distance = this.kinetic_.getDistance();\n        const angle = this.kinetic_.getAngle();\n        const center = view.getCenterInternal();\n        const centerpx = map.getPixelFromCoordinateInternal(center);\n        const dest = map.getCoordinateFromPixelInternal([centerpx[0] - distance * Math.cos(angle), centerpx[1] - distance * Math.sin(angle)]);\n        view.animateInternal({\n          center: view.getConstrainedCenter(dest),\n          duration: 500,\n          easing: easeOut\n        });\n      }\n      if (this.panning_) {\n        this.panning_ = false;\n        view.endInteraction();\n      }\n      return false;\n    }\n    if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger up, tiny drag, second finger up\n      this.kinetic_.begin();\n    }\n    this.lastCentroid = null;\n    return true;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      this.lastCentroid = null;\n      // stop any current animation\n      if (view.getAnimating()) {\n        view.cancelAnimations();\n      }\n      if (this.kinetic_) {\n        this.kinetic_.begin();\n      }\n      // No kinetic as soon as more than one pointer on the screen is\n      // detected. This is to prevent nasty pans after pinch.\n      this.noKinetic_ = this.targetPointers.length > 1;\n      return true;\n    }\n    return false;\n  }\n}\nexport default DragPan;","map":{"version":3,"names":["PointerInteraction","centroid","centroidFromPointers","FALSE","all","focusWithTabindex","noModifierKeys","primaryAction","easeOut","rotate","rotateCoordinate","scale","scaleCoordinate","DragPan","constructor","options","stopDown","kinetic_","kinetic","lastCentroid","lastPointersCount_","panning_","condition","condition_","onFocusOnly","noKinetic_","handleDragEvent","mapBrowserEvent","map","getView","beginInteraction","targetPointers","getEventPixel","length","update","delta","view","getResolution","getRotation","adjustCenterInternal","begin","originalEvent","preventDefault","handleUpEvent","end","distance","getDistance","angle","getAngle","center","getCenterInternal","centerpx","getPixelFromCoordinateInternal","dest","getCoordinateFromPixelInternal","Math","cos","sin","animateInternal","getConstrainedCenter","duration","easing","endInteraction","handleDownEvent","getAnimating","cancelAnimations"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/interaction/DragPan.js"],"sourcesContent":["/**\n * @module ol/interaction/DragPan\n */\nimport PointerInteraction, {\n  centroid as centroidFromPointers,\n} from './Pointer.js';\nimport {FALSE} from '../functions.js';\nimport {\n  all,\n  focusWithTabindex,\n  noModifierKeys,\n  primaryAction,\n} from '../events/condition.js';\nimport {easeOut} from '../easing.js';\nimport {\n  rotate as rotateCoordinate,\n  scale as scaleCoordinate,\n} from '../coordinate.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n * @api\n */\nclass DragPan extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super({\n      stopDown: FALSE,\n    });\n\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {import(\"../Kinetic.js\").default|undefined}\n     */\n    this.kinetic_ = options.kinetic;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    this.lastCentroid = null;\n\n    /**\n     * @type {number}\n     */\n    this.lastPointersCount_;\n\n    /**\n     * @type {boolean}\n     */\n    this.panning_ = false;\n\n    const condition = options.condition\n      ? options.condition\n      : all(noModifierKeys, primaryAction);\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.onFocusOnly\n      ? all(focusWithTabindex, condition)\n      : condition;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.noKinetic_ = false;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    const map = mapBrowserEvent.map;\n    if (!this.panning_) {\n      this.panning_ = true;\n      map.getView().beginInteraction();\n    }\n    const targetPointers = this.targetPointers;\n    const centroid = map.getEventPixel(centroidFromPointers(targetPointers));\n    if (targetPointers.length == this.lastPointersCount_) {\n      if (this.kinetic_) {\n        this.kinetic_.update(centroid[0], centroid[1]);\n      }\n      if (this.lastCentroid) {\n        const delta = [\n          this.lastCentroid[0] - centroid[0],\n          centroid[1] - this.lastCentroid[1],\n        ];\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        scaleCoordinate(delta, view.getResolution());\n        rotateCoordinate(delta, view.getRotation());\n        view.adjustCenterInternal(delta);\n      }\n    } else if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger down, tiny drag, second finger down\n      this.kinetic_.begin();\n    }\n    this.lastCentroid = centroid;\n    this.lastPointersCount_ = targetPointers.length;\n    mapBrowserEvent.originalEvent.preventDefault();\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (this.targetPointers.length === 0) {\n      if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n        const distance = this.kinetic_.getDistance();\n        const angle = this.kinetic_.getAngle();\n        const center = view.getCenterInternal();\n        const centerpx = map.getPixelFromCoordinateInternal(center);\n        const dest = map.getCoordinateFromPixelInternal([\n          centerpx[0] - distance * Math.cos(angle),\n          centerpx[1] - distance * Math.sin(angle),\n        ]);\n        view.animateInternal({\n          center: view.getConstrainedCenter(dest),\n          duration: 500,\n          easing: easeOut,\n        });\n      }\n      if (this.panning_) {\n        this.panning_ = false;\n        view.endInteraction();\n      }\n      return false;\n    }\n    if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger up, tiny drag, second finger up\n      this.kinetic_.begin();\n    }\n    this.lastCentroid = null;\n    return true;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      this.lastCentroid = null;\n      // stop any current animation\n      if (view.getAnimating()) {\n        view.cancelAnimations();\n      }\n      if (this.kinetic_) {\n        this.kinetic_.begin();\n      }\n      // No kinetic as soon as more than one pointer on the screen is\n      // detected. This is to prevent nasty pans after pinch.\n      this.noKinetic_ = this.targetPointers.length > 1;\n      return true;\n    }\n    return false;\n  }\n}\n\nexport default DragPan;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}