{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport BaseDecoder from './basedecoder.js';\nimport { LercParameters, LercAddCompression } from '../globals.js';\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n    const lercResult = Lerc.decode(buffer, {\n      returnPixelInterleavedDims: this.planarConfiguration === 1\n    });\n    const lercData = lercResult.pixels[0];\n    return lercData.buffer;\n  }\n}","map":{"version":3,"names":["inflate","Lerc","BaseDecoder","LercParameters","LercAddCompression","LercDecoder","constructor","fileDirectory","planarConfiguration","PlanarConfiguration","samplesPerPixel","SamplesPerPixel","addCompression","AddCompression","decodeBlock","buffer","None","Deflate","Uint8Array","Error","lercResult","decode","returnPixelInterleavedDims","lercData","pixels"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/geotiff/dist-module/compression/lerc.js"],"sourcesContent":["import { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport BaseDecoder from './basedecoder.js';\nimport { LercParameters, LercAddCompression } from '../globals.js';\n\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n\n    const lercResult = Lerc.decode(buffer, { returnPixelInterleavedDims: this.planarConfiguration === 1 });\n    const lercData = lercResult.pixels[0];\n    return lercData.buffer;\n  }\n}\n"],"mappings":";;;AAAA,SAASA,OAAO,QAAQ,MAAM;AAC9B,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,SAASC,cAAc,EAAEC,kBAAkB,QAAQ,eAAe;AAElE,eAAe,MAAMC,WAAW,SAASH,WAAW,CAAC;EACnDI,WAAWA,CAACC,aAAa,EAAE;IACzB,KAAK,CAAC,CAAC;IAEP,IAAI,CAACC,mBAAmB,GAAG,OAAOD,aAAa,CAACE,mBAAmB,KAAK,WAAW,GAAGF,aAAa,CAACE,mBAAmB,GAAG,CAAC;IAC3H,IAAI,CAACC,eAAe,GAAG,OAAOH,aAAa,CAACI,eAAe,KAAK,WAAW,GAAGJ,aAAa,CAACI,eAAe,GAAG,CAAC;IAE/G,IAAI,CAACC,cAAc,GAAGL,aAAa,CAACJ,cAAc,CAACA,cAAc,CAACU,cAAc,CAAC;EACnF;EAEAC,WAAWA,CAACC,MAAM,EAAE;IAClB,QAAQ,IAAI,CAACH,cAAc;MACzB,KAAKR,kBAAkB,CAACY,IAAI;QAC1B;MACF,KAAKZ,kBAAkB,CAACa,OAAO;QAC7BF,MAAM,GAAGf,OAAO,CAAC,IAAIkB,UAAU,CAACH,MAAM,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC;QACjD;MACF;QACE,MAAM,IAAII,KAAK,CAAE,8DAA6D,IAAI,CAACP,cAAe,EAAC,CAAC;IACxG;IAEA,MAAMQ,UAAU,GAAGnB,IAAI,CAACoB,MAAM,CAACN,MAAM,EAAE;MAAEO,0BAA0B,EAAE,IAAI,CAACd,mBAAmB,KAAK;IAAE,CAAC,CAAC;IACtG,MAAMe,QAAQ,GAAGH,UAAU,CAACI,MAAM,CAAC,CAAC,CAAC;IACrC,OAAOD,QAAQ,CAACR,MAAM;EACxB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}