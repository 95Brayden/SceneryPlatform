{"ast":null,"code":"/**\n * @module ol/source/ImageWMS\n */\n\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport { DECIMALS } from './common.js';\nimport { DEFAULT_VERSION, createLoader, getRequestParams, getRequestUrl } from './wms.js';\nimport { appendParams } from '../uri.js';\nimport { calculateSourceResolution } from '../reproj.js';\nimport { compareVersions } from '../string.js';\nimport { decode } from '../Image.js';\nimport { floor } from '../math.js';\nimport { getForViewAndSize } from '../extent.js';\nimport { get as getProjection, transform } from '../proj.js';\n\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\nconst GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} [url] WMS service URL.\n */\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageWMS extends ImageSource {\n  /**\n   * @param {Options} [options] ImageWMS options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params;\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n    const extent = getForViewAndSize(coordinate, resolution, 0, GETFEATUREINFO_IMAGE_SIZE);\n    const baseParams = {\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    Object.assign(baseParams, getRequestParams(this.params_, 'GetFeatureInfo'), params);\n    const x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);\n    const y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);\n    const v13 = compareVersions(baseParams['VERSION'], '1.3') >= 0;\n    baseParams[v13 ? 'I' : 'X'] = x;\n    baseParams[v13 ? 'J' : 'Y'] = y;\n    return getRequestUrl(this.url_, extent, GETFEATUREINFO_IMAGE_SIZE, sourceProjectionObj || projectionObj, baseParams);\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png'\n    };\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n    if (resolution !== undefined) {\n      const mpu = this.getProjection() ? this.getProjection().getMetersPerUnit() : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = resolution * mpu / pixelSize;\n    }\n    Object.assign(baseParams, params);\n    return appendParams( /** @type {string} */this.url_, baseParams);\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n    if (!this.loader) {\n      // Lazily create loader to pick up the view projection and to allow `params` updates\n      this.loader = createLoader({\n        crossOrigin: this.crossOrigin_,\n        params: this.params_,\n        projection: projection,\n        serverType: this.serverType_,\n        hidpi: this.hidpi_,\n        url: this.url_,\n        ratio: this.ratio_,\n        load: (image, src) => {\n          this.image.setImage(image);\n          this.imageLoadFunction_(this.image, src);\n          return decode(image);\n        }\n      });\n    }\n    return super.getImageInternal(extent, resolution, pixelRatio, projection);\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.loader = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.changed();\n  }\n  changed() {\n    this.image = null;\n    super.changed();\n  }\n}\nexport default ImageWMS;","map":{"version":3,"names":["ImageSource","defaultImageLoadFunction","DECIMALS","DEFAULT_VERSION","createLoader","getRequestParams","getRequestUrl","appendParams","calculateSourceResolution","compareVersions","decode","floor","getForViewAndSize","get","getProjection","transform","GETFEATUREINFO_IMAGE_SIZE","ImageWMS","constructor","options","attributions","interpolate","projection","resolutions","crossOrigin_","crossOrigin","undefined","url_","url","imageLoadFunction_","imageLoadFunction","params_","params","serverType_","serverType","hidpi_","hidpi","renderedRevision_","ratio_","ratio","getFeatureInfoUrl","coordinate","resolution","projectionObj","sourceProjectionObj","extent","baseParams","Object","assign","x","y","v13","getLegendUrl","layers","LAYERS","isSingleLayer","Array","isArray","length","mpu","getMetersPerUnit","pixelSize","getParams","getImageInternal","pixelRatio","loader","load","image","src","setImage","getImageLoadFunction","getUrl","setImageLoadFunction","changed","setUrl","updateParams"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/source/ImageWMS.js"],"sourcesContent":["/**\n * @module ol/source/ImageWMS\n */\n\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport {DECIMALS} from './common.js';\nimport {\n  DEFAULT_VERSION,\n  createLoader,\n  getRequestParams,\n  getRequestUrl,\n} from './wms.js';\nimport {appendParams} from '../uri.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {compareVersions} from '../string.js';\nimport {decode} from '../Image.js';\nimport {floor} from '../math.js';\nimport {getForViewAndSize} from '../extent.js';\nimport {get as getProjection, transform} from '../proj.js';\n\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\nconst GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} [params] WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} [url] WMS service URL.\n */\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageWMS extends ImageSource {\n  /**\n   * @param {Options} [options] ImageWMS options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params;\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(\n        sourceProjectionObj,\n        projectionObj,\n        coordinate,\n        resolution\n      );\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const extent = getForViewAndSize(\n      coordinate,\n      resolution,\n      0,\n      GETFEATUREINFO_IMAGE_SIZE\n    );\n\n    const baseParams = {\n      'QUERY_LAYERS': this.params_['LAYERS'],\n    };\n    Object.assign(\n      baseParams,\n      getRequestParams(this.params_, 'GetFeatureInfo'),\n      params\n    );\n\n    const x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);\n    const y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);\n    const v13 = compareVersions(baseParams['VERSION'], '1.3') >= 0;\n    baseParams[v13 ? 'I' : 'X'] = x;\n    baseParams[v13 ? 'J' : 'Y'] = y;\n\n    return getRequestUrl(\n      this.url_,\n      extent,\n      GETFEATUREINFO_IMAGE_SIZE,\n      sourceProjectionObj || projectionObj,\n      baseParams\n    );\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png',\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection()\n        ? this.getProjection().getMetersPerUnit()\n        : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n    }\n\n    Object.assign(baseParams, params);\n\n    return appendParams(/** @type {string} */ (this.url_), baseParams);\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n    if (!this.loader) {\n      // Lazily create loader to pick up the view projection and to allow `params` updates\n      this.loader = createLoader({\n        crossOrigin: this.crossOrigin_,\n        params: this.params_,\n        projection: projection,\n        serverType: this.serverType_,\n        hidpi: this.hidpi_,\n        url: this.url_,\n        ratio: this.ratio_,\n        load: (image, src) => {\n          this.image.setImage(image);\n          this.imageLoadFunction_(this.image, src);\n          return decode(image);\n        },\n      });\n    }\n\n    return super.getImageInternal(extent, resolution, pixelRatio, projection);\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.loader = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.changed();\n  }\n\n  changed() {\n    this.image = null;\n    super.changed();\n  }\n}\n\nexport default ImageWMS;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}