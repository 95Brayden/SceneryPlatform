{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/layer/Layer\n */\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport View from '../View.js';\nimport { assert } from '../asserts.js';\nimport { intersects } from '../extent.js';\nimport { listen, unlistenByKey } from '../events.js';\n\n/**\n * @typedef {function(import(\"../Map.js\").FrameState):HTMLElement} RenderFunction\n */\n\n/**\n * @typedef {'sourceready'|'change:source'} LayerEventType\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     LayerEventType, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|LayerEventType|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../Map.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number | undefined} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n * A `sourceready` event is fired when the layer's source is ready.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n * @fires import(\"../events/Event.js\").BaseEvent#sourceready\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */\nclass Layer extends BaseLayer {\n  /**\n   * @param {Options<SourceType>} options Layer options.\n   */\n  constructor(options) {\n    const baseOptions = Object.assign({}, options);\n    delete baseOptions.source;\n    super(baseOptions);\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {LayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceChangeKey_ = null;\n\n    /**\n     * @private\n     * @type {RendererType}\n     */\n    this.renderer_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.sourceReady_ = false;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.rendered = false;\n\n    // Overwrite default render method with a custom one\n    if (options.render) {\n      this.render = options.render;\n    }\n    if (options.map) {\n      this.setMap(options.map);\n    }\n    this.addChangeListener(LayerProperty.SOURCE, this.handleSourcePropertyChange_);\n    const source = options.source ? /** @type {SourceType} */options.source : null;\n    this.setSource(source);\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(array) {\n    array = array ? array : [];\n    array.push(this);\n    return array;\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(states) {\n    states = states ? states : [];\n    states.push(this.getLayerState());\n    return states;\n  }\n\n  /**\n   * Get the layer source.\n   * @return {SourceType|null} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  getSource() {\n    return (/** @type {SourceType} */this.get(LayerProperty.SOURCE) || null\n    );\n  }\n\n  /**\n   * @return {SourceType|null} The source being rendered.\n   */\n  getRenderSource() {\n    return this.getSource();\n  }\n\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    const source = this.getSource();\n    return !source ? 'undefined' : source.getState();\n  }\n\n  /**\n   * @private\n   */\n  handleSourceChange_() {\n    this.changed();\n    if (this.sourceReady_ || this.getSource().getState() !== 'ready') {\n      return;\n    }\n    this.sourceReady_ = true;\n    this.dispatchEvent('sourceready');\n  }\n\n  /**\n   * @private\n   */\n  handleSourcePropertyChange_() {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    this.sourceReady_ = false;\n    const source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);\n      if (source.getState() === 'ready') {\n        this.sourceReady_ = true;\n        setTimeout(() => {\n          this.dispatchEvent('sourceready');\n        }, 0);\n      }\n    }\n    this.changed();\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n   * an array of features.\n   */\n  getFeatures(pixel) {\n    if (!this.renderer_) {\n      return Promise.resolve([]);\n    }\n    return this.renderer_.getFeatures(pixel);\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n  getData(pixel) {\n    if (!this.renderer_ || !this.rendered) {\n      return null;\n    }\n    return this.renderer_.getData(pixel);\n  }\n\n  /**\n   * The layer is visible on the map view, i.e. within its min/max resolution or zoom and\n   * extent, not set to `visible: false`, and not inside a layer group that is set\n   * to `visible: false`.\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\n   * Only required when the layer is not added to a map.\n   * @return {boolean} The layer is visible in the map view.\n   * @api\n   */\n  isVisible(view) {\n    let frameState;\n    const map = this.getMapInternal();\n    if (!view && map) {\n      view = map.getView();\n    }\n    if (view instanceof View) {\n      frameState = {\n        viewState: view.getState(),\n        extent: view.calculateExtent()\n      };\n    } else {\n      frameState = view;\n    }\n    if (!frameState.layerStatesArray && map) {\n      frameState.layerStatesArray = map.getLayerGroup().getLayerStatesArray();\n    }\n    let layerState;\n    if (frameState.layerStatesArray) {\n      layerState = frameState.layerStatesArray.find(layerState => layerState.layer === this);\n    } else {\n      layerState = this.getLayerState();\n    }\n    const layerExtent = this.getExtent();\n    return inView(layerState, frameState.viewState) && (!layerExtent || intersects(layerExtent, frameState.extent));\n  }\n\n  /**\n   * Get the attributions of the source of this layer for the given view.\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\n   * Only required when the layer is not added to a map.\n   * @return {Array<string>} Attributions for this layer at the given view.\n   * @api\n   */\n  getAttributions(view) {\n    if (!this.isVisible(view)) {\n      return [];\n    }\n    let getAttributions;\n    const source = this.getSource();\n    if (source) {\n      getAttributions = source.getAttributions();\n    }\n    if (!getAttributions) {\n      return [];\n    }\n    const frameState = view instanceof View ? view.getViewStateAndExtent() : view;\n    let attributions = getAttributions(frameState);\n    if (!Array.isArray(attributions)) {\n      attributions = [attributions];\n    }\n    return attributions;\n  }\n\n  /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement|null} The rendered element.\n   */\n  render(frameState, target) {\n    const layerRenderer = this.getRenderer();\n    if (layerRenderer.prepareFrame(frameState)) {\n      this.rendered = true;\n      return layerRenderer.renderFrame(frameState, target);\n    }\n    return null;\n  }\n\n  /**\n   * Called when a layer is not visible during a map render.\n   */\n  unrender() {\n    this.rendered = false;\n  }\n\n  /**\n   * For use inside the library only.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */\n  setMapInternal(map) {\n    if (!map) {\n      this.unrender();\n    }\n    this.set(LayerProperty.MAP, map);\n  }\n\n  /**\n   * For use inside the library only.\n   * @return {import(\"../Map.js\").default|null} Map.\n   */\n  getMapInternal() {\n    return this.get(LayerProperty.MAP);\n  }\n\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map~Map#addLayer} instead.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {\n        const renderEvent = /** @type {import(\"../render/Event.js\").default} */evt;\n        const layerStatesArray = renderEvent.frameState.layerStatesArray;\n        const layerState = this.getLayerState(false);\n        assert(!layerStatesArray.some(function (arrayLayerState) {\n          return arrayLayerState.layer === layerState.layer;\n        }), 'A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.');\n        layerStatesArray.push(layerState);\n      }, this);\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the layer source.\n   * @param {SourceType|null} source The layer source.\n   * @observable\n   * @api\n   */\n  setSource(source) {\n    this.set(LayerProperty.SOURCE, source);\n  }\n\n  /**\n   * Get the renderer for this layer.\n   * @return {RendererType|null} The layer renderer.\n   */\n  getRenderer() {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n    return this.renderer_;\n  }\n\n  /**\n   * @return {boolean} The layer has a renderer.\n   */\n  hasRenderer() {\n    return !!this.renderer_;\n  }\n\n  /**\n   * Create a renderer for this layer.\n   * @return {RendererType} A layer renderer.\n   * @protected\n   */\n  createRenderer() {\n    return null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.renderer_) {\n      this.renderer_.dispose();\n      delete this.renderer_;\n    }\n    this.setSource(null);\n    super.disposeInternal();\n  }\n}\n\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n  const resolution = viewState.resolution;\n  if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) {\n    return false;\n  }\n  const zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\nexport default Layer;","map":{"version":3,"names":["BaseLayer","EventType","LayerProperty","RenderEventType","View","assert","intersects","listen","unlistenByKey","Layer","constructor","options","baseOptions","Object","assign","source","on","once","un","mapPrecomposeKey_","mapRenderKey_","sourceChangeKey_","renderer_","sourceReady_","rendered","render","map","setMap","addChangeListener","SOURCE","handleSourcePropertyChange_","setSource","getLayersArray","array","push","getLayerStatesArray","states","getLayerState","getSource","get","getRenderSource","getSourceState","getState","handleSourceChange_","changed","dispatchEvent","CHANGE","setTimeout","getFeatures","pixel","Promise","resolve","getData","isVisible","view","frameState","getMapInternal","getView","viewState","extent","calculateExtent","layerStatesArray","getLayerGroup","layerState","find","layer","layerExtent","getExtent","inView","getAttributions","getViewStateAndExtent","attributions","Array","isArray","target","layerRenderer","getRenderer","prepareFrame","renderFrame","unrender","setMapInternal","set","MAP","PRECOMPOSE","evt","renderEvent","some","arrayLayerState","createRenderer","hasRenderer","disposeInternal","dispose","visible","resolution","minResolution","maxResolution","zoom","minZoom","maxZoom"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/layer/Layer.js"],"sourcesContent":["/**\n * @module ol/layer/Layer\n */\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport View from '../View.js';\nimport {assert} from '../asserts.js';\nimport {intersects} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(import(\"../Map.js\").FrameState):HTMLElement} RenderFunction\n */\n\n/**\n * @typedef {'sourceready'|'change:source'} LayerEventType\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     LayerEventType, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|LayerEventType|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../Map.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number | undefined} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n * A `sourceready` event is fired when the layer's source is ready.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n * @fires import(\"../events/Event.js\").BaseEvent#sourceready\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */\nclass Layer extends BaseLayer {\n  /**\n   * @param {Options<SourceType>} options Layer options.\n   */\n  constructor(options) {\n    const baseOptions = Object.assign({}, options);\n    delete baseOptions.source;\n\n    super(baseOptions);\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {LayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceChangeKey_ = null;\n\n    /**\n     * @private\n     * @type {RendererType}\n     */\n    this.renderer_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.sourceReady_ = false;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.rendered = false;\n\n    // Overwrite default render method with a custom one\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.map) {\n      this.setMap(options.map);\n    }\n\n    this.addChangeListener(\n      LayerProperty.SOURCE,\n      this.handleSourcePropertyChange_\n    );\n\n    const source = options.source\n      ? /** @type {SourceType} */ (options.source)\n      : null;\n    this.setSource(source);\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(array) {\n    array = array ? array : [];\n    array.push(this);\n    return array;\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(states) {\n    states = states ? states : [];\n    states.push(this.getLayerState());\n    return states;\n  }\n\n  /**\n   * Get the layer source.\n   * @return {SourceType|null} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  getSource() {\n    return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;\n  }\n\n  /**\n   * @return {SourceType|null} The source being rendered.\n   */\n  getRenderSource() {\n    return this.getSource();\n  }\n\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    const source = this.getSource();\n    return !source ? 'undefined' : source.getState();\n  }\n\n  /**\n   * @private\n   */\n  handleSourceChange_() {\n    this.changed();\n    if (this.sourceReady_ || this.getSource().getState() !== 'ready') {\n      return;\n    }\n    this.sourceReady_ = true;\n    this.dispatchEvent('sourceready');\n  }\n\n  /**\n   * @private\n   */\n  handleSourcePropertyChange_() {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    this.sourceReady_ = false;\n    const source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(\n        source,\n        EventType.CHANGE,\n        this.handleSourceChange_,\n        this\n      );\n      if (source.getState() === 'ready') {\n        this.sourceReady_ = true;\n        setTimeout(() => {\n          this.dispatchEvent('sourceready');\n        }, 0);\n      }\n    }\n    this.changed();\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n   * an array of features.\n   */\n  getFeatures(pixel) {\n    if (!this.renderer_) {\n      return Promise.resolve([]);\n    }\n    return this.renderer_.getFeatures(pixel);\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n  getData(pixel) {\n    if (!this.renderer_ || !this.rendered) {\n      return null;\n    }\n    return this.renderer_.getData(pixel);\n  }\n\n  /**\n   * The layer is visible on the map view, i.e. within its min/max resolution or zoom and\n   * extent, not set to `visible: false`, and not inside a layer group that is set\n   * to `visible: false`.\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\n   * Only required when the layer is not added to a map.\n   * @return {boolean} The layer is visible in the map view.\n   * @api\n   */\n  isVisible(view) {\n    let frameState;\n    const map = this.getMapInternal();\n    if (!view && map) {\n      view = map.getView();\n    }\n    if (view instanceof View) {\n      frameState = {\n        viewState: view.getState(),\n        extent: view.calculateExtent(),\n      };\n    } else {\n      frameState = view;\n    }\n    if (!frameState.layerStatesArray && map) {\n      frameState.layerStatesArray = map.getLayerGroup().getLayerStatesArray();\n    }\n    let layerState;\n    if (frameState.layerStatesArray) {\n      layerState = frameState.layerStatesArray.find(\n        (layerState) => layerState.layer === this\n      );\n    } else {\n      layerState = this.getLayerState();\n    }\n\n    const layerExtent = this.getExtent();\n\n    return (\n      inView(layerState, frameState.viewState) &&\n      (!layerExtent || intersects(layerExtent, frameState.extent))\n    );\n  }\n\n  /**\n   * Get the attributions of the source of this layer for the given view.\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\n   * Only required when the layer is not added to a map.\n   * @return {Array<string>} Attributions for this layer at the given view.\n   * @api\n   */\n  getAttributions(view) {\n    if (!this.isVisible(view)) {\n      return [];\n    }\n    let getAttributions;\n    const source = this.getSource();\n    if (source) {\n      getAttributions = source.getAttributions();\n    }\n    if (!getAttributions) {\n      return [];\n    }\n    const frameState =\n      view instanceof View ? view.getViewStateAndExtent() : view;\n    let attributions = getAttributions(frameState);\n    if (!Array.isArray(attributions)) {\n      attributions = [attributions];\n    }\n    return attributions;\n  }\n\n  /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement|null} The rendered element.\n   */\n  render(frameState, target) {\n    const layerRenderer = this.getRenderer();\n\n    if (layerRenderer.prepareFrame(frameState)) {\n      this.rendered = true;\n      return layerRenderer.renderFrame(frameState, target);\n    }\n    return null;\n  }\n\n  /**\n   * Called when a layer is not visible during a map render.\n   */\n  unrender() {\n    this.rendered = false;\n  }\n\n  /**\n   * For use inside the library only.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */\n  setMapInternal(map) {\n    if (!map) {\n      this.unrender();\n    }\n    this.set(LayerProperty.MAP, map);\n  }\n\n  /**\n   * For use inside the library only.\n   * @return {import(\"../Map.js\").default|null} Map.\n   */\n  getMapInternal() {\n    return this.get(LayerProperty.MAP);\n  }\n\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map~Map#addLayer} instead.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(\n        map,\n        RenderEventType.PRECOMPOSE,\n        function (evt) {\n          const renderEvent =\n            /** @type {import(\"../render/Event.js\").default} */ (evt);\n          const layerStatesArray = renderEvent.frameState.layerStatesArray;\n          const layerState = this.getLayerState(false);\n          assert(\n            !layerStatesArray.some(function (arrayLayerState) {\n              return arrayLayerState.layer === layerState.layer;\n            }),\n            'A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.'\n          );\n          layerStatesArray.push(layerState);\n        },\n        this\n      );\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the layer source.\n   * @param {SourceType|null} source The layer source.\n   * @observable\n   * @api\n   */\n  setSource(source) {\n    this.set(LayerProperty.SOURCE, source);\n  }\n\n  /**\n   * Get the renderer for this layer.\n   * @return {RendererType|null} The layer renderer.\n   */\n  getRenderer() {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n    return this.renderer_;\n  }\n\n  /**\n   * @return {boolean} The layer has a renderer.\n   */\n  hasRenderer() {\n    return !!this.renderer_;\n  }\n\n  /**\n   * Create a renderer for this layer.\n   * @return {RendererType} A layer renderer.\n   * @protected\n   */\n  createRenderer() {\n    return null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.renderer_) {\n      this.renderer_.dispose();\n      delete this.renderer_;\n    }\n\n    this.setSource(null);\n    super.disposeInternal();\n  }\n}\n\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n  const resolution = viewState.resolution;\n  if (\n    resolution < layerState.minResolution ||\n    resolution >= layerState.maxResolution\n  ) {\n    return false;\n  }\n  const zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\n\nexport default Layer;\n"],"mappings":";AAAA;AACA;AACA;AACA,OAAOA,SAAS,MAAM,WAAW;AACjC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,aAAa,MAAM,eAAe;AACzC,OAAOC,eAAe,MAAM,wBAAwB;AACpD,OAAOC,IAAI,MAAM,YAAY;AAC7B,SAAQC,MAAM,QAAO,eAAe;AACpC,SAAQC,UAAU,QAAO,cAAc;AACvC,SAAQC,MAAM,EAAEC,aAAa,QAAO,cAAc;;AAElD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,SAAST,SAAS,CAAC;EAC5B;AACF;AACA;EACEU,WAAWA,CAACC,OAAO,EAAE;IACnB,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,OAAO,CAAC;IAC9C,OAAOC,WAAW,CAACG,MAAM;IAEzB,KAAK,CAACH,WAAW,CAAC;;IAElB;AACJ;AACA;IACI,IAAI,CAACI,EAAE;;IAEP;AACJ;AACA;IACI,IAAI,CAACC,IAAI;;IAET;AACJ;AACA;IACI,IAAI,CAACC,EAAE;;IAEP;AACJ;AACA;AACA;IACI,IAAI,CAACC,iBAAiB,GAAG,IAAI;;IAE7B;AACJ;AACA;AACA;IACI,IAAI,CAACC,aAAa,GAAG,IAAI;;IAEzB;AACJ;AACA;AACA;IACI,IAAI,CAACC,gBAAgB,GAAG,IAAI;;IAE5B;AACJ;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAG,IAAI;;IAErB;AA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}