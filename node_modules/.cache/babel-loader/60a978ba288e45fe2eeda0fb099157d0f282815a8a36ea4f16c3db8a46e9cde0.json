{"ast":null,"code":"/**\n * @module ol/size\n */\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = size[0] + 2 * num;\n  dest[1] = size[1] + 2 * num;\n  return dest;\n}\n\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The scaled size.\n */\nexport function scale(size, ratio, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = size[0] * ratio + 0.5 | 0;\n  dest[1] = size[1] * ratio + 0.5 | 0;\n  return dest;\n}\n\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\nexport function toSize(size, dest) {\n  if (Array.isArray(size)) {\n    return size;\n  }\n  if (dest === undefined) {\n    dest = [size, size];\n  } else {\n    dest[0] = size;\n    dest[1] = size;\n  }\n  return dest;\n}","map":{"version":3,"names":["buffer","size","num","dest","undefined","hasArea","scale","ratio","toSize","Array","isArray"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/size.js"],"sourcesContent":["/**\n * @module ol/size\n */\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = size[0] + 2 * num;\n  dest[1] = size[1] + 2 * num;\n  return dest;\n}\n\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The scaled size.\n */\nexport function scale(size, ratio, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = (size[0] * ratio + 0.5) | 0;\n  dest[1] = (size[1] * ratio + 0.5) | 0;\n  return dest;\n}\n\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\nexport function toSize(size, dest) {\n  if (Array.isArray(size)) {\n    return size;\n  }\n  if (dest === undefined) {\n    dest = [size, size];\n  } else {\n    dest[0] = size;\n    dest[1] = size;\n  }\n  return dest;\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,MAAMA,CAACC,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAE;EACtC,IAAIA,IAAI,KAAKC,SAAS,EAAE;IACtBD,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACf;EACAA,IAAI,CAAC,CAAC,CAAC,GAAGF,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGC,GAAG;EAC3BC,IAAI,CAAC,CAAC,CAAC,GAAGF,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGC,GAAG;EAC3B,OAAOC,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,OAAOA,CAACJ,IAAI,EAAE;EAC5B,OAAOA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,KAAKA,CAACL,IAAI,EAAEM,KAAK,EAAEJ,IAAI,EAAE;EACvC,IAAIA,IAAI,KAAKC,SAAS,EAAE;IACtBD,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACf;EACAA,IAAI,CAAC,CAAC,CAAC,GAAIF,IAAI,CAAC,CAAC,CAAC,GAAGM,KAAK,GAAG,GAAG,GAAI,CAAC;EACrCJ,IAAI,CAAC,CAAC,CAAC,GAAIF,IAAI,CAAC,CAAC,CAAC,GAAGM,KAAK,GAAG,GAAG,GAAI,CAAC;EACrC,OAAOJ,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,MAAMA,CAACP,IAAI,EAAEE,IAAI,EAAE;EACjC,IAAIM,KAAK,CAACC,OAAO,CAACT,IAAI,CAAC,EAAE;IACvB,OAAOA,IAAI;EACb;EACA,IAAIE,IAAI,KAAKC,SAAS,EAAE;IACtBD,IAAI,GAAG,CAACF,IAAI,EAAEA,IAAI,CAAC;EACrB,CAAC,MAAM;IACLE,IAAI,CAAC,CAAC,CAAC,GAAGF,IAAI;IACdE,IAAI,CAAC,CAAC,CAAC,GAAGF,IAAI;EAChB;EACA,OAAOE,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}