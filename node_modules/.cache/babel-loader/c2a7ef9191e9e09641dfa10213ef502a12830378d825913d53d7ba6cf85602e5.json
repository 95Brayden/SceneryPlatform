{"ast":null,"code":"/**\n * @module ol/geom/LineString\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestPoint, maxSquaredDelta } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { douglasPeucker } from './flat/simplify.js';\nimport { extend } from '../array.js';\nimport { forEach as forEachSegment } from './flat/segments.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { interpolatePoint, lineStringCoordinateAtM } from './flat/interpolate.js';\nimport { intersectsLineString } from './flat/intersectsextent.js';\nimport { lineStringLength } from './flat/length.js';\n\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nclass LineString extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatMidpoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatMidpointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(layout, /** @type {Array<number>} */coordinates);\n    } else {\n      this.setCoordinates( /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n      coordinates, layout);\n    }\n  }\n\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @api\n   */\n  appendCoordinate(coordinate) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = coordinate.slice();\n    } else {\n      extend(this.flatCoordinates, coordinate);\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LineString} Clone.\n   * @api\n   */\n  clone() {\n    const lineString = new LineString(this.flatCoordinates.slice(), this.layout);\n    lineString.applyProperties(this);\n    return lineString;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  }\n\n  /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n   *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */\n  forEachSegment(callback) {\n    return forEachSegment(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, extrapolate) {\n    if (this.layout != 'XYM' && this.layout != 'XYZM') {\n      return null;\n    }\n    extrapolate = extrapolate !== undefined ? extrapolate : false;\n    return lineStringCoordinateAtM(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);\n  }\n\n  /**\n   * Return the coordinates of the linestring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  }\n\n  /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {import(\"../coordinate.js\").Coordinate} [dest] Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n   * @api\n   */\n  getCoordinateAt(fraction, dest) {\n    return interpolatePoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, dest, this.stride);\n  }\n\n  /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */\n  getLength() {\n    return lineStringLength(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n  getFlatMidpoint() {\n    if (this.flatMidpointRevision_ != this.getRevision()) {\n      this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n      this.flatMidpointRevision_ = this.getRevision();\n    }\n    return this.flatMidpoint_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} Simplified LineString.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    return new LineString(simplifiedFlatCoordinates, 'XY');\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'LineString';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineString(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n  }\n\n  /**\n   * Set the coordinates of the linestring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n}\nexport default LineString;","map":{"version":3,"names":["SimpleGeometry","assignClosestPoint","maxSquaredDelta","closestSquaredDistanceXY","deflateCoordinates","douglasPeucker","extend","forEach","forEachSegment","inflateCoordinates","interpolatePoint","lineStringCoordinateAtM","intersectsLineString","lineStringLength","LineString","constructor","coordinates","layout","flatMidpoint_","flatMidpointRevision_","maxDelta_","maxDeltaRevision_","undefined","Array","isArray","setFlatCoordinates","setCoordinates","appendCoordinate","coordinate","flatCoordinates","slice","changed","clone","lineString","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","length","stride","callback","getCoordinateAtM","m","extrapolate","getCoordinates","getCoordinateAt","fraction","dest","getLength","getFlatMidpoint","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","getType","intersectsExtent","extent","setLayout"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/geom/LineString.js"],"sourcesContent":["/**\n * @module ol/geom/LineString\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {douglasPeucker} from './flat/simplify.js';\nimport {extend} from '../array.js';\nimport {forEach as forEachSegment} from './flat/segments.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {interpolatePoint, lineStringCoordinateAtM} from './flat/interpolate.js';\nimport {intersectsLineString} from './flat/intersectsextent.js';\nimport {lineStringLength} from './flat/length.js';\n\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nclass LineString extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatMidpoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatMidpointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @api\n   */\n  appendCoordinate(coordinate) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = coordinate.slice();\n    } else {\n      extend(this.flatCoordinates, coordinate);\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LineString} Clone.\n   * @api\n   */\n  clone() {\n    const lineString = new LineString(\n      this.flatCoordinates.slice(),\n      this.layout\n    );\n    lineString.applyProperties(this);\n    return lineString;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        maxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.flatCoordinates.length,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      this.maxDelta_,\n      false,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n   *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */\n  forEachSegment(callback) {\n    return forEachSegment(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      callback\n    );\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, extrapolate) {\n    if (this.layout != 'XYM' && this.layout != 'XYZM') {\n      return null;\n    }\n    extrapolate = extrapolate !== undefined ? extrapolate : false;\n    return lineStringCoordinateAtM(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      m,\n      extrapolate\n    );\n  }\n\n  /**\n   * Return the coordinates of the linestring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {import(\"../coordinate.js\").Coordinate} [dest] Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n   * @api\n   */\n  getCoordinateAt(fraction, dest) {\n    return interpolatePoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      fraction,\n      dest,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */\n  getLength() {\n    return lineStringLength(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n  getFlatMidpoint() {\n    if (this.flatMidpointRevision_ != this.getRevision()) {\n      this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n      this.flatMidpointRevision_ = this.getRevision();\n    }\n    return this.flatMidpoint_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} Simplified LineString.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0\n    );\n    return new LineString(simplifiedFlatCoordinates, 'XY');\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'LineString';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineString(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the linestring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default LineString;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}