{"ast":null,"code":"/**\n * @module ol/reproj/Image\n */\nimport { ERROR_THRESHOLD } from './common.js';\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageWrapper from '../Image.js';\nimport Triangulation from './Triangulation.js';\nimport { calculateSourceResolution, render as renderReprojected } from '../reproj.js';\nimport { fromResolutionLike } from '../resolution.js';\nimport { getCenter, getHeight, getIntersection, getWidth, isEmpty } from '../extent.js';\nimport { listen, unlistenByKey } from '../events.js';\n\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../Image.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nclass ReprojImage extends ImageWrapper {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {boolean} interpolate Use linear interpolation when resampling.\n   */\n  constructor(sourceProj, targetProj, targetExtent, targetResolution, pixelRatio, getImageFunction, interpolate) {\n    let maxSourceExtent = sourceProj.getExtent();\n    if (maxSourceExtent && sourceProj.canWrapX()) {\n      maxSourceExtent = maxSourceExtent.slice();\n      maxSourceExtent[0] = -Infinity;\n      maxSourceExtent[2] = Infinity;\n    }\n    let maxTargetExtent = targetProj.getExtent();\n    if (maxTargetExtent && targetProj.canWrapX()) {\n      maxTargetExtent = maxTargetExtent.slice();\n      maxTargetExtent[0] = -Infinity;\n      maxTargetExtent[2] = Infinity;\n    }\n    const limitedTargetExtent = maxTargetExtent ? getIntersection(targetExtent, maxTargetExtent) : targetExtent;\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n    const triangulation = new Triangulation(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = isEmpty(sourceExtent) ? null : getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = interpolate;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  getProjection() {\n    return this.targetProj_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n      this.canvas_ = renderReprojected(width, height, this.sourcePixelRatio_, fromResolutionLike(this.sourceImage_.getResolution()), this.maxSourceExtent_, this.targetResolution_, this.targetExtent_, this.triangulation_, [{\n        extent: this.sourceImage_.getExtent(),\n        image: this.sourceImage_.getImage()\n      }], 0, undefined, this.interpolate_);\n    }\n    this.state = sourceState;\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      const sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(this.sourceImage_, EventType.CHANGE, function (e) {\n          const sourceState = this.sourceImage_.getState();\n          if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n            this.unlistenSource_();\n            this.reproject_();\n          }\n        }, this);\n        this.sourceImage_.load();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSource_() {\n    unlistenByKey( /** @type {!import(\"../events.js\").EventsKey} */this.sourceListenerKey_);\n    this.sourceListenerKey_ = null;\n  }\n}\nexport default ReprojImage;","map":{"version":3,"names":["ERROR_THRESHOLD","EventType","ImageState","ImageWrapper","Triangulation","calculateSourceResolution","render","renderReprojected","fromResolutionLike","getCenter","getHeight","getIntersection","getWidth","isEmpty","listen","unlistenByKey","ReprojImage","constructor","sourceProj","targetProj","targetExtent","targetResolution","pixelRatio","getImageFunction","interpolate","maxSourceExtent","getExtent","canWrapX","slice","Infinity","maxTargetExtent","limitedTargetExtent","targetCenter","sourceResolution","errorThresholdInPixels","triangulation","sourceExtent","calculateSourceExtent","sourceImage","state","IDLE","EMPTY","sourcePixelRatio","getPixelRatio","targetProj_","maxSourceExtent_","triangulation_","targetResolution_","targetExtent_","sourceImage_","sourcePixelRatio_","interpolate_","canvas_","sourceListenerKey_","disposeInternal","LOADING","unlistenSource_","getImage","getProjection","reproject_","sourceState","getState","LOADED","width","height","getResolution","extent","image","undefined","changed","load","ERROR","CHANGE","e"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/reproj/Image.js"],"sourcesContent":["/**\n * @module ol/reproj/Image\n */\nimport {ERROR_THRESHOLD} from './common.js';\n\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageWrapper from '../Image.js';\nimport Triangulation from './Triangulation.js';\nimport {\n  calculateSourceResolution,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport {\n  getCenter,\n  getHeight,\n  getIntersection,\n  getWidth,\n  isEmpty,\n} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../Image.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nclass ReprojImage extends ImageWrapper {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {boolean} interpolate Use linear interpolation when resampling.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    targetResolution,\n    pixelRatio,\n    getImageFunction,\n    interpolate\n  ) {\n    let maxSourceExtent = sourceProj.getExtent();\n    if (maxSourceExtent && sourceProj.canWrapX()) {\n      maxSourceExtent = maxSourceExtent.slice();\n      maxSourceExtent[0] = -Infinity;\n      maxSourceExtent[2] = Infinity;\n    }\n    let maxTargetExtent = targetProj.getExtent();\n    if (maxTargetExtent && targetProj.canWrapX()) {\n      maxTargetExtent = maxTargetExtent.slice();\n      maxTargetExtent[0] = -Infinity;\n      maxTargetExtent[2] = Infinity;\n    }\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(\n      sourceProj,\n      targetProj,\n      targetCenter,\n      targetResolution\n    );\n\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n\n    const triangulation = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution\n    );\n\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = isEmpty(sourceExtent)\n      ? null\n      : getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = interpolate;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  getProjection() {\n    return this.targetProj_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.sourcePixelRatio_,\n        fromResolutionLike(this.sourceImage_.getResolution()),\n        this.maxSourceExtent_,\n        this.targetResolution_,\n        this.targetExtent_,\n        this.triangulation_,\n        [\n          {\n            extent: this.sourceImage_.getExtent(),\n            image: this.sourceImage_.getImage(),\n          },\n        ],\n        0,\n        undefined,\n        this.interpolate_\n      );\n    }\n    this.state = sourceState;\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n\n      const sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(\n          this.sourceImage_,\n          EventType.CHANGE,\n          function (e) {\n            const sourceState = this.sourceImage_.getState();\n            if (\n              sourceState == ImageState.LOADED ||\n              sourceState == ImageState.ERROR\n            ) {\n              this.unlistenSource_();\n              this.reproject_();\n            }\n          },\n          this\n        );\n        this.sourceImage_.load();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSource_() {\n    unlistenByKey(\n      /** @type {!import(\"../events.js\").EventsKey} */ (this.sourceListenerKey_)\n    );\n    this.sourceListenerKey_ = null;\n  }\n}\n\nexport default ReprojImage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}