{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/source/IIIF\n */\n\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport { CustomTile } from './Zoomify.js';\nimport { DEFAULT_TILE_SIZE } from '../tilegrid/common.js';\nimport { Versions } from '../format/IIIFInfo.js';\nimport { assert } from '../asserts.js';\nimport { getTopLeft } from '../extent.js';\nimport { toSize } from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Size of the cache.\n * @property {null|string} [crossOrigin] The value for the crossOrigin option of the request.\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]] The extent.\n * @property {string} [format='jpg'] Requested image format.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {Array<import(\"../size.js\").Size>} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio] Tile pixel ratio.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition] Transition.\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image ID.\n * @property {import(\"../format/IIIFInfo.js\").Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\nfunction formatPercentage(percentage) {\n  return percentage.toLocaleString('en', {\n    maximumFractionDigits: 10\n  });\n}\n\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\nclass IIIF extends TileImage {\n  /**\n   * @param {Options} [options] Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\n   * to parse Image API service information responses into constructor options.\n   * @api\n   */\n  constructor(options) {\n    /**\n     * @type {Partial<Options>}\n     */\n    const partialOptions = options || {};\n    let baseUrl = partialOptions.url || '';\n    baseUrl = baseUrl + (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === '' ? '' : '/');\n    const version = partialOptions.version || Versions.VERSION2;\n    const sizes = partialOptions.sizes || [];\n    const size = partialOptions.size;\n    assert(size != undefined && Array.isArray(size) && size.length == 2 && !isNaN(size[0]) && size[0] > 0 && !isNaN(size[1]) && size[1] > 0, 'Missing or invalid `size`');\n    const width = size[0];\n    const height = size[1];\n    const tileSize = partialOptions.tileSize;\n    const tilePixelRatio = partialOptions.tilePixelRatio || 1;\n    const format = partialOptions.format || 'jpg';\n    const quality = partialOptions.quality || (partialOptions.version == Versions.VERSION1 ? 'native' : 'default');\n    let resolutions = partialOptions.resolutions || [];\n    const supports = partialOptions.supports || [];\n    const extent = partialOptions.extent || [0, -height, width, 0];\n    const supportsListedSizes = sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n    const supportsListedTiles = tileSize !== undefined && (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0 || Array.isArray(tileSize) && tileSize.length > 0);\n    const supportsArbitraryTiling = supports != undefined && Array.isArray(supports) && (supports.includes('regionByPx') || supports.includes('regionByPct')) && (supports.includes('sizeByWh') || supports.includes('sizeByH') || supports.includes('sizeByW') || supports.includes('sizeByPct'));\n    let tileWidth, tileHeight, maxZoom;\n    resolutions.sort(function (a, b) {\n      return b - a;\n    });\n    if (supportsListedTiles || supportsArbitraryTiling) {\n      if (tileSize != undefined) {\n        if (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0) {\n          tileWidth = tileSize;\n          tileHeight = tileSize;\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\n          if (tileSize.length == 1 || tileSize[1] == undefined && Number.isInteger(tileSize[0])) {\n            tileWidth = tileSize[0];\n            tileHeight = tileSize[0];\n          }\n          if (tileSize.length == 2) {\n            if (Number.isInteger(tileSize[0]) && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[0];\n              tileHeight = tileSize[1];\n            } else if (tileSize[0] == undefined && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[1];\n              tileHeight = tileSize[1];\n            }\n          }\n        }\n      }\n      if (tileWidth === undefined || tileHeight === undefined) {\n        tileWidth = DEFAULT_TILE_SIZE;\n        tileHeight = DEFAULT_TILE_SIZE;\n      }\n      if (resolutions.length == 0) {\n        maxZoom = Math.max(Math.ceil(Math.log(width / tileWidth) / Math.LN2), Math.ceil(Math.log(height / tileHeight) / Math.LN2));\n        for (let i = maxZoom; i >= 0; i--) {\n          resolutions.push(Math.pow(2, i));\n        }\n      } else {\n        const maxScaleFactor = Math.max(...resolutions);\n        // TODO maxScaleFactor might not be a power to 2\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n      }\n    } else {\n      // No tile support.\n      tileWidth = width;\n      tileHeight = height;\n      resolutions = [];\n      if (supportsListedSizes) {\n        /*\n         * 'sizes' provided. Use full region in different resolutions. Every\n         * resolution has only one tile.\n         */\n        sizes.sort(function (a, b) {\n          return a[0] - b[0];\n        });\n        maxZoom = -1;\n        const ignoredSizesIndex = [];\n        for (let i = 0; i < sizes.length; i++) {\n          const resolution = width / sizes[i][0];\n          if (resolutions.length > 0 && resolutions[resolutions.length - 1] == resolution) {\n            ignoredSizesIndex.push(i);\n            continue;\n          }\n          resolutions.push(resolution);\n          maxZoom++;\n        }\n        if (ignoredSizesIndex.length > 0) {\n          for (let i = 0; i < ignoredSizesIndex.length; i++) {\n            sizes.splice(ignoredSizesIndex[i] - i, 1);\n          }\n        }\n      } else {\n        // No useful image information at all. Try pseudo tile with full image.\n        resolutions.push(1);\n        sizes.push([width, height]);\n        maxZoom = 0;\n      }\n    }\n    const tileGrid = new TileGrid({\n      tileSize: [tileWidth, tileHeight],\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions\n    });\n    const tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      let regionParam, sizeParam;\n      const zoom = tileCoord[0];\n      if (zoom > maxZoom) {\n        return;\n      }\n      const tileX = tileCoord[1],\n        tileY = tileCoord[2],\n        scale = resolutions[zoom];\n      if (tileX === undefined || tileY === undefined || scale === undefined || tileX < 0 || Math.ceil(width / scale / tileWidth) <= tileX || tileY < 0 || Math.ceil(height / scale / tileHeight) <= tileY) {\n        return;\n      }\n      if (supportsArbitraryTiling || supportsListedTiles) {\n        const regionX = tileX * tileWidth * scale,\n          regionY = tileY * tileHeight * scale;\n        let regionW = tileWidth * scale,\n          regionH = tileHeight * scale,\n          sizeW = tileWidth,\n          sizeH = tileHeight;\n        if (regionX + regionW > width) {\n          regionW = width - regionX;\n        }\n        if (regionY + regionH > height) {\n          regionH = height - regionY;\n        }\n        if (regionX + tileWidth * scale > width) {\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\n        }\n        if (regionY + tileHeight * scale > height) {\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\n        }\n        if (regionX == 0 && regionW == width && regionY == 0 && regionH == height) {\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\n          regionParam = 'full';\n        } else if (!supportsArbitraryTiling || supports.includes('regionByPx')) {\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n        } else if (supports.includes('regionByPct')) {\n          const pctX = formatPercentage(regionX / width * 100),\n            pctY = formatPercentage(regionY / height * 100),\n            pctW = formatPercentage(regionW / width * 100),\n            pctH = formatPercentage(regionH / height * 100);\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n        }\n        if (version == Versions.VERSION3 && (!supportsArbitraryTiling || supports.includes('sizeByWh'))) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {\n          sizeParam = sizeW + ',';\n        } else if (supports.includes('sizeByH')) {\n          sizeParam = ',' + sizeH;\n        } else if (supports.includes('sizeByWh')) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (supports.includes('sizeByPct')) {\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\n        }\n      } else {\n        regionParam = 'full';\n        if (supportsListedSizes) {\n          const regionWidth = sizes[zoom][0],\n            regionHeight = sizes[zoom][1];\n          if (version == Versions.VERSION3) {\n            if (regionWidth == width && regionHeight == height) {\n              sizeParam = 'max';\n            } else {\n              sizeParam = regionWidth + ',' + regionHeight;\n            }\n          } else {\n            if (regionWidth == width) {\n              sizeParam = 'full';\n            } else {\n              sizeParam = regionWidth + ',';\n            }\n          }\n        } else {\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n        }\n      }\n      return baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format;\n    };\n    const IiifTileClass = CustomTile.bind(null, toSize(tileSize || 256).map(function (size) {\n      return size * tilePixelRatio;\n    }));\n    super({\n      attributions: partialOptions.attributions,\n      attributionsCollapsible: partialOptions.attributionsCollapsible,\n      cacheSize: partialOptions.cacheSize,\n      crossOrigin: partialOptions.crossOrigin,\n      interpolate: partialOptions.interpolate,\n      projection: partialOptions.projection,\n      reprojectionErrorThreshold: partialOptions.reprojectionErrorThreshold,\n      state: partialOptions.state,\n      tileClass: IiifTileClass,\n      tileGrid: tileGrid,\n      tilePixelRatio: partialOptions.tilePixelRatio,\n      tileUrlFunction: tileUrlFunction,\n      transition: partialOptions.transition\n    });\n\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = partialOptions.zDirection;\n  }\n}\nexport default IIIF;","map":{"version":3,"names":["TileGrid","TileImage","CustomTile","DEFAULT_TILE_SIZE","Versions","assert","getTopLeft","toSize","formatPercentage","percentage","toLocaleString","maximumFractionDigits","IIIF","constructor","options","partialOptions","baseUrl","url","lastIndexOf","length","version","VERSION2","sizes","size","undefined","Array","isArray","isNaN","width","height","tileSize","tilePixelRatio","format","quality","VERSION1","resolutions","supports","extent","supportsListedSizes","supportsListedTiles","Number","isInteger","supportsArbitraryTiling","includes","tileWidth","tileHeight","maxZoom","sort","a","b","Math","max","ceil","log","LN2","i","push","pow","maxScaleFactor","round","ignoredSizesIndex","resolution","splice","tileGrid","origin","tileUrlFunction","tileCoord","pixelRatio","projection","regionParam","sizeParam","zoom","tileX","tileY","scale","regionX","regionY","regionW","regionH","sizeW","sizeH","floor","pctX","pctY","pctW","pctH","VERSION3","regionWidth","regionHeight","IiifTileClass","bind","map","attributions","attributionsCollapsible","cacheSize","crossOrigin","interpolate","reprojectionErrorThreshold","state","tileClass","transition","zDirection"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/source/IIIF.js"],"sourcesContent":["/**\n * @module ol/source/IIIF\n */\n\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport {CustomTile} from './Zoomify.js';\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\nimport {Versions} from '../format/IIIFInfo.js';\nimport {assert} from '../asserts.js';\nimport {getTopLeft} from '../extent.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Size of the cache.\n * @property {null|string} [crossOrigin] The value for the crossOrigin option of the request.\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]] The extent.\n * @property {string} [format='jpg'] Requested image format.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {Array<import(\"../size.js\").Size>} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio] Tile pixel ratio.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition] Transition.\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image ID.\n * @property {import(\"../format/IIIFInfo.js\").Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\nfunction formatPercentage(percentage) {\n  return percentage.toLocaleString('en', {maximumFractionDigits: 10});\n}\n\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\nclass IIIF extends TileImage {\n  /**\n   * @param {Options} [options] Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\n   * to parse Image API service information responses into constructor options.\n   * @api\n   */\n  constructor(options) {\n    /**\n     * @type {Partial<Options>}\n     */\n    const partialOptions = options || {};\n\n    let baseUrl = partialOptions.url || '';\n    baseUrl =\n      baseUrl +\n      (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === ''\n        ? ''\n        : '/');\n    const version = partialOptions.version || Versions.VERSION2;\n    const sizes = partialOptions.sizes || [];\n    const size = partialOptions.size;\n    assert(\n      size != undefined &&\n        Array.isArray(size) &&\n        size.length == 2 &&\n        !isNaN(size[0]) &&\n        size[0] > 0 &&\n        !isNaN(size[1]) &&\n        size[1] > 0,\n      'Missing or invalid `size`'\n    );\n    const width = size[0];\n    const height = size[1];\n    const tileSize = partialOptions.tileSize;\n    const tilePixelRatio = partialOptions.tilePixelRatio || 1;\n    const format = partialOptions.format || 'jpg';\n    const quality =\n      partialOptions.quality ||\n      (partialOptions.version == Versions.VERSION1 ? 'native' : 'default');\n    let resolutions = partialOptions.resolutions || [];\n    const supports = partialOptions.supports || [];\n    const extent = partialOptions.extent || [0, -height, width, 0];\n\n    const supportsListedSizes =\n      sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n    const supportsListedTiles =\n      tileSize !== undefined &&\n      ((typeof tileSize === 'number' &&\n        Number.isInteger(tileSize) &&\n        tileSize > 0) ||\n        (Array.isArray(tileSize) && tileSize.length > 0));\n    const supportsArbitraryTiling =\n      supports != undefined &&\n      Array.isArray(supports) &&\n      (supports.includes('regionByPx') || supports.includes('regionByPct')) &&\n      (supports.includes('sizeByWh') ||\n        supports.includes('sizeByH') ||\n        supports.includes('sizeByW') ||\n        supports.includes('sizeByPct'));\n\n    let tileWidth, tileHeight, maxZoom;\n\n    resolutions.sort(function (a, b) {\n      return b - a;\n    });\n\n    if (supportsListedTiles || supportsArbitraryTiling) {\n      if (tileSize != undefined) {\n        if (\n          typeof tileSize === 'number' &&\n          Number.isInteger(tileSize) &&\n          tileSize > 0\n        ) {\n          tileWidth = tileSize;\n          tileHeight = tileSize;\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\n          if (\n            tileSize.length == 1 ||\n            (tileSize[1] == undefined && Number.isInteger(tileSize[0]))\n          ) {\n            tileWidth = tileSize[0];\n            tileHeight = tileSize[0];\n          }\n          if (tileSize.length == 2) {\n            if (\n              Number.isInteger(tileSize[0]) &&\n              Number.isInteger(tileSize[1])\n            ) {\n              tileWidth = tileSize[0];\n              tileHeight = tileSize[1];\n            } else if (\n              tileSize[0] == undefined &&\n              Number.isInteger(tileSize[1])\n            ) {\n              tileWidth = tileSize[1];\n              tileHeight = tileSize[1];\n            }\n          }\n        }\n      }\n      if (tileWidth === undefined || tileHeight === undefined) {\n        tileWidth = DEFAULT_TILE_SIZE;\n        tileHeight = DEFAULT_TILE_SIZE;\n      }\n      if (resolutions.length == 0) {\n        maxZoom = Math.max(\n          Math.ceil(Math.log(width / tileWidth) / Math.LN2),\n          Math.ceil(Math.log(height / tileHeight) / Math.LN2)\n        );\n        for (let i = maxZoom; i >= 0; i--) {\n          resolutions.push(Math.pow(2, i));\n        }\n      } else {\n        const maxScaleFactor = Math.max(...resolutions);\n        // TODO maxScaleFactor might not be a power to 2\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n      }\n    } else {\n      // No tile support.\n      tileWidth = width;\n      tileHeight = height;\n      resolutions = [];\n      if (supportsListedSizes) {\n        /*\n         * 'sizes' provided. Use full region in different resolutions. Every\n         * resolution has only one tile.\n         */\n        sizes.sort(function (a, b) {\n          return a[0] - b[0];\n        });\n        maxZoom = -1;\n        const ignoredSizesIndex = [];\n        for (let i = 0; i < sizes.length; i++) {\n          const resolution = width / sizes[i][0];\n          if (\n            resolutions.length > 0 &&\n            resolutions[resolutions.length - 1] == resolution\n          ) {\n            ignoredSizesIndex.push(i);\n            continue;\n          }\n          resolutions.push(resolution);\n          maxZoom++;\n        }\n        if (ignoredSizesIndex.length > 0) {\n          for (let i = 0; i < ignoredSizesIndex.length; i++) {\n            sizes.splice(ignoredSizesIndex[i] - i, 1);\n          }\n        }\n      } else {\n        // No useful image information at all. Try pseudo tile with full image.\n        resolutions.push(1);\n        sizes.push([width, height]);\n        maxZoom = 0;\n      }\n    }\n\n    const tileGrid = new TileGrid({\n      tileSize: [tileWidth, tileHeight],\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions,\n    });\n\n    const tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      let regionParam, sizeParam;\n      const zoom = tileCoord[0];\n      if (zoom > maxZoom) {\n        return;\n      }\n      const tileX = tileCoord[1],\n        tileY = tileCoord[2],\n        scale = resolutions[zoom];\n      if (\n        tileX === undefined ||\n        tileY === undefined ||\n        scale === undefined ||\n        tileX < 0 ||\n        Math.ceil(width / scale / tileWidth) <= tileX ||\n        tileY < 0 ||\n        Math.ceil(height / scale / tileHeight) <= tileY\n      ) {\n        return;\n      }\n      if (supportsArbitraryTiling || supportsListedTiles) {\n        const regionX = tileX * tileWidth * scale,\n          regionY = tileY * tileHeight * scale;\n        let regionW = tileWidth * scale,\n          regionH = tileHeight * scale,\n          sizeW = tileWidth,\n          sizeH = tileHeight;\n        if (regionX + regionW > width) {\n          regionW = width - regionX;\n        }\n        if (regionY + regionH > height) {\n          regionH = height - regionY;\n        }\n        if (regionX + tileWidth * scale > width) {\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\n        }\n        if (regionY + tileHeight * scale > height) {\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\n        }\n        if (\n          regionX == 0 &&\n          regionW == width &&\n          regionY == 0 &&\n          regionH == height\n        ) {\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\n          regionParam = 'full';\n        } else if (\n          !supportsArbitraryTiling ||\n          supports.includes('regionByPx')\n        ) {\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n        } else if (supports.includes('regionByPct')) {\n          const pctX = formatPercentage((regionX / width) * 100),\n            pctY = formatPercentage((regionY / height) * 100),\n            pctW = formatPercentage((regionW / width) * 100),\n            pctH = formatPercentage((regionH / height) * 100);\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n        }\n        if (\n          version == Versions.VERSION3 &&\n          (!supportsArbitraryTiling || supports.includes('sizeByWh'))\n        ) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {\n          sizeParam = sizeW + ',';\n        } else if (supports.includes('sizeByH')) {\n          sizeParam = ',' + sizeH;\n        } else if (supports.includes('sizeByWh')) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (supports.includes('sizeByPct')) {\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\n        }\n      } else {\n        regionParam = 'full';\n        if (supportsListedSizes) {\n          const regionWidth = sizes[zoom][0],\n            regionHeight = sizes[zoom][1];\n          if (version == Versions.VERSION3) {\n            if (regionWidth == width && regionHeight == height) {\n              sizeParam = 'max';\n            } else {\n              sizeParam = regionWidth + ',' + regionHeight;\n            }\n          } else {\n            if (regionWidth == width) {\n              sizeParam = 'full';\n            } else {\n              sizeParam = regionWidth + ',';\n            }\n          }\n        } else {\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n        }\n      }\n      return (\n        baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format\n      );\n    };\n\n    const IiifTileClass = CustomTile.bind(\n      null,\n      toSize(tileSize || 256).map(function (size) {\n        return size * tilePixelRatio;\n      })\n    );\n\n    super({\n      attributions: partialOptions.attributions,\n      attributionsCollapsible: partialOptions.attributionsCollapsible,\n      cacheSize: partialOptions.cacheSize,\n      crossOrigin: partialOptions.crossOrigin,\n      interpolate: partialOptions.interpolate,\n      projection: partialOptions.projection,\n      reprojectionErrorThreshold: partialOptions.reprojectionErrorThreshold,\n      state: partialOptions.state,\n      tileClass: IiifTileClass,\n      tileGrid: tileGrid,\n      tilePixelRatio: partialOptions.tilePixelRatio,\n      tileUrlFunction: tileUrlFunction,\n      transition: partialOptions.transition,\n    });\n\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = partialOptions.zDirection;\n  }\n}\n\nexport default IIIF;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}