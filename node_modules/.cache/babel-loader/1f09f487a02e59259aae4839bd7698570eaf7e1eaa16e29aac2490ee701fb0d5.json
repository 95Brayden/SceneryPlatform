{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/control/FullScreen\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapProperty from '../MapProperty.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED } from '../css.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { replaceNode } from '../dom.js';\nconst events = ['fullscreenchange', 'webkitfullscreenchange', 'MSFullscreenChange'];\n\n/**\n * @enum {string}\n */\nconst FullScreenEventType = {\n  /**\n   * Triggered after the map entered fullscreen.\n   * @event FullScreenEventType#enterfullscreen\n   * @api\n   */\n  ENTERFULLSCREEN: 'enterfullscreen',\n  /**\n   * Triggered after the map leave fullscreen.\n   * @event FullScreenEventType#leavefullscreen\n   * @api\n   */\n  LEAVEFULLSCREEN: 'leavefullscreen'\n};\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\nclass FullScreen extends Control {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      element: document.createElement('div'),\n      target: options.target\n    });\n\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {FullScreenOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.keys_ = options.keys !== undefined ? options.keys : false;\n\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n    this.source_ = options.source;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.isInFullscreen_ = false;\n\n    /**\n     * @private\n     */\n    this.boundHandleMapTargetChange_ = this.handleMapTargetChange_.bind(this);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.cssClassName_ = options.className !== undefined ? options.className : 'ol-full-screen';\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.documentListeners_ = [];\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.activeClassName_ = options.activeClassName !== undefined ? options.activeClassName.split(' ') : [this.cssClassName_ + '-true'];\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.inactiveClassName_ = options.inactiveClassName !== undefined ? options.inactiveClassName.split(' ') : [this.cssClassName_ + '-false'];\n    const label = options.label !== undefined ? options.label : '\\u2922';\n\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    this.labelNode_ = typeof label === 'string' ? document.createTextNode(label) : label;\n    const labelActive = options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    this.labelActiveNode_ = typeof labelActive === 'string' ? document.createTextNode(labelActive) : labelActive;\n    const tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.button_ = document.createElement('button');\n    this.button_.title = tipLabel;\n    this.button_.setAttribute('type', 'button');\n    this.button_.appendChild(this.labelNode_);\n    this.button_.addEventListener(EventType.CLICK, this.handleClick_.bind(this), false);\n    this.setClassName_(this.button_, this.isInFullscreen_);\n    this.element.className = `${this.cssClassName_} ${CLASS_UNSELECTABLE} ${CLASS_CONTROL}`;\n    this.element.appendChild(this.button_);\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleFullScreen_();\n  }\n\n  /**\n   * @private\n   */\n  handleFullScreen_() {\n    const map = this.getMap();\n    if (!map) {\n      return;\n    }\n    const doc = map.getOwnerDocument();\n    if (!isFullScreenSupported(doc)) {\n      return;\n    }\n    if (isFullScreen(doc)) {\n      exitFullScreen(doc);\n    } else {\n      let element;\n      if (this.source_) {\n        element = typeof this.source_ === 'string' ? doc.getElementById(this.source_) : this.source_;\n      } else {\n        element = map.getTargetElement();\n      }\n      if (this.keys_) {\n        requestFullScreenWithKeys(element);\n      } else {\n        requestFullScreen(element);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleFullScreenChange_() {\n    const map = this.getMap();\n    if (!map) {\n      return;\n    }\n    const wasInFullscreen = this.isInFullscreen_;\n    this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\n    if (wasInFullscreen !== this.isInFullscreen_) {\n      this.setClassName_(this.button_, this.isInFullscreen_);\n      if (this.isInFullscreen_) {\n        replaceNode(this.labelActiveNode_, this.labelNode_);\n        this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n      } else {\n        replaceNode(this.labelNode_, this.labelActiveNode_);\n        this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n      }\n      map.updateSize();\n    }\n  }\n\n  /**\n   * @param {HTMLElement} element Target element\n   * @param {boolean} fullscreen True if fullscreen class name should be active\n   * @private\n   */\n  setClassName_(element, fullscreen) {\n    if (fullscreen) {\n      element.classList.remove(...this.inactiveClassName_);\n      element.classList.add(...this.activeClassName_);\n    } else {\n      element.classList.remove(...this.activeClassName_);\n      element.classList.add(...this.inactiveClassName_);\n    }\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    const oldMap = this.getMap();\n    if (oldMap) {\n      oldMap.removeChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n    }\n    super.setMap(map);\n    this.handleMapTargetChange_();\n    if (map) {\n      map.addChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleMapTargetChange_() {\n    const listeners = this.documentListeners_;\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\n      unlistenByKey(listeners[i]);\n    }\n    listeners.length = 0;\n    const map = this.getMap();\n    if (map) {\n      const doc = map.getOwnerDocument();\n      if (isFullScreenSupported(doc)) {\n        this.element.classList.remove(CLASS_UNSUPPORTED);\n      } else {\n        this.element.classList.add(CLASS_UNSUPPORTED);\n      }\n      for (let i = 0, ii = events.length; i < ii; ++i) {\n        listeners.push(listen(doc, events[i], this.handleFullScreenChange_, this));\n      }\n      this.handleFullScreenChange_();\n    }\n  }\n}\n\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Fullscreen is supported by the current platform.\n */\nfunction isFullScreenSupported(doc) {\n  const body = doc.body;\n  return !!(body['webkitRequestFullscreen'] || body.requestFullscreen && doc.fullscreenEnabled);\n}\n\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Element is currently in fullscreen.\n */\nfunction isFullScreen(doc) {\n  return !!(doc['webkitIsFullScreen'] || doc.fullscreenElement);\n}\n\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  }\n}\n\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreenWithKeys(element) {\n  if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  } else {\n    requestFullScreen(element);\n  }\n}\n\n/**\n * Exit fullscreen.\n * @param {Document} doc The document to exit fullscren from\n */\nfunction exitFullScreen(doc) {\n  if (doc.exitFullscreen) {\n    doc.exitFullscreen();\n  } else if (doc['webkitExitFullscreen']) {\n    doc['webkitExitFullscreen']();\n  }\n}\nexport default FullScreen;","map":{"version":3,"names":["Control","EventType","MapProperty","CLASS_CONTROL","CLASS_UNSELECTABLE","CLASS_UNSUPPORTED","listen","unlistenByKey","replaceNode","events","FullScreenEventType","ENTERFULLSCREEN","LEAVEFULLSCREEN","FullScreen","constructor","options","element","document","createElement","target","on","once","un","keys_","keys","undefined","source_","source","isInFullscreen_","boundHandleMapTargetChange_","handleMapTargetChange_","bind","cssClassName_","className","documentListeners_","activeClassName_","activeClassName","split","inactiveClassName_","inactiveClassName","label","labelNode_","createTextNode","labelActive","labelActiveNode_","tipLabel","button_","title","setAttribute","appendChild","addEventListener","CLICK","handleClick_","setClassName_","event","preventDefault","handleFullScreen_","map","getMap","doc","getOwnerDocument","isFullScreenSupported","isFullScreen","exitFullScreen","getElementById","getTargetElement","requestFullScreenWithKeys","requestFullScreen","handleFullScreenChange_","wasInFullscreen","dispatchEvent","updateSize","fullscreen","classList","remove","add","setMap","oldMap","removeChangeListener","TARGET","addChangeListener","listeners","i","ii","length","push","body","requestFullscreen","fullscreenEnabled","fullscreenElement","exitFullscreen"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/control/FullScreen.js"],"sourcesContent":["/**\n * @module ol/control/FullScreen\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapProperty from '../MapProperty.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED} from '../css.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {replaceNode} from '../dom.js';\n\nconst events = [\n  'fullscreenchange',\n  'webkitfullscreenchange',\n  'MSFullscreenChange',\n];\n\n/**\n * @enum {string}\n */\nconst FullScreenEventType = {\n  /**\n   * Triggered after the map entered fullscreen.\n   * @event FullScreenEventType#enterfullscreen\n   * @api\n   */\n  ENTERFULLSCREEN: 'enterfullscreen',\n\n  /**\n   * Triggered after the map leave fullscreen.\n   * @event FullScreenEventType#leavefullscreen\n   * @api\n   */\n  LEAVEFULLSCREEN: 'leavefullscreen',\n};\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\nclass FullScreen extends Control {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      target: options.target,\n    });\n\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {FullScreenOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.keys_ = options.keys !== undefined ? options.keys : false;\n\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n    this.source_ = options.source;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.isInFullscreen_ = false;\n\n    /**\n     * @private\n     */\n    this.boundHandleMapTargetChange_ = this.handleMapTargetChange_.bind(this);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.cssClassName_ =\n      options.className !== undefined ? options.className : 'ol-full-screen';\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.documentListeners_ = [];\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.activeClassName_ =\n      options.activeClassName !== undefined\n        ? options.activeClassName.split(' ')\n        : [this.cssClassName_ + '-true'];\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.inactiveClassName_ =\n      options.inactiveClassName !== undefined\n        ? options.inactiveClassName.split(' ')\n        : [this.cssClassName_ + '-false'];\n\n    const label = options.label !== undefined ? options.label : '\\u2922';\n\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    this.labelNode_ =\n      typeof label === 'string' ? document.createTextNode(label) : label;\n\n    const labelActive =\n      options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    this.labelActiveNode_ =\n      typeof labelActive === 'string'\n        ? document.createTextNode(labelActive)\n        : labelActive;\n\n    const tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.button_ = document.createElement('button');\n    this.button_.title = tipLabel;\n    this.button_.setAttribute('type', 'button');\n    this.button_.appendChild(this.labelNode_);\n    this.button_.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n    this.setClassName_(this.button_, this.isInFullscreen_);\n\n    this.element.className = `${this.cssClassName_} ${CLASS_UNSELECTABLE} ${CLASS_CONTROL}`;\n    this.element.appendChild(this.button_);\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleFullScreen_();\n  }\n\n  /**\n   * @private\n   */\n  handleFullScreen_() {\n    const map = this.getMap();\n    if (!map) {\n      return;\n    }\n    const doc = map.getOwnerDocument();\n    if (!isFullScreenSupported(doc)) {\n      return;\n    }\n    if (isFullScreen(doc)) {\n      exitFullScreen(doc);\n    } else {\n      let element;\n      if (this.source_) {\n        element =\n          typeof this.source_ === 'string'\n            ? doc.getElementById(this.source_)\n            : this.source_;\n      } else {\n        element = map.getTargetElement();\n      }\n      if (this.keys_) {\n        requestFullScreenWithKeys(element);\n      } else {\n        requestFullScreen(element);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleFullScreenChange_() {\n    const map = this.getMap();\n    if (!map) {\n      return;\n    }\n    const wasInFullscreen = this.isInFullscreen_;\n    this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\n    if (wasInFullscreen !== this.isInFullscreen_) {\n      this.setClassName_(this.button_, this.isInFullscreen_);\n      if (this.isInFullscreen_) {\n        replaceNode(this.labelActiveNode_, this.labelNode_);\n        this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n      } else {\n        replaceNode(this.labelNode_, this.labelActiveNode_);\n        this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n      }\n      map.updateSize();\n    }\n  }\n\n  /**\n   * @param {HTMLElement} element Target element\n   * @param {boolean} fullscreen True if fullscreen class name should be active\n   * @private\n   */\n  setClassName_(element, fullscreen) {\n    if (fullscreen) {\n      element.classList.remove(...this.inactiveClassName_);\n      element.classList.add(...this.activeClassName_);\n    } else {\n      element.classList.remove(...this.activeClassName_);\n      element.classList.add(...this.inactiveClassName_);\n    }\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    const oldMap = this.getMap();\n    if (oldMap) {\n      oldMap.removeChangeListener(\n        MapProperty.TARGET,\n        this.boundHandleMapTargetChange_\n      );\n    }\n\n    super.setMap(map);\n\n    this.handleMapTargetChange_();\n    if (map) {\n      map.addChangeListener(\n        MapProperty.TARGET,\n        this.boundHandleMapTargetChange_\n      );\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleMapTargetChange_() {\n    const listeners = this.documentListeners_;\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\n      unlistenByKey(listeners[i]);\n    }\n    listeners.length = 0;\n\n    const map = this.getMap();\n    if (map) {\n      const doc = map.getOwnerDocument();\n      if (isFullScreenSupported(doc)) {\n        this.element.classList.remove(CLASS_UNSUPPORTED);\n      } else {\n        this.element.classList.add(CLASS_UNSUPPORTED);\n      }\n\n      for (let i = 0, ii = events.length; i < ii; ++i) {\n        listeners.push(\n          listen(doc, events[i], this.handleFullScreenChange_, this)\n        );\n      }\n      this.handleFullScreenChange_();\n    }\n  }\n}\n\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Fullscreen is supported by the current platform.\n */\nfunction isFullScreenSupported(doc) {\n  const body = doc.body;\n  return !!(\n    body['webkitRequestFullscreen'] ||\n    (body.requestFullscreen && doc.fullscreenEnabled)\n  );\n}\n\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Element is currently in fullscreen.\n */\nfunction isFullScreen(doc) {\n  return !!(doc['webkitIsFullScreen'] || doc.fullscreenElement);\n}\n\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  }\n}\n\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreenWithKeys(element) {\n  if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  } else {\n    requestFullScreen(element);\n  }\n}\n\n/**\n * Exit fullscreen.\n * @param {Document} doc The document to exit fullscren from\n */\nfunction exitFullScreen(doc) {\n  if (doc.exitFullscreen) {\n    doc.exitFullscreen();\n  } else if (doc['webkitExitFullscreen']) {\n    doc['webkitExitFullscreen']();\n  }\n}\n\nexport default FullScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}