{"ast":null,"code":"/**\n * @module ol/webgl/BaseTileRepresentation\n */\n\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport { abstract } from '../util.js';\n\n/**\n * @typedef {import(\"../Tile.js\").default} BaseTileType\n */\n\n/**\n * @template {BaseTileType} TileType\n * @typedef {Object} TileRepresentationOptions\n * @property {TileType} tile The tile.\n * @property {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\n * @property {import(\"../webgl/Helper.js\").default} helper WebGL helper.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n */\n\n/**\n * @classdesc\n * Base class for representing a tile in a webgl context\n * @template {import(\"../Tile.js\").default} TileType\n * @abstract\n */\nclass BaseTileRepresentation extends EventTarget {\n  /**\n   * @param {TileRepresentationOptions<TileType>} options The tile representation options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @type {TileType}\n     */\n    this.tile;\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.gutter_ = options.gutter || 0;\n\n    /**\n     * @type {import(\"../webgl/Helper.js\").default}\n     * @protected\n     */\n    this.helper_ = options.helper;\n    this.loaded = false;\n    this.ready = false;\n  }\n\n  /**\n   * @param {TileType} tile Tile.\n   */\n  setTile(tile) {\n    if (tile !== this.tile) {\n      if (this.tile) {\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n      this.tile = tile;\n      this.loaded = tile.getState() === TileState.LOADED;\n      if (this.loaded) {\n        this.uploadTile();\n      } else {\n        if (tile instanceof ImageTile) {\n          const image = tile.getImage();\n          if (image instanceof Image && !image.crossOrigin) {\n            image.crossOrigin = 'anonymous';\n          }\n        }\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n    }\n  }\n\n  /**\n   * @abstract\n   * @protected\n   */\n  uploadTile() {\n    abstract();\n  }\n  setReady() {\n    this.ready = true;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n  handleTileChange_() {\n    if (this.tile.getState() === TileState.LOADED) {\n      this.loaded = true;\n      this.uploadTile();\n    }\n  }\n  disposeInternal() {\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n  }\n}\nexport default BaseTileRepresentation;","map":{"version":3,"names":["EventTarget","EventType","ImageTile","TileState","abstract","BaseTileRepresentation","constructor","options","tile","handleTileChange_","bind","gutter_","gutter","helper_","helper","loaded","ready","setTile","removeEventListener","CHANGE","getState","LOADED","uploadTile","image","getImage","Image","crossOrigin","addEventListener","setReady","dispatchEvent","disposeInternal"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/webgl/BaseTileRepresentation.js"],"sourcesContent":["/**\n * @module ol/webgl/BaseTileRepresentation\n */\n\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport {abstract} from '../util.js';\n\n/**\n * @typedef {import(\"../Tile.js\").default} BaseTileType\n */\n\n/**\n * @template {BaseTileType} TileType\n * @typedef {Object} TileRepresentationOptions\n * @property {TileType} tile The tile.\n * @property {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\n * @property {import(\"../webgl/Helper.js\").default} helper WebGL helper.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n */\n\n/**\n * @classdesc\n * Base class for representing a tile in a webgl context\n * @template {import(\"../Tile.js\").default} TileType\n * @abstract\n */\nclass BaseTileRepresentation extends EventTarget {\n  /**\n   * @param {TileRepresentationOptions<TileType>} options The tile representation options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @type {TileType}\n     */\n    this.tile;\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.gutter_ = options.gutter || 0;\n\n    /**\n     * @type {import(\"../webgl/Helper.js\").default}\n     * @protected\n     */\n    this.helper_ = options.helper;\n\n    this.loaded = false;\n    this.ready = false;\n  }\n\n  /**\n   * @param {TileType} tile Tile.\n   */\n  setTile(tile) {\n    if (tile !== this.tile) {\n      if (this.tile) {\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n      this.tile = tile;\n      this.loaded = tile.getState() === TileState.LOADED;\n      if (this.loaded) {\n        this.uploadTile();\n      } else {\n        if (tile instanceof ImageTile) {\n          const image = tile.getImage();\n          if (image instanceof Image && !image.crossOrigin) {\n            image.crossOrigin = 'anonymous';\n          }\n        }\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n    }\n  }\n\n  /**\n   * @abstract\n   * @protected\n   */\n  uploadTile() {\n    abstract();\n  }\n\n  setReady() {\n    this.ready = true;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  handleTileChange_() {\n    if (this.tile.getState() === TileState.LOADED) {\n      this.loaded = true;\n      this.uploadTile();\n    }\n  }\n\n  disposeInternal() {\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n  }\n}\n\nexport default BaseTileRepresentation;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAOA,WAAW,MAAM,qBAAqB;AAC7C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAOC,SAAS,MAAM,iBAAiB;AACvC,SAAQC,QAAQ,QAAO,YAAY;;AAEnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,SAASL,WAAW,CAAC;EAC/C;AACF;AACA;EACEM,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAAC,CAAC;;IAEP;AACJ;AACA;IACI,IAAI,CAACC,IAAI;IACT,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC;;IAE1D;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAGJ,OAAO,CAACK,MAAM,IAAI,CAAC;;IAElC;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAGN,OAAO,CAACO,MAAM;IAE7B,IAAI,CAACC,MAAM,GAAG,KAAK;IACnB,IAAI,CAACC,KAAK,GAAG,KAAK;EACpB;;EAEA;AACF;AACA;EACEC,OAAOA,CAACT,IAAI,EAAE;IACZ,IAAIA,IAAI,KAAK,IAAI,CAACA,IAAI,EAAE;MACtB,IAAI,IAAI,CAACA,IAAI,EAAE;QACb,IAAI,CAACA,IAAI,CAACU,mBAAmB,CAACjB,SAAS,CAACkB,MAAM,EAAE,IAAI,CAACV,iBAAiB,CAAC;MACzE;MACA,IAAI,CAACD,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACO,MAAM,GAAGP,IAAI,CAACY,QAAQ,CAAC,CAAC,KAAKjB,SAAS,CAACkB,MAAM;MAClD,IAAI,IAAI,CAACN,MAAM,EAAE;QACf,IAAI,CAACO,UAAU,CAAC,CAAC;MACnB,CAAC,MAAM;QACL,IAAId,IAAI,YAAYN,SAAS,EAAE;UAC7B,MAAMqB,KAAK,GAAGf,IAAI,CAACgB,QAAQ,CAAC,CAAC;UAC7B,IAAID,KAAK,YAAYE,KAAK,IAAI,CAACF,KAAK,CAACG,WAAW,EAAE;YAChDH,KAAK,CAACG,WAAW,GAAG,WAAW;UACjC;QACF;QACAlB,IAAI,CAACmB,gBAAgB,CAAC1B,SAAS,CAACkB,MAAM,EAAE,IAAI,CAACV,iBAAiB,CAAC;MACjE;IACF;EACF;;EAEA;AACF;AACA;AACA;EACEa,UAAUA,CAAA,EAAG;IACXlB,QAAQ,CAAC,CAAC;EACZ;EAEAwB,QAAQA,CAAA,EAAG;IACT,IAAI,CAACZ,KAAK,GAAG,IAAI;IACjB,IAAI,CAACa,aAAa,CAAC5B,SAAS,CAACkB,MAAM,CAAC;EACtC;EAEAV,iBAAiBA,CAAA,EAAG;IAClB,IAAI,IAAI,CAACD,IAAI,CAACY,QAAQ,CAAC,CAAC,KAAKjB,SAAS,CAACkB,MAAM,EAAE;MAC7C,IAAI,CAACN,MAAM,GAAG,IAAI;MAClB,IAAI,CAACO,UAAU,CAAC,CAAC;IACnB;EACF;EAEAQ,eAAeA,CAAA,EAAG;IAChB,IAAI,CAACtB,IAAI,CAACU,mBAAmB,CAACjB,SAAS,CAACkB,MAAM,EAAE,IAAI,CAACV,iBAAiB,CAAC;EACzE;AACF;AAEA,eAAeJ,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}