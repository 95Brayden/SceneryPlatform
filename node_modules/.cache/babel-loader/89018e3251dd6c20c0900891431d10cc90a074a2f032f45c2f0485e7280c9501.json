{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/source/Zoomify\n */\nimport { DEFAULT_TILE_SIZE } from '../tilegrid/common.js';\nimport ImageTile from '../ImageTile.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport TileState from '../TileState.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { createFromTileUrlFunctions, expandUrl } from '../tileurlfunction.js';\nimport { getCenter } from '../extent.js';\nimport { toSize } from '../size.js';\n\n/**\n * @typedef {'default' | 'truncated'} TierSizeCalculation\n */\n\nexport class CustomTile extends ImageTile {\n  /**\n   * @param {import(\"../size.js\").Size} tileSize Full tile size.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"../Tile.js\").Options} [options] Tile options.\n   */\n  constructor(tileSize, tileCoord, state, src, crossOrigin, tileLoadFunction, options) {\n    super(tileCoord, state, src, crossOrigin, tileLoadFunction, options);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    this.zoomifyImage_ = null;\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tileSize_ = tileSize;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   */\n  getImage() {\n    if (this.zoomifyImage_) {\n      return this.zoomifyImage_;\n    }\n    const image = super.getImage();\n    if (this.state == TileState.LOADED) {\n      const tileSize = this.tileSize_;\n      if (image.width == tileSize[0] && image.height == tileSize[1]) {\n        this.zoomifyImage_ = image;\n        return image;\n      }\n      const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n      context.drawImage(image, 0, 0);\n      this.zoomifyImage_ = context.canvas;\n      return context.canvas;\n    }\n    return image;\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value  you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {number} [tilePixelRatio] The pixel ratio used by the tile service. For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px by 512px images (for retina/hidpi devices) then `tilePixelRatio` should be set to `2`\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {string} url URL template or base URL of the Zoomify service.\n * A base URL is the fixed part\n * of the URL, excluding the tile group, z, x, and y folder structure, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include\n * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.\n * Internet Imaging Protocol (IIP) with JTL extension can be also used with\n * `{tileIndex}` and `{z}` placeholders, e.g.\n * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {TierSizeCalculation} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.\n * @property {import(\"../size.js\").Size} size Size.\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the TileGrid that is created.\n * Default sets the TileGrid in the\n * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the\n * extent to the first quadrant (the default for OpenLayers 2) set the extent\n * as `[0, 0, width, height]`.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in Zoomify format (both Zoomify and Internet\n * Imaging Protocol are supported).\n * @api\n */\nclass Zoomify extends TileImage {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    const size = options.size;\n    const tierSizeCalculation = options.tierSizeCalculation !== undefined ? options.tierSizeCalculation : 'default';\n    const tilePixelRatio = options.tilePixelRatio || 1;\n    const imageWidth = size[0];\n    const imageHeight = size[1];\n    const tierSizeInTiles = [];\n    const tileSize = options.tileSize || DEFAULT_TILE_SIZE;\n    let tileSizeForTierSizeCalculation = tileSize * tilePixelRatio;\n    switch (tierSizeCalculation) {\n      case 'default':\n        while (imageWidth > tileSizeForTierSizeCalculation || imageHeight > tileSizeForTierSizeCalculation) {\n          tierSizeInTiles.push([Math.ceil(imageWidth / tileSizeForTierSizeCalculation), Math.ceil(imageHeight / tileSizeForTierSizeCalculation)]);\n          tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;\n        }\n        break;\n      case 'truncated':\n        let width = imageWidth;\n        let height = imageHeight;\n        while (width > tileSizeForTierSizeCalculation || height > tileSizeForTierSizeCalculation) {\n          tierSizeInTiles.push([Math.ceil(width / tileSizeForTierSizeCalculation), Math.ceil(height / tileSizeForTierSizeCalculation)]);\n          width >>= 1;\n          height >>= 1;\n        }\n        break;\n      default:\n        throw new Error('Unknown `tierSizeCalculation` configured');\n    }\n    tierSizeInTiles.push([1, 1]);\n    tierSizeInTiles.reverse();\n    const resolutions = [tilePixelRatio];\n    const tileCountUpToTier = [0];\n    for (let i = 1, ii = tierSizeInTiles.length; i < ii; i++) {\n      resolutions.push(tilePixelRatio << i);\n      tileCountUpToTier.push(tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] + tileCountUpToTier[i - 1]);\n    }\n    resolutions.reverse();\n    const tileGrid = new TileGrid({\n      tileSize: tileSize,\n      extent: options.extent || [0, -imageHeight, imageWidth, 0],\n      resolutions: resolutions\n    });\n    let url = options.url;\n    if (url && !url.includes('{TileGroup}') && !url.includes('{tileIndex}')) {\n      url += '{TileGroup}/{z}-{x}-{y}.jpg';\n    }\n    const urls = expandUrl(url);\n    let tileWidth = tileSize * tilePixelRatio;\n\n    /**\n     * @param {string} template Template.\n     * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n     */\n    function createFromTemplate(template) {\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function (tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          }\n          const tileCoordZ = tileCoord[0];\n          const tileCoordX = tileCoord[1];\n          const tileCoordY = tileCoord[2];\n          const tileIndex = tileCoordX + tileCoordY * tierSizeInTiles[tileCoordZ][0];\n          const tileGroup = (tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth | 0;\n          const localContext = {\n            'z': tileCoordZ,\n            'x': tileCoordX,\n            'y': tileCoordY,\n            'tileIndex': tileIndex,\n            'TileGroup': 'TileGroup' + tileGroup\n          };\n          return template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return localContext[p];\n          });\n        }\n      );\n    }\n    const tileUrlFunction = createFromTileUrlFunctions(urls.map(createFromTemplate));\n    const ZoomifyTileClass = CustomTile.bind(null, toSize(tileSize * tilePixelRatio));\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      tilePixelRatio: tilePixelRatio,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: ZoomifyTileClass,\n      tileGrid: tileGrid,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition\n    });\n\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = options.zDirection;\n\n    // Server retina tile detection (non-standard):\n    // Try loading the center tile for the highest resolution. If it is not\n    // available, we are dealing with retina tiles, and need to adjust the\n    // tile url calculation.\n    const tileUrl = tileGrid.getTileCoordForCoordAndResolution(getCenter(tileGrid.getExtent()), resolutions[resolutions.length - 1]);\n    const testTileUrl = tileUrlFunction(tileUrl, 1, null);\n    const image = new Image();\n    image.addEventListener('error', () => {\n      tileWidth = tileSize;\n      this.changed();\n    });\n    image.src = testTileUrl;\n  }\n}\nexport default Zoomify;","map":{"version":3,"names":["DEFAULT_TILE_SIZE","ImageTile","TileGrid","TileImage","TileState","createCanvasContext2D","createFromTileUrlFunctions","expandUrl","getCenter","toSize","CustomTile","constructor","tileSize","tileCoord","state","src","crossOrigin","tileLoadFunction","options","zoomifyImage_","tileSize_","getImage","image","LOADED","width","height","context","drawImage","canvas","Zoomify","size","tierSizeCalculation","undefined","tilePixelRatio","imageWidth","imageHeight","tierSizeInTiles","tileSizeForTierSizeCalculation","push","Math","ceil","Error","reverse","resolutions","tileCountUpToTier","i","ii","length","tileGrid","extent","url","includes","urls","tileWidth","createFromTemplate","template","pixelRatio","projection","tileCoordZ","tileCoordX","tileCoordY","tileIndex","tileGroup","localContext","replace","m","p","tileUrlFunction","map","ZoomifyTileClass","bind","attributions","cacheSize","interpolate","reprojectionErrorThreshold","tileClass","transition","zDirection","tileUrl","getTileCoordForCoordAndResolution","getExtent","testTileUrl","Image","addEventListener","changed"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/source/Zoomify.js"],"sourcesContent":["/**\n * @module ol/source/Zoomify\n */\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\n\nimport ImageTile from '../ImageTile.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport TileState from '../TileState.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {createFromTileUrlFunctions, expandUrl} from '../tileurlfunction.js';\nimport {getCenter} from '../extent.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {'default' | 'truncated'} TierSizeCalculation\n */\n\nexport class CustomTile extends ImageTile {\n  /**\n   * @param {import(\"../size.js\").Size} tileSize Full tile size.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"../Tile.js\").Options} [options] Tile options.\n   */\n  constructor(\n    tileSize,\n    tileCoord,\n    state,\n    src,\n    crossOrigin,\n    tileLoadFunction,\n    options\n  ) {\n    super(tileCoord, state, src, crossOrigin, tileLoadFunction, options);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    this.zoomifyImage_ = null;\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tileSize_ = tileSize;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   */\n  getImage() {\n    if (this.zoomifyImage_) {\n      return this.zoomifyImage_;\n    }\n    const image = super.getImage();\n    if (this.state == TileState.LOADED) {\n      const tileSize = this.tileSize_;\n      if (image.width == tileSize[0] && image.height == tileSize[1]) {\n        this.zoomifyImage_ = image;\n        return image;\n      }\n      const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n      context.drawImage(image, 0, 0);\n      this.zoomifyImage_ = context.canvas;\n      return context.canvas;\n    }\n    return image;\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value  you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {number} [tilePixelRatio] The pixel ratio used by the tile service. For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px by 512px images (for retina/hidpi devices) then `tilePixelRatio` should be set to `2`\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {string} url URL template or base URL of the Zoomify service.\n * A base URL is the fixed part\n * of the URL, excluding the tile group, z, x, and y folder structure, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include\n * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.\n * Internet Imaging Protocol (IIP) with JTL extension can be also used with\n * `{tileIndex}` and `{z}` placeholders, e.g.\n * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {TierSizeCalculation} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.\n * @property {import(\"../size.js\").Size} size Size.\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the TileGrid that is created.\n * Default sets the TileGrid in the\n * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the\n * extent to the first quadrant (the default for OpenLayers 2) set the extent\n * as `[0, 0, width, height]`.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in Zoomify format (both Zoomify and Internet\n * Imaging Protocol are supported).\n * @api\n */\nclass Zoomify extends TileImage {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    const size = options.size;\n    const tierSizeCalculation =\n      options.tierSizeCalculation !== undefined\n        ? options.tierSizeCalculation\n        : 'default';\n\n    const tilePixelRatio = options.tilePixelRatio || 1;\n    const imageWidth = size[0];\n    const imageHeight = size[1];\n    const tierSizeInTiles = [];\n    const tileSize = options.tileSize || DEFAULT_TILE_SIZE;\n    let tileSizeForTierSizeCalculation = tileSize * tilePixelRatio;\n\n    switch (tierSizeCalculation) {\n      case 'default':\n        while (\n          imageWidth > tileSizeForTierSizeCalculation ||\n          imageHeight > tileSizeForTierSizeCalculation\n        ) {\n          tierSizeInTiles.push([\n            Math.ceil(imageWidth / tileSizeForTierSizeCalculation),\n            Math.ceil(imageHeight / tileSizeForTierSizeCalculation),\n          ]);\n          tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;\n        }\n        break;\n      case 'truncated':\n        let width = imageWidth;\n        let height = imageHeight;\n        while (\n          width > tileSizeForTierSizeCalculation ||\n          height > tileSizeForTierSizeCalculation\n        ) {\n          tierSizeInTiles.push([\n            Math.ceil(width / tileSizeForTierSizeCalculation),\n            Math.ceil(height / tileSizeForTierSizeCalculation),\n          ]);\n          width >>= 1;\n          height >>= 1;\n        }\n        break;\n      default:\n        throw new Error('Unknown `tierSizeCalculation` configured');\n    }\n\n    tierSizeInTiles.push([1, 1]);\n    tierSizeInTiles.reverse();\n\n    const resolutions = [tilePixelRatio];\n    const tileCountUpToTier = [0];\n    for (let i = 1, ii = tierSizeInTiles.length; i < ii; i++) {\n      resolutions.push(tilePixelRatio << i);\n      tileCountUpToTier.push(\n        tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] +\n          tileCountUpToTier[i - 1]\n      );\n    }\n    resolutions.reverse();\n\n    const tileGrid = new TileGrid({\n      tileSize: tileSize,\n      extent: options.extent || [0, -imageHeight, imageWidth, 0],\n      resolutions: resolutions,\n    });\n\n    let url = options.url;\n    if (url && !url.includes('{TileGroup}') && !url.includes('{tileIndex}')) {\n      url += '{TileGroup}/{z}-{x}-{y}.jpg';\n    }\n    const urls = expandUrl(url);\n\n    let tileWidth = tileSize * tilePixelRatio;\n\n    /**\n     * @param {string} template Template.\n     * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n     */\n    function createFromTemplate(template) {\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function (tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          }\n          const tileCoordZ = tileCoord[0];\n          const tileCoordX = tileCoord[1];\n          const tileCoordY = tileCoord[2];\n          const tileIndex =\n            tileCoordX + tileCoordY * tierSizeInTiles[tileCoordZ][0];\n          const tileGroup =\n            ((tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth) | 0;\n          const localContext = {\n            'z': tileCoordZ,\n            'x': tileCoordX,\n            'y': tileCoordY,\n            'tileIndex': tileIndex,\n            'TileGroup': 'TileGroup' + tileGroup,\n          };\n          return template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return localContext[p];\n          });\n        }\n      );\n    }\n\n    const tileUrlFunction = createFromTileUrlFunctions(\n      urls.map(createFromTemplate)\n    );\n\n    const ZoomifyTileClass = CustomTile.bind(\n      null,\n      toSize(tileSize * tilePixelRatio)\n    );\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      tilePixelRatio: tilePixelRatio,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: ZoomifyTileClass,\n      tileGrid: tileGrid,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition,\n    });\n\n    /**\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = options.zDirection;\n\n    // Server retina tile detection (non-standard):\n    // Try loading the center tile for the highest resolution. If it is not\n    // available, we are dealing with retina tiles, and need to adjust the\n    // tile url calculation.\n    const tileUrl = tileGrid.getTileCoordForCoordAndResolution(\n      getCenter(tileGrid.getExtent()),\n      resolutions[resolutions.length - 1]\n    );\n    const testTileUrl = tileUrlFunction(tileUrl, 1, null);\n    const image = new Image();\n    image.addEventListener('error', () => {\n      tileWidth = tileSize;\n      this.changed();\n    });\n    image.src = testTileUrl;\n  }\n}\n\nexport default Zoomify;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}