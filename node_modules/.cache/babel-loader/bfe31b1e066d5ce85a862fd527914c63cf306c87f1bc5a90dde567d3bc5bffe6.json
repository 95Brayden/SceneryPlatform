{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/interaction/Draw\n */\nimport Circle from '../geom/Circle.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport InteractionProperty from './Property.js';\nimport LineString from '../geom/LineString.js';\nimport MapBrowserEvent from '../MapBrowserEvent.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport Polygon, { fromCircle, makeRegular } from '../geom/Polygon.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { FALSE, TRUE } from '../functions.js';\nimport { always, never, noModifierKeys, shiftKeyOnly } from '../events/condition.js';\nimport { boundingExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../extent.js';\nimport { clamp, squaredDistance, toFixed } from '../math.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { distance, squaredDistance as squaredCoordinateDistance } from '../coordinate.js';\nimport { fromUserCoordinate, getUserProjection } from '../proj.js';\nimport { getStrideForLayout } from '../geom/SimpleGeometry.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../geom/Geometry.js\").Type} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish. Must be greater than `0`.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished. Not used when drawing\n * POINT or MULTI_POINT geometries.\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition.noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition.shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean|import(\"../events/condition.js\").Condition} [trace=false] Trace a portion of another geometry.\n * Ignored when in freehand mode.\n * @property {VectorSource} [traceSource] Source for features to trace.  If tracing is active and a `traceSource` is\n * not provided, the interaction's `source` will be used.  Tracing requires that the interaction is configured with\n * either a `traceSource` or a `source`.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {import(\"../geom/Geometry.js\").GeometryLayout} [geometryLayout='XY'] Layout of the\n * feature geometries created by the draw interaction.\n */\n\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n\n/**\n * @typedef {Object} TraceState\n * @property {boolean} active Tracing active.\n * @property {import(\"../pixel.js\").Pixel} [startPx] The initially clicked pixel location.\n * @property {Array<TraceTarget>} [targets] Targets available for tracing.\n * @property {number} [targetIndex] The index of the currently traced target.  A value of -1 indicates\n * that no trace target is active.\n */\n\n/**\n * @typedef {Object} TraceTarget\n * @property {Array<import(\"../coordinate.js\").Coordinate>} coordinates Target coordinates.\n * @property {boolean} ring The target coordinates are a linear ring.\n * @property {number} startIndex The index of first traced coordinate.  A fractional index represents an\n * edge intersection.  Index values for rings will wrap (may be negative or larger than coordinates length).\n * @property {number} endIndex The index of last traced coordinate.  Details from startIndex also apply here.\n */\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry\n * and a projection as arguments, and returns a geometry. The optional existing\n * geometry is the geometry that is returned when the function is called without\n * a second argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default,\n *     import(\"../proj/Projection.js\").default):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n\n/**\n * @typedef {'Point' | 'LineString' | 'Polygon' | 'Circle'} Mode\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n */\n\n/**\n * @enum {string}\n */\nconst DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend',\n  /**\n   * Triggered upon feature draw abortion\n   * @event DrawEvent#drawabort\n   * @api\n   */\n  DRAWABORT: 'drawabort'\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\nexport class DrawEvent extends Event {\n  /**\n   * @param {DrawEventType} type Type.\n   * @param {Feature} feature The feature drawn.\n   */\n  constructor(type, feature) {\n    super(type);\n\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n    this.feature = feature;\n  }\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} coordinate The coordinate.\n * @param {Array<Feature>} features The candidate features.\n * @return {Array<TraceTarget>} The trace targets.\n */\nfunction getTraceTargets(coordinate, features) {\n  /**\n   * @type {Array<TraceTarget>}\n   */\n  const targets = [];\n  for (let i = 0; i < features.length; ++i) {\n    const feature = features[i];\n    const geometry = feature.getGeometry();\n    appendGeometryTraceTargets(coordinate, geometry, targets);\n  }\n  return targets;\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} a One coordinate.\n * @param {import(\"../coordinate.js\").Coordinate} b Another coordinate.\n * @return {number} The squared distance between the two coordinates.\n */\nfunction getSquaredDistance(a, b) {\n  return squaredDistance(a[0], a[1], b[0], b[1]);\n}\n\n/**\n * @param {LineCoordType} coordinates The ring coordinates.\n * @param {number} index The index.  May be wrapped.\n * @return {import(\"../coordinate.js\").Coordinate} The coordinate.\n */\nfunction getCoordinate(coordinates, index) {\n  const count = coordinates.length;\n  if (index < 0) {\n    return coordinates[index + count];\n  }\n  if (index >= count) {\n    return coordinates[index - count];\n  }\n  return coordinates[index];\n}\n\n/**\n * Get the cumulative squared distance along a ring path.  The end index index may be \"wrapped\" and it may\n * be less than the start index to indicate the direction of travel.  The start and end index may have\n * a fractional part to indicate a point between two coordinates.\n * @param {LineCoordType} coordinates Ring coordinates.\n * @param {number} startIndex The start index.\n * @param {number} endIndex The end index.\n * @return {number} The cumulative squared distance along the ring path.\n */\nfunction getCumulativeSquaredDistance(coordinates, startIndex, endIndex) {\n  let lowIndex, highIndex;\n  if (startIndex < endIndex) {\n    lowIndex = startIndex;\n    highIndex = endIndex;\n  } else {\n    lowIndex = endIndex;\n    highIndex = startIndex;\n  }\n  const lowWholeIndex = Math.ceil(lowIndex);\n  const highWholeIndex = Math.floor(highIndex);\n  if (lowWholeIndex > highWholeIndex) {\n    // both start and end are on the same segment\n    const start = interpolateCoordinate(coordinates, lowIndex);\n    const end = interpolateCoordinate(coordinates, highIndex);\n    return getSquaredDistance(start, end);\n  }\n  let sd = 0;\n  if (lowIndex < lowWholeIndex) {\n    const start = interpolateCoordinate(coordinates, lowIndex);\n    const end = getCoordinate(coordinates, lowWholeIndex);\n    sd += getSquaredDistance(start, end);\n  }\n  if (highWholeIndex < highIndex) {\n    const start = getCoordinate(coordinates, highWholeIndex);\n    const end = interpolateCoordinate(coordinates, highIndex);\n    sd += getSquaredDistance(start, end);\n  }\n  for (let i = lowWholeIndex; i < highWholeIndex - 1; ++i) {\n    const start = getCoordinate(coordinates, i);\n    const end = getCoordinate(coordinates, i + 1);\n    sd += getSquaredDistance(start, end);\n  }\n  return sd;\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} coordinate The coordinate.\n * @param {import(\"../geom/Geometry.js\").default} geometry The candidate geometry.\n * @param {Array<TraceTarget>} targets The trace targets.\n */\nfunction appendGeometryTraceTargets(coordinate, geometry, targets) {\n  if (geometry instanceof LineString) {\n    appendTraceTarget(coordinate, geometry.getCoordinates(), false, targets);\n    return;\n  }\n  if (geometry instanceof MultiLineString) {\n    const coordinates = geometry.getCoordinates();\n    for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n      appendTraceTarget(coordinate, coordinates[i], false, targets);\n    }\n    return;\n  }\n  if (geometry instanceof Polygon) {\n    const coordinates = geometry.getCoordinates();\n    for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n      appendTraceTarget(coordinate, coordinates[i], true, targets);\n    }\n    return;\n  }\n  if (geometry instanceof MultiPolygon) {\n    const polys = geometry.getCoordinates();\n    for (let i = 0, ii = polys.length; i < ii; ++i) {\n      const coordinates = polys[i];\n      for (let j = 0, jj = coordinates.length; j < jj; ++j) {\n        appendTraceTarget(coordinate, coordinates[j], true, targets);\n      }\n    }\n    return;\n  }\n  if (geometry instanceof GeometryCollection) {\n    const geometries = geometry.getGeometries();\n    for (let i = 0; i < geometries.length; ++i) {\n      appendGeometryTraceTargets(coordinate, geometries[i], targets);\n    }\n    return;\n  }\n  // other types cannot be traced\n}\n\n/**\n * @typedef {Object} TraceTargetUpdateInfo\n * @property {number} index The new target index.\n * @property {number} endIndex The new segment end index.\n */\n\n/**\n * @type {TraceTargetUpdateInfo}\n */\nconst sharedUpdateInfo = {\n  index: -1,\n  endIndex: NaN\n};\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} coordinate The coordinate.\n * @param {TraceState} traceState The trace state.\n * @param {import(\"../Map.js\").default} map The map.\n * @param {number} snapTolerance The snap tolerance.\n * @return {TraceTargetUpdateInfo} Information about the new trace target.  The returned\n * object is reused between calls and must not be modified by the caller.\n */\nfunction getTraceTargetUpdate(coordinate, traceState, map, snapTolerance) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  let closestTargetDistance = Infinity;\n  let newTargetIndex = -1;\n  let newEndIndex = NaN;\n  for (let targetIndex = 0; targetIndex < traceState.targets.length; ++targetIndex) {\n    const target = traceState.targets[targetIndex];\n    const coordinates = target.coordinates;\n    let minSegmentDistance = Infinity;\n    let endIndex;\n    for (let coordinateIndex = 0; coordinateIndex < coordinates.length - 1; ++coordinateIndex) {\n      const start = coordinates[coordinateIndex];\n      const end = coordinates[coordinateIndex + 1];\n      const rel = getPointSegmentRelationship(x, y, start, end);\n      if (rel.squaredDistance < minSegmentDistance) {\n        minSegmentDistance = rel.squaredDistance;\n        endIndex = coordinateIndex + rel.along;\n      }\n    }\n    if (minSegmentDistance < closestTargetDistance) {\n      closestTargetDistance = minSegmentDistance;\n      if (target.ring && traceState.targetIndex === targetIndex) {\n        // same target, maintain the same trace direction\n        if (target.endIndex > target.startIndex) {\n          // forward trace\n          if (endIndex < target.startIndex) {\n            endIndex += coordinates.length;\n          }\n        } else if (target.endIndex < target.startIndex) {\n          // reverse trace\n          if (endIndex > target.startIndex) {\n            endIndex -= coordinates.length;\n          }\n        }\n      }\n      newEndIndex = endIndex;\n      newTargetIndex = targetIndex;\n    }\n  }\n  const newTarget = traceState.targets[newTargetIndex];\n  let considerBothDirections = newTarget.ring;\n  if (traceState.targetIndex === newTargetIndex && considerBothDirections) {\n    // only consider switching trace direction if close to the start\n    const newCoordinate = interpolateCoordinate(newTarget.coordinates, newEndIndex);\n    const pixel = map.getPixelFromCoordinate(newCoordinate);\n    if (distance(pixel, traceState.startPx) > snapTolerance) {\n      considerBothDirections = false;\n    }\n  }\n  if (considerBothDirections) {\n    const coordinates = newTarget.coordinates;\n    const count = coordinates.length;\n    const startIndex = newTarget.startIndex;\n    const endIndex = newEndIndex;\n    if (startIndex < endIndex) {\n      const forwardDistance = getCumulativeSquaredDistance(coordinates, startIndex, endIndex);\n      const reverseDistance = getCumulativeSquaredDistance(coordinates, startIndex, endIndex - count);\n      if (reverseDistance < forwardDistance) {\n        newEndIndex -= count;\n      }\n    } else {\n      const reverseDistance = getCumulativeSquaredDistance(coordinates, startIndex, endIndex);\n      const forwardDistance = getCumulativeSquaredDistance(coordinates, startIndex, endIndex + count);\n      if (forwardDistance < reverseDistance) {\n        newEndIndex += count;\n      }\n    }\n  }\n  sharedUpdateInfo.index = newTargetIndex;\n  sharedUpdateInfo.endIndex = newEndIndex;\n  return sharedUpdateInfo;\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} coordinate The clicked coordinate.\n * @param {Array<import(\"../coordinate.js\").Coordinate>} coordinates The geometry component coordinates.\n * @param {boolean} ring The coordinates represent a linear ring.\n * @param {Array<TraceTarget>} targets The trace targets.\n */\nfunction appendTraceTarget(coordinate, coordinates, ring, targets) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n    const start = coordinates[i];\n    const end = coordinates[i + 1];\n    const rel = getPointSegmentRelationship(x, y, start, end);\n    if (rel.squaredDistance === 0) {\n      const index = i + rel.along;\n      targets.push({\n        coordinates: coordinates,\n        ring: ring,\n        startIndex: index,\n        endIndex: index\n      });\n      return;\n    }\n  }\n}\n\n/**\n * @typedef {Object} PointSegmentRelationship\n * @property {number} along The closest point expressed as a fraction along the segment length.\n * @property {number} squaredDistance The squared distance of the point to the segment.\n */\n\n/**\n * @type {PointSegmentRelationship}\n */\nconst sharedRel = {\n  along: 0,\n  squaredDistance: 0\n};\n\n/**\n * @param {number} x The point x.\n * @param {number} y The point y.\n * @param {import(\"../coordinate.js\").Coordinate} start The segment start.\n * @param {import(\"../coordinate.js\").Coordinate} end The segment end.\n * @return {PointSegmentRelationship} The point segment relationship.  The returned object is\n * shared between calls and must not be modified by the caller.\n */\nfunction getPointSegmentRelationship(x, y, start, end) {\n  const x1 = start[0];\n  const y1 = start[1];\n  const x2 = end[0];\n  const y2 = end[1];\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  let along = 0;\n  let px = x1;\n  let py = y1;\n  if (dx !== 0 || dy !== 0) {\n    along = clamp(((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy), 0, 1);\n    px += dx * along;\n    py += dy * along;\n  }\n  sharedRel.along = along;\n  sharedRel.squaredDistance = toFixed(squaredDistance(x, y, px, py), 10);\n  return sharedRel;\n}\n\n/**\n * @param {LineCoordType} coordinates The coordinates.\n * @param {number} index The index.  May be fractional and may wrap.\n * @return {import(\"../coordinate.js\").Coordinate} The interpolated coordinate.\n */\nfunction interpolateCoordinate(coordinates, index) {\n  const count = coordinates.length;\n  let startIndex = Math.floor(index);\n  const along = index - startIndex;\n  if (startIndex >= count) {\n    startIndex -= count;\n  } else if (startIndex < 0) {\n    startIndex += count;\n  }\n  let endIndex = startIndex + 1;\n  if (endIndex >= count) {\n    endIndex -= count;\n  }\n  const start = coordinates[startIndex];\n  const x0 = start[0];\n  const y0 = start[1];\n  const end = coordinates[endIndex];\n  const dx = end[0] - x0;\n  const dy = end[1] - y0;\n  return [x0 + dx * along, y0 + dy * along];\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'drawabort'|'drawend'|'drawstart', DrawEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'drawabort'|'drawend'|'drawstart', Return>} DrawOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\nclass Draw extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */\n    options;\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n    super(pointerOptions);\n\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {DrawOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.shouldHandle_ = false;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.downPx_ = null;\n\n    /**\n     * @type {ReturnType<typeof setTimeout>}\n     * @private\n     */\n    this.downTimeout_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.lastDragTime_;\n\n    /**\n     * Pointer type of the last pointermove event\n     * @type {string}\n     * @private\n     */\n    this.pointerType_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.freehand_ = false;\n\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource|null}\n     * @private\n     */\n    this.source_ = options.source ? options.source : null;\n\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>|null}\n     * @private\n     */\n    this.features_ = options.features ? options.features : null;\n\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n    this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n\n    /**\n     * Geometry type.\n     * @type {import(\"../geom/Geometry.js\").Type}\n     * @private\n     */\n    this.type_ = /** @type {import(\"../geom/Geometry.js\").Type} */\n    options.type;\n\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n    this.mode_ = getMode(this.type_);\n\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n    this.stopClick_ = !!options.stopClick;\n\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n    this.minPoints_ = options.minPoints ? options.minPoints : this.mode_ === 'Polygon' ? 3 : 2;\n\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n    this.maxPoints_ = this.mode_ === 'Circle' ? 2 : options.maxPoints ? options.maxPoints : Infinity;\n\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;\n\n    /**\n     * @private\n     * @type {import(\"../geom/Geometry.js\").GeometryLayout}\n     */\n    this.geometryLayout_ = options.geometryLayout ? options.geometryLayout : 'XY';\n    let geometryFunction = options.geometryFunction;\n    if (!geometryFunction) {\n      const mode = this.mode_;\n      if (mode === 'Circle') {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, geometry, projection) {\n          const circle = geometry ? /** @type {Circle} */geometry : new Circle([NaN, NaN]);\n          const center = fromUserCoordinate(coordinates[0], projection);\n          const squaredLength = squaredCoordinateDistance(center, fromUserCoordinate(coordinates[coordinates.length - 1], projection));\n          circle.setCenterAndRadius(center, Math.sqrt(squaredLength), this.geometryLayout_);\n          const userProjection = getUserProjection();\n          if (userProjection) {\n            circle.transform(projection, userProjection);\n          }\n          return circle;\n        };\n      } else {\n        let Constructor;\n        if (mode === 'Point') {\n          Constructor = Point;\n        } else if (mode === 'LineString') {\n          Constructor = LineString;\n        } else if (mode === 'Polygon') {\n          Constructor = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, geometry, projection) {\n          if (geometry) {\n            if (mode === 'Polygon') {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])], this.geometryLayout_);\n              } else {\n                geometry.setCoordinates([], this.geometryLayout_);\n              }\n            } else {\n              geometry.setCoordinates(coordinates, this.geometryLayout_);\n            }\n          } else {\n            geometry = new Constructor(coordinates, this.geometryLayout_);\n          }\n          return geometry;\n        };\n      }\n    }\n\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n    this.geometryFunction_ = geometryFunction;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.finishCoordinate_ = null;\n\n    /**\n     * Sketch feature.\n     * @type {Feature<import('../geom/SimpleGeometry.js').default>}\n     * @private\n     */\n    this.sketchFeature_ = null;\n\n    /**\n     * Sketch point.\n     * @type {Feature<Point>}\n     * @private\n     */\n    this.sketchPoint_ = null;\n\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n    this.sketchCoords_ = null;\n\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature<LineString>}\n     * @private\n     */\n    this.sketchLine_ = null;\n\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n    this.sketchLineCoords_ = null;\n\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n    this.squaredClickTolerance_ = options.clickTolerance ? options.clickTolerance * options.clickTolerance : 36;\n\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileInteracting: true\n    });\n\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : noModifierKeys;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.freehandCondition_;\n    if (options.freehand) {\n      this.freehandCondition_ = always;\n    } else {\n      this.freehandCondition_ = options.freehandCondition ? options.freehandCondition : shiftKeyOnly;\n    }\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.traceCondition_;\n    this.setTrace(options.trace || false);\n\n    /**\n     * @type {TraceState}\n     * @private\n     */\n    this.traceState_ = {\n      active: false\n    };\n\n    /**\n     * @type {VectorSource|null}\n     * @private\n     */\n    this.traceSource_ = options.traceSource || options.source || null;\n    this.addChangeListener(InteractionProperty.ACTIVE, this.updateState_);\n  }\n\n  /**\n   * Toggle tracing mode or set a tracing condition.\n   *\n   * @param {boolean|import(\"../events/condition.js\").Condition} trace A boolean to toggle tracing mode or an event\n   *     condition that will be checked when a feature is clicked to determine if tracing should be active.\n   */\n  setTrace(trace) {\n    let condition;\n    if (!trace) {\n      condition = never;\n    } else if (trace === true) {\n      condition = always;\n    } else {\n      condition = trace;\n    }\n    this.traceCondition_ = condition;\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   */\n  setMap(map) {\n    super.setMap(map);\n    this.updateState_();\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  handleEvent(event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.originalEvent.preventDefault();\n    }\n    this.freehand_ = this.mode_ !== 'Point' && this.freehandCondition_(event);\n    let move = event.type === MapBrowserEventType.POINTERMOVE;\n    let pass = true;\n    if (!this.freehand_ && this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {\n      const now = Date.now();\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n    if (this.freehand_ && event.type === MapBrowserEventType.POINTERDRAG && this.sketchFeature_ !== null) {\n      this.addToDrawing_(event.coordinate);\n      pass = false;\n    } else if (this.freehand_ && event.type === MapBrowserEventType.POINTERDOWN) {\n      pass = false;\n    } else if (move && this.getPointerCount() < 2) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n      if (pass && this.freehand_) {\n        this.handlePointerMove_(event);\n        if (this.shouldHandle_) {\n          // Avoid page scrolling when freehand drawing on mobile\n          event.originalEvent.preventDefault();\n        }\n      } else if (event.originalEvent.pointerType === 'mouse' || event.type === MapBrowserEventType.POINTERDRAG && this.downTimeout_ === undefined) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n    return super.handleEvent(event) && pass;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(event) {\n    this.shouldHandle_ = !this.freehand_;\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event.coordinate);\n      }\n      return true;\n    }\n    if (!this.condition_(event)) {\n      this.lastDragTime_ = undefined;\n      return false;\n    }\n    this.lastDragTime_ = Date.now();\n    this.downTimeout_ = setTimeout(() => {\n      this.handlePointerMove_(new MapBrowserEvent(MapBrowserEventType.POINTERMOVE, event.map, event.originalEvent, false, event.frameState));\n    }, this.dragVertexDelay_);\n    this.downPx_ = event.pixel;\n    return true;\n  }\n\n  /**\n   * @private\n   */\n  deactivateTrace_() {\n    this.traceState_ = {\n      active: false\n    };\n  }\n\n  /**\n   * Activate or deactivate trace state based on a browser event.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  toggleTraceState_(event) {\n    if (!this.traceSource_ || !this.traceCondition_(event)) {\n      return;\n    }\n    if (this.traceState_.active) {\n      this.deactivateTrace_();\n      return;\n    }\n    const map = this.getMap();\n    const lowerLeft = map.getCoordinateFromPixel([event.pixel[0] - this.snapTolerance_, event.pixel[1] + this.snapTolerance_]);\n    const upperRight = map.getCoordinateFromPixel([event.pixel[0] + this.snapTolerance_, event.pixel[1] - this.snapTolerance_]);\n    const extent = boundingExtent([lowerLeft, upperRight]);\n    const features = this.traceSource_.getFeaturesInExtent(extent);\n    if (features.length === 0) {\n      return;\n    }\n    const targets = getTraceTargets(event.coordinate, features);\n    if (targets.length) {\n      this.traceState_ = {\n        active: true,\n        startPx: event.pixel.slice(),\n        targets: targets,\n        targetIndex: -1\n      };\n    }\n  }\n\n  /**\n   * @param {TraceTarget} target The trace target.\n   * @param {number} endIndex The new end index of the trace.\n   * @private\n   */\n  addOrRemoveTracedCoordinates_(target, endIndex) {\n    // three cases to handle:\n    //  1. traced in the same direction and points need adding\n    //  2. traced in the same direction and points need removing\n    //  3. traced in a new direction\n    const previouslyForward = target.startIndex <= target.endIndex;\n    const currentlyForward = target.startIndex <= endIndex;\n    if (previouslyForward === currentlyForward) {\n      // same direction\n      if (previouslyForward && endIndex > target.endIndex || !previouslyForward && endIndex < target.endIndex) {\n        // case 1 - add new points\n        this.addTracedCoordinates_(target, target.endIndex, endIndex);\n      } else if (previouslyForward && endIndex < target.endIndex || !previouslyForward && endIndex > target.endIndex) {\n        // case 2 - remove old points\n        this.removeTracedCoordinates_(endIndex, target.endIndex);\n      }\n    } else {\n      // case 3 - remove old points, add new points\n      this.removeTracedCoordinates_(target.startIndex, target.endIndex);\n      this.addTracedCoordinates_(target, target.startIndex, endIndex);\n    }\n  }\n\n  /**\n   * @param {number} fromIndex The start index.\n   * @param {number} toIndex The end index.\n   * @private\n   */\n  removeTracedCoordinates_(fromIndex, toIndex) {\n    if (fromIndex === toIndex) {\n      return;\n    }\n    let remove = 0;\n    if (fromIndex < toIndex) {\n      const start = Math.ceil(fromIndex);\n      let end = Math.floor(toIndex);\n      if (end === toIndex) {\n        end -= 1;\n      }\n      remove = end - start + 1;\n    } else {\n      const start = Math.floor(fromIndex);\n      let end = Math.ceil(toIndex);\n      if (end === toIndex) {\n        end += 1;\n      }\n      remove = start - end + 1;\n    }\n    if (remove > 0) {\n      this.removeLastPoints_(remove);\n    }\n  }\n\n  /**\n   * @param {TraceTarget} target The trace target.\n   * @param {number} fromIndex The start index.\n   * @param {number} toIndex The end index.\n   * @private\n   */\n  addTracedCoordinates_(target, fromIndex, toIndex) {\n    if (fromIndex === toIndex) {\n      return;\n    }\n    const coordinates = [];\n    if (fromIndex < toIndex) {\n      // forward trace\n      const start = Math.ceil(fromIndex);\n      let end = Math.floor(toIndex);\n      if (end === toIndex) {\n        // if end is snapped to a vertex, it will be added later\n        end -= 1;\n      }\n      for (let i = start; i <= end; ++i) {\n        coordinates.push(getCoordinate(target.coordinates, i));\n      }\n    } else {\n      // reverse trace\n      const start = Math.floor(fromIndex);\n      let end = Math.ceil(toIndex);\n      if (end === toIndex) {\n        end += 1;\n      }\n      for (let i = start; i >= end; --i) {\n        coordinates.push(getCoordinate(target.coordinates, i));\n      }\n    }\n    if (coordinates.length) {\n      this.appendCoordinates(coordinates);\n    }\n  }\n\n  /**\n   * Update the trace.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  updateTrace_(event) {\n    const traceState = this.traceState_;\n    if (!traceState.active) {\n      return;\n    }\n    if (traceState.targetIndex === -1) {\n      // check if we are ready to pick a target\n      if (distance(traceState.startPx, event.pixel) < this.snapTolerance_) {\n        return;\n      }\n    }\n    const updatedTraceTarget = getTraceTargetUpdate(event.coordinate, traceState, this.getMap(), this.snapTolerance_);\n    if (traceState.targetIndex !== updatedTraceTarget.index) {\n      // target changed\n      if (traceState.targetIndex !== -1) {\n        // remove points added during previous trace\n        const oldTarget = traceState.targets[traceState.targetIndex];\n        this.removeTracedCoordinates_(oldTarget.startIndex, oldTarget.endIndex);\n      }\n      // add points for the new target\n      const newTarget = traceState.targets[updatedTraceTarget.index];\n      this.addTracedCoordinates_(newTarget, newTarget.startIndex, updatedTraceTarget.endIndex);\n    } else {\n      // target stayed the same\n      const target = traceState.targets[traceState.targetIndex];\n      this.addOrRemoveTracedCoordinates_(target, updatedTraceTarget.endIndex);\n    }\n\n    // modify the state with updated info\n    traceState.targetIndex = updatedTraceTarget.index;\n    const target = traceState.targets[traceState.targetIndex];\n    target.endIndex = updatedTraceTarget.endIndex;\n\n    // update event coordinate and pixel to match end point of final segment\n    const coordinate = interpolateCoordinate(target.coordinates, target.endIndex);\n    const pixel = this.getMap().getPixelFromCoordinate(coordinate);\n    event.coordinate = coordinate;\n    event.pixel = [Math.round(pixel[0]), Math.round(pixel[1])];\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(event) {\n    let pass = true;\n    if (this.getPointerCount() === 0) {\n      if (this.downTimeout_) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n      this.handlePointerMove_(event);\n      const tracing = this.traceState_.active;\n      this.toggleTraceState_(event);\n      if (this.shouldHandle_) {\n        const startingToDraw = !this.finishCoordinate_;\n        if (startingToDraw) {\n          this.startDrawing_(event.coordinate);\n        }\n        if (!startingToDraw && this.freehand_) {\n          this.finishDrawing();\n        } else if (!this.freehand_ && (!startingToDraw || this.mode_ === 'Point')) {\n          if (this.atFinish_(event.pixel, tracing)) {\n            if (this.finishCondition_(event)) {\n              this.finishDrawing();\n            }\n          } else {\n            this.addToDrawing_(event.coordinate);\n          }\n        }\n        pass = false;\n      } else if (this.freehand_) {\n        this.abortDrawing();\n      }\n    }\n    if (!pass && this.stopClick_) {\n      event.preventDefault();\n    }\n    return pass;\n  }\n\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @private\n   */\n  handlePointerMove_(event) {\n    this.pointerType_ = event.originalEvent.pointerType;\n    if (this.downPx_ && (!this.freehand_ && this.shouldHandle_ || this.freehand_ && !this.shouldHandle_)) {\n      const downPx = this.downPx_;\n      const clickPx = event.pixel;\n      const dx = downPx[0] - clickPx[0];\n      const dy = downPx[1] - clickPx[1];\n      const squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_ ? squaredDistance > this.squaredClickTolerance_ : squaredDistance <= this.squaredClickTolerance_;\n      if (!this.shouldHandle_) {\n        return;\n      }\n    }\n    if (!this.finishCoordinate_) {\n      this.createOrUpdateSketchPoint_(event.coordinate.slice());\n      return;\n    }\n    this.updateTrace_(event);\n    this.modifyDrawing_(event.coordinate);\n  }\n\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @param {boolean} [tracing] Drawing in trace mode (only stop if at the starting point).\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n  atFinish_(pixel, tracing) {\n    let at = false;\n    if (this.sketchFeature_) {\n      let potentiallyDone = false;\n      let potentiallyFinishCoordinates = [this.finishCoordinate_];\n      const mode = this.mode_;\n      if (mode === 'Point') {\n        at = true;\n      } else if (mode === 'Circle') {\n        at = this.sketchCoords_.length === 2;\n      } else if (mode === 'LineString') {\n        potentiallyDone = !tracing && this.sketchCoords_.length > this.minPoints_;\n      } else if (mode === 'Polygon') {\n        const sketchCoords = /** @type {PolyCoordType} */this.sketchCoords_;\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [sketchCoords[0][0], sketchCoords[0][sketchCoords[0].length - 2]];\n        if (tracing) {\n          potentiallyFinishCoordinates = [sketchCoords[0][0]];\n        } else {\n          potentiallyFinishCoordinates = [sketchCoords[0][0], sketchCoords[0][sketchCoords[0].length - 2]];\n        }\n      }\n      if (potentiallyDone) {\n        const map = this.getMap();\n        for (let i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          const finishCoordinate = potentiallyFinishCoordinates[i];\n          const finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          const dx = pixel[0] - finishPixel[0];\n          const dy = pixel[1] - finishPixel[1];\n          const snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n    return at;\n  }\n\n  /**\n   * @param {import(\"../coordinate\").Coordinate} coordinates Coordinate.\n   * @private\n   */\n  createOrUpdateSketchPoint_(coordinates) {\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      const sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  }\n\n  /**\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @private\n   */\n  createOrUpdateCustomSketchLine_(geometry) {\n    if (!this.sketchLine_) {\n      this.sketchLine_ = new Feature();\n    }\n    const ring = geometry.getLinearRing(0);\n    let sketchLineGeom = this.sketchLine_.getGeometry();\n    if (!sketchLineGeom) {\n      sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());\n      this.sketchLine_.setGeometry(sketchLineGeom);\n    } else {\n      sketchLineGeom.setFlatCoordinates(ring.getLayout(), ring.getFlatCoordinates());\n      sketchLineGeom.changed();\n    }\n  }\n\n  /**\n   * Start the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} start Start coordinate.\n   * @private\n   */\n  startDrawing_(start) {\n    const projection = this.getMap().getView().getProjection();\n    const stride = getStrideForLayout(this.geometryLayout_);\n    while (start.length < stride) {\n      start.push(0);\n    }\n    this.finishCoordinate_ = start;\n    if (this.mode_ === 'Point') {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === 'Polygon') {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n    }\n    const geometry = this.geometryFunction_(this.sketchCoords_, undefined, projection);\n    this.sketchFeature_ = new Feature();\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  }\n\n  /**\n   * Modify the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @private\n   */\n  modifyDrawing_(coordinate) {\n    const map = this.getMap();\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = map.getView().getProjection();\n    const stride = getStrideForLayout(this.geometryLayout_);\n    let coordinates, last;\n    while (coordinate.length < stride) {\n      coordinate.push(0);\n    }\n    if (this.mode_ === 'Point') {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === 'Polygon') {\n      coordinates = /** @type {PolyCoordType} */this.sketchCoords_[0];\n      last = coordinates[coordinates.length - 1];\n      if (this.atFinish_(map.getPixelFromCoordinate(coordinate))) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_( /** @type {!LineCoordType} */this.sketchCoords_, geometry, projection);\n    if (this.sketchPoint_) {\n      const sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n    if (geometry.getType() === 'Polygon' && this.mode_ !== 'Polygon') {\n      this.createOrUpdateCustomSketchLine_( /** @type {Polygon} */geometry);\n    } else if (this.sketchLineCoords_) {\n      const sketchLineGeom = this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {!PointCoordType} coordinate Coordinate\n   * @private\n   */\n  addToDrawing_(coordinate) {\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    let done;\n    let coordinates;\n    const mode = this.mode_;\n    if (mode === 'LineString' || mode === 'Circle') {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates = /** @type {LineCoordType} */this.sketchCoords_;\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (mode === 'Polygon') {\n      coordinates = /** @type {PolyCoordType} */this.sketchCoords_[0];\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n    this.createOrUpdateSketchPoint_(coordinate.slice());\n    this.updateSketchFeatures_();\n    if (done) {\n      this.finishDrawing();\n    }\n  }\n\n  /**\n   * @param {number} n The number of points to remove.\n   */\n  removeLastPoints_(n) {\n    if (!this.sketchFeature_) {\n      return;\n    }\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    const mode = this.mode_;\n    for (let i = 0; i < n; ++i) {\n      let coordinates;\n      if (mode === 'LineString' || mode === 'Circle') {\n        coordinates = /** @type {LineCoordType} */this.sketchCoords_;\n        coordinates.splice(-2, 1);\n        if (coordinates.length >= 2) {\n          this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n          const finishCoordinate = this.finishCoordinate_.slice();\n          coordinates[coordinates.length - 1] = finishCoordinate;\n          this.createOrUpdateSketchPoint_(finishCoordinate);\n        }\n        this.geometryFunction_(coordinates, geometry, projection);\n        if (geometry.getType() === 'Polygon' && this.sketchLine_) {\n          this.createOrUpdateCustomSketchLine_( /** @type {Polygon} */geometry);\n        }\n      } else if (mode === 'Polygon') {\n        coordinates = /** @type {PolyCoordType} */this.sketchCoords_[0];\n        coordinates.splice(-2, 1);\n        const sketchLineGeom = this.sketchLine_.getGeometry();\n        if (coordinates.length >= 2) {\n          const finishCoordinate = coordinates[coordinates.length - 2].slice();\n          coordinates[coordinates.length - 1] = finishCoordinate;\n          this.createOrUpdateSketchPoint_(finishCoordinate);\n        }\n        sketchLineGeom.setCoordinates(coordinates);\n        this.geometryFunction_(this.sketchCoords_, geometry, projection);\n      }\n      if (coordinates.length === 1) {\n        this.abortDrawing();\n        break;\n      }\n    }\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Remove last point of the feature currently being drawn. Does not do anything when\n   * drawing POINT or MULTI_POINT geometries.\n   * @api\n   */\n  removeLastPoint() {\n    this.removeLastPoints_(1);\n  }\n\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n  finishDrawing() {\n    const sketchFeature = this.abortDrawing_();\n    if (!sketchFeature) {\n      return;\n    }\n    let coordinates = this.sketchCoords_;\n    const geometry = sketchFeature.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    if (this.mode_ === 'LineString') {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (this.mode_ === 'Polygon') {\n      // remove the redundant last point in ring\n      /** @type {PolyCoordType} */\n      coordinates[0].pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n      coordinates = geometry.getCoordinates();\n    }\n\n    // cast multi-part geometries\n    if (this.type_ === 'MultiPoint') {\n      sketchFeature.setGeometry(new MultiPoint([/** @type {PointCoordType} */coordinates]));\n    } else if (this.type_ === 'MultiLineString') {\n      sketchFeature.setGeometry(new MultiLineString([/** @type {LineCoordType} */coordinates]));\n    } else if (this.type_ === 'MultiPolygon') {\n      sketchFeature.setGeometry(new MultiPolygon([/** @type {PolyCoordType} */coordinates]));\n    }\n\n    // First dispatch event to allow full set up of feature\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));\n\n    // Then insert feature\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  }\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature<import(\"../geom/SimpleGeometry.js\").default>|null} The sketch feature (or null if none).\n   * @private\n   */\n  abortDrawing_() {\n    this.finishCoordinate_ = null;\n    const sketchFeature = this.sketchFeature_;\n    this.sketchFeature_ = null;\n    this.sketchPoint_ = null;\n    this.sketchLine_ = null;\n    this.overlay_.getSource().clear(true);\n    this.deactivateTrace_();\n    return sketchFeature;\n  }\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @api\n   */\n  abortDrawing() {\n    const sketchFeature = this.abortDrawing_();\n    if (sketchFeature) {\n      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWABORT, sketchFeature));\n    }\n  }\n\n  /**\n   * Append coordinates to the end of the geometry that is currently being drawn.\n   * This can be used when drawing LineStrings or Polygons. Coordinates will\n   * either be appended to the current LineString or the outer ring of the current\n   * Polygon. If no geometry is being drawn, a new one will be created.\n   * @param {!LineCoordType} coordinates Linear coordinates to be appended to\n   * the coordinate array.\n   * @api\n   */\n  appendCoordinates(coordinates) {\n    const mode = this.mode_;\n    const newDrawing = !this.sketchFeature_;\n    if (newDrawing) {\n      this.startDrawing_(coordinates[0]);\n    }\n    /** @type {LineCoordType} */\n    let sketchCoords;\n    if (mode === 'LineString' || mode === 'Circle') {\n      sketchCoords = /** @type {LineCoordType} */this.sketchCoords_;\n    } else if (mode === 'Polygon') {\n      sketchCoords = this.sketchCoords_ && this.sketchCoords_.length ? /** @type {PolyCoordType} */this.sketchCoords_[0] : [];\n    } else {\n      return;\n    }\n    if (newDrawing) {\n      sketchCoords.shift();\n    }\n\n    // Remove last coordinate from sketch drawing (this coordinate follows cursor position)\n    sketchCoords.pop();\n\n    // Append coordinate list\n    for (let i = 0; i < coordinates.length; i++) {\n      this.addToDrawing_(coordinates[i]);\n    }\n    const ending = coordinates[coordinates.length - 1];\n    // Duplicate last coordinate for sketch drawing (cursor position)\n    this.addToDrawing_(ending);\n    this.modifyDrawing_(ending);\n  }\n\n  /**\n   * Initiate draw mode by starting from an existing geometry which will\n   * receive new additional points. This only works on features with\n   * `LineString` geometries, where the interaction will extend lines by adding\n   * points to the end of the coordinates array.\n   * This will change the original feature, instead of drawing a copy.\n   *\n   * The function will dispatch a `drawstart` event.\n   *\n   * @param {!Feature<LineString>} feature Feature to be extended.\n   * @api\n   */\n  extend(feature) {\n    const geometry = feature.getGeometry();\n    const lineString = geometry;\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    const last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.sketchPoint_ = new Feature(new Point(last));\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  }\n\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n  updateSketchFeatures_() {\n    const sketchFeatures = [];\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n    const overlaySource = this.overlay_.getSource();\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  }\n\n  /**\n   * @private\n   */\n  updateState_() {\n    const map = this.getMap();\n    const active = this.getActive();\n    if (!map || !active) {\n      this.abortDrawing();\n    }\n    this.overlay_.setMap(active ? map : null);\n  }\n}\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const styles = createEditingStyle();\n  return function (feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of a\n * {@link import(\"../geom/Circle.js\").Circle} geometry.\n * @param {number} [sides] Number of sides of the regular polygon.\n *     Default is 32.\n * @param {number} [angle] Angle of the first point in counter-clockwise\n *     radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a polygon.\n * @api\n */\nexport function createRegularPolygon(sides, angle) {\n  return function (coordinates, geometry, projection) {\n    const center = fromUserCoordinate( /** @type {LineCoordType} */coordinates[0], projection);\n    const end = fromUserCoordinate( /** @type {LineCoordType} */coordinates[coordinates.length - 1], projection);\n    const radius = Math.sqrt(squaredCoordinateDistance(center, end));\n    geometry = geometry || fromCircle(new Circle(center), sides);\n    let internalAngle = angle;\n    if (!angle && angle !== 0) {\n      const x = end[0] - center[0];\n      const y = end[1] - center[1];\n      internalAngle = Math.atan2(y, x);\n    }\n    makeRegular( /** @type {Polygon} */geometry, center, radius, internalAngle);\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\nexport function createBox() {\n  return function (coordinates, geometry, projection) {\n    const extent = boundingExtent( /** @type {LineCoordType} */[coordinates[0], coordinates[coordinates.length - 1]].map(function (coordinate) {\n      return fromUserCoordinate(coordinate, projection);\n    }));\n    const boxCoordinates = [[getBottomLeft(extent), getBottomRight(extent), getTopRight(extent), getTopLeft(extent), getBottomLeft(extent)]];\n    if (geometry) {\n      geometry.setCoordinates(boxCoordinates);\n    } else {\n      geometry = new Polygon(boxCoordinates);\n    }\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n\n/**\n * Get the drawing mode.  The mode for multi-part geometries is the same as for\n * their single-part cousins.\n * @param {import(\"../geom/Geometry.js\").Type} type Geometry type.\n * @return {Mode} Drawing mode.\n */\nfunction getMode(type) {\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n      return 'Point';\n    case 'LineString':\n    case 'MultiLineString':\n      return 'LineString';\n    case 'Polygon':\n    case 'MultiPolygon':\n      return 'Polygon';\n    case 'Circle':\n      return 'Circle';\n    default:\n      throw new Error('Invalid type: ' + type);\n  }\n}\nexport default Draw;","map":{"version":3,"names":["Circle","Event","EventType","Feature","GeometryCollection","InteractionProperty","LineString","MapBrowserEvent","MapBrowserEventType","MultiLineString","MultiPoint","MultiPolygon","Point","PointerInteraction","Polygon","fromCircle","makeRegular","VectorLayer","VectorSource","FALSE","TRUE","always","never","noModifierKeys","shiftKeyOnly","boundingExtent","getBottomLeft","getBottomRight","getTopLeft","getTopRight","clamp","squaredDistance","toFixed","createEditingStyle","distance","squaredCoordinateDistance","fromUserCoordinate","getUserProjection","getStrideForLayout","DrawEventType","DRAWSTART","DRAWEND","DRAWABORT","DrawEvent","constructor","type","feature","getTraceTargets","coordinate","features","targets","i","length","geometry","getGeometry","appendGeometryTraceTargets","getSquaredDistance","a","b","getCoordinate","coordinates","index","count","getCumulativeSquaredDistance","startIndex","endIndex","lowIndex","highIndex","lowWholeIndex","Math","ceil","highWholeIndex","floor","start","interpolateCoordinate","end","sd","appendTraceTarget","getCoordinates","ii","polys","j","jj","geometries","getGeometries","sharedUpdateInfo","NaN","getTraceTargetUpdate","traceState","map","snapTolerance","x","y","closestTargetDistance","Infinity","newTargetIndex","newEndIndex","targetIndex","target","minSegmentDistance","coordinateIndex","rel","getPointSegmentRelationship","along","ring","newTarget","considerBothDirections","newCoordinate","pixel","getPixelFromCoordinate","startPx","forwardDistance","reverseDistance","push","sharedRel","x1","y1","x2","y2","dx","dy","px","py","x0","y0","Draw","options","pointerOptions","stopDown","on","once","un","shouldHandle_","downPx_","downTimeout_","lastDragTime_","pointerType_","freehand_","source_","source","features_","snapTolerance_","type_","mode_","getMode","stopClick_","stopClick","minPoints_","minPoints","maxPoints_","maxPoints","finishCondition_","finishCondition","geometryLayout_","geometryLayout","geometryFunction","mode","projection","circle","center","squaredLength","setCenterAndRadius","sqrt","userProjection","transform","Constructor","setCoordinates","concat","geometryFunction_","dragVertexDelay_","dragVertexDelay","undefined","finishCoordinate_","sketchFeature_","sketchPoint_","sketchCoords_","sketchLine_","sketchLineCoords_","squaredClickTolerance_","clickTolerance","overlay_","useSpatialIndex","wrapX","style","getDefaultStyleFunction","updateWhileInteracting","geometryName_","geometryName","condition_","condition","freehandCondition_","freehand","freehandCondition","traceCondition_","setTrace","trace","traceState_","active","traceSource_","traceSource","addChangeListener","ACTIVE","updateState_","setMap","getOverlay","handleEvent","event","originalEvent","CONTEXTMENU","preventDefault","move","POINTERMOVE","pass","POINTERDRAG","now","Date","clearTimeout","addToDrawing_","POINTERDOWN","getPointerCount","handlePointerMove_","pointerType","DBLCLICK","handleDownEvent","startDrawing_","setTimeout","frameState","deactivateTrace_","toggleTraceState_","getMap","lowerLeft","getCoordinateFromPixel","upperRight","extent","getFeaturesInExtent","slice","addOrRemoveTracedCoordinates_","previouslyForward","currentlyForward","addTracedCoordinates_","removeTracedCoordinates_","fromIndex","toIndex","remove","removeLastPoints_","appendCoordinates","updateTrace_","updatedTraceTarget","oldTarget","round","handleUpEvent","tracing","startingToDraw","finishDrawing","atFinish_","abortDrawing","downPx","clickPx","createOrUpdateSketchPoint_","modifyDrawing_","at","potentiallyDone","potentiallyFinishCoordinates","sketchCoords","finishCoordinate","finishPixel","updateSketchFeatures_","sketchPointGeom","createOrUpdateCustomSketchLine_","getLinearRing","sketchLineGeom","getFlatCoordinates","getLayout","setGeometry","setFlatCoordinates","changed","getView","getProjection","stride","setGeometryName","dispatchEvent","last","getType","done","pop","n","splice","removeLastPoint","sketchFeature","abortDrawing_","addFeature","getSource","clear","newDrawing","shift","ending","extend","lineString","sketchFeatures","overlaySource","addFeatures","getActive","styles","resolution","createRegularPolygon","sides","angle","radius","internalAngle","atan2","createBox","boxCoordinates","Error"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/interaction/Draw.js"],"sourcesContent":["/**\n * @module ol/interaction/Draw\n */\nimport Circle from '../geom/Circle.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport InteractionProperty from './Property.js';\nimport LineString from '../geom/LineString.js';\nimport MapBrowserEvent from '../MapBrowserEvent.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport Polygon, {fromCircle, makeRegular} from '../geom/Polygon.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {FALSE, TRUE} from '../functions.js';\nimport {\n  always,\n  never,\n  noModifierKeys,\n  shiftKeyOnly,\n} from '../events/condition.js';\nimport {\n  boundingExtent,\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n} from '../extent.js';\nimport {clamp, squaredDistance, toFixed} from '../math.js';\nimport {createEditingStyle} from '../style/Style.js';\nimport {\n  distance,\n  squaredDistance as squaredCoordinateDistance,\n} from '../coordinate.js';\nimport {fromUserCoordinate, getUserProjection} from '../proj.js';\nimport {getStrideForLayout} from '../geom/SimpleGeometry.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../geom/Geometry.js\").Type} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish. Must be greater than `0`.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished. Not used when drawing\n * POINT or MULTI_POINT geometries.\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition.noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition.shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean|import(\"../events/condition.js\").Condition} [trace=false] Trace a portion of another geometry.\n * Ignored when in freehand mode.\n * @property {VectorSource} [traceSource] Source for features to trace.  If tracing is active and a `traceSource` is\n * not provided, the interaction's `source` will be used.  Tracing requires that the interaction is configured with\n * either a `traceSource` or a `source`.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {import(\"../geom/Geometry.js\").GeometryLayout} [geometryLayout='XY'] Layout of the\n * feature geometries created by the draw interaction.\n */\n\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n\n/**\n * @typedef {Object} TraceState\n * @property {boolean} active Tracing active.\n * @property {import(\"../pixel.js\").Pixel} [startPx] The initially clicked pixel location.\n * @property {Array<TraceTarget>} [targets] Targets available for tracing.\n * @property {number} [targetIndex] The index of the currently traced target.  A value of -1 indicates\n * that no trace target is active.\n */\n\n/**\n * @typedef {Object} TraceTarget\n * @property {Array<import(\"../coordinate.js\").Coordinate>} coordinates Target coordinates.\n * @property {boolean} ring The target coordinates are a linear ring.\n * @property {number} startIndex The index of first traced coordinate.  A fractional index represents an\n * edge intersection.  Index values for rings will wrap (may be negative or larger than coordinates length).\n * @property {number} endIndex The index of last traced coordinate.  Details from startIndex also apply here.\n */\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry\n * and a projection as arguments, and returns a geometry. The optional existing\n * geometry is the geometry that is returned when the function is called without\n * a second argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default,\n *     import(\"../proj/Projection.js\").default):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n\n/**\n * @typedef {'Point' | 'LineString' | 'Polygon' | 'Circle'} Mode\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n */\n\n/**\n * @enum {string}\n */\nconst DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend',\n  /**\n   * Triggered upon feature draw abortion\n   * @event DrawEvent#drawabort\n   * @api\n   */\n  DRAWABORT: 'drawabort',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\nexport class DrawEvent extends Event {\n  /**\n   * @param {DrawEventType} type Type.\n   * @param {Feature} feature The feature drawn.\n   */\n  constructor(type, feature) {\n    super(type);\n\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n    this.feature = feature;\n  }\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} coordinate The coordinate.\n * @param {Array<Feature>} features The candidate features.\n * @return {Array<TraceTarget>} The trace targets.\n */\nfunction getTraceTargets(coordinate, features) {\n  /**\n   * @type {Array<TraceTarget>}\n   */\n  const targets = [];\n\n  for (let i = 0; i < features.length; ++i) {\n    const feature = features[i];\n    const geometry = feature.getGeometry();\n    appendGeometryTraceTargets(coordinate, geometry, targets);\n  }\n\n  return targets;\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} a One coordinate.\n * @param {import(\"../coordinate.js\").Coordinate} b Another coordinate.\n * @return {number} The squared distance between the two coordinates.\n */\nfunction getSquaredDistance(a, b) {\n  return squaredDistance(a[0], a[1], b[0], b[1]);\n}\n\n/**\n * @param {LineCoordType} coordinates The ring coordinates.\n * @param {number} index The index.  May be wrapped.\n * @return {import(\"../coordinate.js\").Coordinate} The coordinate.\n */\nfunction getCoordinate(coordinates, index) {\n  const count = coordinates.length;\n  if (index < 0) {\n    return coordinates[index + count];\n  }\n  if (index >= count) {\n    return coordinates[index - count];\n  }\n  return coordinates[index];\n}\n\n/**\n * Get the cumulative squared distance along a ring path.  The end index index may be \"wrapped\" and it may\n * be less than the start index to indicate the direction of travel.  The start and end index may have\n * a fractional part to indicate a point between two coordinates.\n * @param {LineCoordType} coordinates Ring coordinates.\n * @param {number} startIndex The start index.\n * @param {number} endIndex The end index.\n * @return {number} The cumulative squared distance along the ring path.\n */\nfunction getCumulativeSquaredDistance(coordinates, startIndex, endIndex) {\n  let lowIndex, highIndex;\n  if (startIndex < endIndex) {\n    lowIndex = startIndex;\n    highIndex = endIndex;\n  } else {\n    lowIndex = endIndex;\n    highIndex = startIndex;\n  }\n  const lowWholeIndex = Math.ceil(lowIndex);\n  const highWholeIndex = Math.floor(highIndex);\n\n  if (lowWholeIndex > highWholeIndex) {\n    // both start and end are on the same segment\n    const start = interpolateCoordinate(coordinates, lowIndex);\n    const end = interpolateCoordinate(coordinates, highIndex);\n    return getSquaredDistance(start, end);\n  }\n\n  let sd = 0;\n\n  if (lowIndex < lowWholeIndex) {\n    const start = interpolateCoordinate(coordinates, lowIndex);\n    const end = getCoordinate(coordinates, lowWholeIndex);\n    sd += getSquaredDistance(start, end);\n  }\n\n  if (highWholeIndex < highIndex) {\n    const start = getCoordinate(coordinates, highWholeIndex);\n    const end = interpolateCoordinate(coordinates, highIndex);\n    sd += getSquaredDistance(start, end);\n  }\n\n  for (let i = lowWholeIndex; i < highWholeIndex - 1; ++i) {\n    const start = getCoordinate(coordinates, i);\n    const end = getCoordinate(coordinates, i + 1);\n    sd += getSquaredDistance(start, end);\n  }\n\n  return sd;\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} coordinate The coordinate.\n * @param {import(\"../geom/Geometry.js\").default} geometry The candidate geometry.\n * @param {Array<TraceTarget>} targets The trace targets.\n */\nfunction appendGeometryTraceTargets(coordinate, geometry, targets) {\n  if (geometry instanceof LineString) {\n    appendTraceTarget(coordinate, geometry.getCoordinates(), false, targets);\n    return;\n  }\n  if (geometry instanceof MultiLineString) {\n    const coordinates = geometry.getCoordinates();\n    for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n      appendTraceTarget(coordinate, coordinates[i], false, targets);\n    }\n    return;\n  }\n  if (geometry instanceof Polygon) {\n    const coordinates = geometry.getCoordinates();\n    for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n      appendTraceTarget(coordinate, coordinates[i], true, targets);\n    }\n    return;\n  }\n  if (geometry instanceof MultiPolygon) {\n    const polys = geometry.getCoordinates();\n    for (let i = 0, ii = polys.length; i < ii; ++i) {\n      const coordinates = polys[i];\n      for (let j = 0, jj = coordinates.length; j < jj; ++j) {\n        appendTraceTarget(coordinate, coordinates[j], true, targets);\n      }\n    }\n    return;\n  }\n  if (geometry instanceof GeometryCollection) {\n    const geometries = geometry.getGeometries();\n    for (let i = 0; i < geometries.length; ++i) {\n      appendGeometryTraceTargets(coordinate, geometries[i], targets);\n    }\n    return;\n  }\n  // other types cannot be traced\n}\n\n/**\n * @typedef {Object} TraceTargetUpdateInfo\n * @property {number} index The new target index.\n * @property {number} endIndex The new segment end index.\n */\n\n/**\n * @type {TraceTargetUpdateInfo}\n */\nconst sharedUpdateInfo = {index: -1, endIndex: NaN};\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} coordinate The coordinate.\n * @param {TraceState} traceState The trace state.\n * @param {import(\"../Map.js\").default} map The map.\n * @param {number} snapTolerance The snap tolerance.\n * @return {TraceTargetUpdateInfo} Information about the new trace target.  The returned\n * object is reused between calls and must not be modified by the caller.\n */\nfunction getTraceTargetUpdate(coordinate, traceState, map, snapTolerance) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n\n  let closestTargetDistance = Infinity;\n\n  let newTargetIndex = -1;\n  let newEndIndex = NaN;\n\n  for (\n    let targetIndex = 0;\n    targetIndex < traceState.targets.length;\n    ++targetIndex\n  ) {\n    const target = traceState.targets[targetIndex];\n    const coordinates = target.coordinates;\n\n    let minSegmentDistance = Infinity;\n    let endIndex;\n    for (\n      let coordinateIndex = 0;\n      coordinateIndex < coordinates.length - 1;\n      ++coordinateIndex\n    ) {\n      const start = coordinates[coordinateIndex];\n      const end = coordinates[coordinateIndex + 1];\n      const rel = getPointSegmentRelationship(x, y, start, end);\n      if (rel.squaredDistance < minSegmentDistance) {\n        minSegmentDistance = rel.squaredDistance;\n        endIndex = coordinateIndex + rel.along;\n      }\n    }\n\n    if (minSegmentDistance < closestTargetDistance) {\n      closestTargetDistance = minSegmentDistance;\n      if (target.ring && traceState.targetIndex === targetIndex) {\n        // same target, maintain the same trace direction\n        if (target.endIndex > target.startIndex) {\n          // forward trace\n          if (endIndex < target.startIndex) {\n            endIndex += coordinates.length;\n          }\n        } else if (target.endIndex < target.startIndex) {\n          // reverse trace\n          if (endIndex > target.startIndex) {\n            endIndex -= coordinates.length;\n          }\n        }\n      }\n      newEndIndex = endIndex;\n      newTargetIndex = targetIndex;\n    }\n  }\n\n  const newTarget = traceState.targets[newTargetIndex];\n  let considerBothDirections = newTarget.ring;\n  if (traceState.targetIndex === newTargetIndex && considerBothDirections) {\n    // only consider switching trace direction if close to the start\n    const newCoordinate = interpolateCoordinate(\n      newTarget.coordinates,\n      newEndIndex\n    );\n    const pixel = map.getPixelFromCoordinate(newCoordinate);\n    if (distance(pixel, traceState.startPx) > snapTolerance) {\n      considerBothDirections = false;\n    }\n  }\n\n  if (considerBothDirections) {\n    const coordinates = newTarget.coordinates;\n    const count = coordinates.length;\n    const startIndex = newTarget.startIndex;\n    const endIndex = newEndIndex;\n    if (startIndex < endIndex) {\n      const forwardDistance = getCumulativeSquaredDistance(\n        coordinates,\n        startIndex,\n        endIndex\n      );\n      const reverseDistance = getCumulativeSquaredDistance(\n        coordinates,\n        startIndex,\n        endIndex - count\n      );\n      if (reverseDistance < forwardDistance) {\n        newEndIndex -= count;\n      }\n    } else {\n      const reverseDistance = getCumulativeSquaredDistance(\n        coordinates,\n        startIndex,\n        endIndex\n      );\n      const forwardDistance = getCumulativeSquaredDistance(\n        coordinates,\n        startIndex,\n        endIndex + count\n      );\n      if (forwardDistance < reverseDistance) {\n        newEndIndex += count;\n      }\n    }\n  }\n\n  sharedUpdateInfo.index = newTargetIndex;\n  sharedUpdateInfo.endIndex = newEndIndex;\n  return sharedUpdateInfo;\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} coordinate The clicked coordinate.\n * @param {Array<import(\"../coordinate.js\").Coordinate>} coordinates The geometry component coordinates.\n * @param {boolean} ring The coordinates represent a linear ring.\n * @param {Array<TraceTarget>} targets The trace targets.\n */\nfunction appendTraceTarget(coordinate, coordinates, ring, targets) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n    const start = coordinates[i];\n    const end = coordinates[i + 1];\n    const rel = getPointSegmentRelationship(x, y, start, end);\n    if (rel.squaredDistance === 0) {\n      const index = i + rel.along;\n      targets.push({\n        coordinates: coordinates,\n        ring: ring,\n        startIndex: index,\n        endIndex: index,\n      });\n      return;\n    }\n  }\n}\n\n/**\n * @typedef {Object} PointSegmentRelationship\n * @property {number} along The closest point expressed as a fraction along the segment length.\n * @property {number} squaredDistance The squared distance of the point to the segment.\n */\n\n/**\n * @type {PointSegmentRelationship}\n */\nconst sharedRel = {along: 0, squaredDistance: 0};\n\n/**\n * @param {number} x The point x.\n * @param {number} y The point y.\n * @param {import(\"../coordinate.js\").Coordinate} start The segment start.\n * @param {import(\"../coordinate.js\").Coordinate} end The segment end.\n * @return {PointSegmentRelationship} The point segment relationship.  The returned object is\n * shared between calls and must not be modified by the caller.\n */\nfunction getPointSegmentRelationship(x, y, start, end) {\n  const x1 = start[0];\n  const y1 = start[1];\n  const x2 = end[0];\n  const y2 = end[1];\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  let along = 0;\n  let px = x1;\n  let py = y1;\n  if (dx !== 0 || dy !== 0) {\n    along = clamp(((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy), 0, 1);\n    px += dx * along;\n    py += dy * along;\n  }\n\n  sharedRel.along = along;\n  sharedRel.squaredDistance = toFixed(squaredDistance(x, y, px, py), 10);\n  return sharedRel;\n}\n\n/**\n * @param {LineCoordType} coordinates The coordinates.\n * @param {number} index The index.  May be fractional and may wrap.\n * @return {import(\"../coordinate.js\").Coordinate} The interpolated coordinate.\n */\nfunction interpolateCoordinate(coordinates, index) {\n  const count = coordinates.length;\n\n  let startIndex = Math.floor(index);\n  const along = index - startIndex;\n  if (startIndex >= count) {\n    startIndex -= count;\n  } else if (startIndex < 0) {\n    startIndex += count;\n  }\n\n  let endIndex = startIndex + 1;\n  if (endIndex >= count) {\n    endIndex -= count;\n  }\n\n  const start = coordinates[startIndex];\n  const x0 = start[0];\n  const y0 = start[1];\n  const end = coordinates[endIndex];\n  const dx = end[0] - x0;\n  const dy = end[1] - y0;\n\n  return [x0 + dx * along, y0 + dy * along];\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'drawabort'|'drawend'|'drawstart', DrawEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'drawabort'|'drawend'|'drawstart', Return>} DrawOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\nclass Draw extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (\n      options\n    );\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {DrawOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.shouldHandle_ = false;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.downPx_ = null;\n\n    /**\n     * @type {ReturnType<typeof setTimeout>}\n     * @private\n     */\n    this.downTimeout_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.lastDragTime_;\n\n    /**\n     * Pointer type of the last pointermove event\n     * @type {string}\n     * @private\n     */\n    this.pointerType_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.freehand_ = false;\n\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource|null}\n     * @private\n     */\n    this.source_ = options.source ? options.source : null;\n\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>|null}\n     * @private\n     */\n    this.features_ = options.features ? options.features : null;\n\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n    this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n\n    /**\n     * Geometry type.\n     * @type {import(\"../geom/Geometry.js\").Type}\n     * @private\n     */\n    this.type_ = /** @type {import(\"../geom/Geometry.js\").Type} */ (\n      options.type\n    );\n\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n    this.mode_ = getMode(this.type_);\n\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n    this.stopClick_ = !!options.stopClick;\n\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n    this.minPoints_ = options.minPoints\n      ? options.minPoints\n      : this.mode_ === 'Polygon'\n      ? 3\n      : 2;\n\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n    this.maxPoints_ =\n      this.mode_ === 'Circle'\n        ? 2\n        : options.maxPoints\n        ? options.maxPoints\n        : Infinity;\n\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.finishCondition_ = options.finishCondition\n      ? options.finishCondition\n      : TRUE;\n\n    /**\n     * @private\n     * @type {import(\"../geom/Geometry.js\").GeometryLayout}\n     */\n    this.geometryLayout_ = options.geometryLayout\n      ? options.geometryLayout\n      : 'XY';\n\n    let geometryFunction = options.geometryFunction;\n    if (!geometryFunction) {\n      const mode = this.mode_;\n      if (mode === 'Circle') {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, geometry, projection) {\n          const circle = geometry\n            ? /** @type {Circle} */ (geometry)\n            : new Circle([NaN, NaN]);\n          const center = fromUserCoordinate(coordinates[0], projection);\n          const squaredLength = squaredCoordinateDistance(\n            center,\n            fromUserCoordinate(coordinates[coordinates.length - 1], projection)\n          );\n          circle.setCenterAndRadius(\n            center,\n            Math.sqrt(squaredLength),\n            this.geometryLayout_\n          );\n          const userProjection = getUserProjection();\n          if (userProjection) {\n            circle.transform(projection, userProjection);\n          }\n          return circle;\n        };\n      } else {\n        let Constructor;\n        if (mode === 'Point') {\n          Constructor = Point;\n        } else if (mode === 'LineString') {\n          Constructor = LineString;\n        } else if (mode === 'Polygon') {\n          Constructor = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, geometry, projection) {\n          if (geometry) {\n            if (mode === 'Polygon') {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates(\n                  [coordinates[0].concat([coordinates[0][0]])],\n                  this.geometryLayout_\n                );\n              } else {\n                geometry.setCoordinates([], this.geometryLayout_);\n              }\n            } else {\n              geometry.setCoordinates(coordinates, this.geometryLayout_);\n            }\n          } else {\n            geometry = new Constructor(coordinates, this.geometryLayout_);\n          }\n          return geometry;\n        };\n      }\n    }\n\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n    this.geometryFunction_ = geometryFunction;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.dragVertexDelay_ =\n      options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.finishCoordinate_ = null;\n\n    /**\n     * Sketch feature.\n     * @type {Feature<import('../geom/SimpleGeometry.js').default>}\n     * @private\n     */\n    this.sketchFeature_ = null;\n\n    /**\n     * Sketch point.\n     * @type {Feature<Point>}\n     * @private\n     */\n    this.sketchPoint_ = null;\n\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n    this.sketchCoords_ = null;\n\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature<LineString>}\n     * @private\n     */\n    this.sketchLine_ = null;\n\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n    this.sketchLineCoords_ = null;\n\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n    this.squaredClickTolerance_ = options.clickTolerance\n      ? options.clickTolerance * options.clickTolerance\n      : 36;\n\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false,\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileInteracting: true,\n    });\n\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : noModifierKeys;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.freehandCondition_;\n    if (options.freehand) {\n      this.freehandCondition_ = always;\n    } else {\n      this.freehandCondition_ = options.freehandCondition\n        ? options.freehandCondition\n        : shiftKeyOnly;\n    }\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.traceCondition_;\n    this.setTrace(options.trace || false);\n\n    /**\n     * @type {TraceState}\n     * @private\n     */\n    this.traceState_ = {active: false};\n\n    /**\n     * @type {VectorSource|null}\n     * @private\n     */\n    this.traceSource_ = options.traceSource || options.source || null;\n\n    this.addChangeListener(InteractionProperty.ACTIVE, this.updateState_);\n  }\n\n  /**\n   * Toggle tracing mode or set a tracing condition.\n   *\n   * @param {boolean|import(\"../events/condition.js\").Condition} trace A boolean to toggle tracing mode or an event\n   *     condition that will be checked when a feature is clicked to determine if tracing should be active.\n   */\n  setTrace(trace) {\n    let condition;\n    if (!trace) {\n      condition = never;\n    } else if (trace === true) {\n      condition = always;\n    } else {\n      condition = trace;\n    }\n    this.traceCondition_ = condition;\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default} map Map.\n   */\n  setMap(map) {\n    super.setMap(map);\n    this.updateState_();\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  handleEvent(event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.originalEvent.preventDefault();\n    }\n    this.freehand_ = this.mode_ !== 'Point' && this.freehandCondition_(event);\n    let move = event.type === MapBrowserEventType.POINTERMOVE;\n    let pass = true;\n    if (\n      !this.freehand_ &&\n      this.lastDragTime_ &&\n      event.type === MapBrowserEventType.POINTERDRAG\n    ) {\n      const now = Date.now();\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n    if (\n      this.freehand_ &&\n      event.type === MapBrowserEventType.POINTERDRAG &&\n      this.sketchFeature_ !== null\n    ) {\n      this.addToDrawing_(event.coordinate);\n      pass = false;\n    } else if (\n      this.freehand_ &&\n      event.type === MapBrowserEventType.POINTERDOWN\n    ) {\n      pass = false;\n    } else if (move && this.getPointerCount() < 2) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n      if (pass && this.freehand_) {\n        this.handlePointerMove_(event);\n        if (this.shouldHandle_) {\n          // Avoid page scrolling when freehand drawing on mobile\n          event.originalEvent.preventDefault();\n        }\n      } else if (\n        event.originalEvent.pointerType === 'mouse' ||\n        (event.type === MapBrowserEventType.POINTERDRAG &&\n          this.downTimeout_ === undefined)\n      ) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n\n    return super.handleEvent(event) && pass;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(event) {\n    this.shouldHandle_ = !this.freehand_;\n\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event.coordinate);\n      }\n      return true;\n    }\n\n    if (!this.condition_(event)) {\n      this.lastDragTime_ = undefined;\n      return false;\n    }\n\n    this.lastDragTime_ = Date.now();\n    this.downTimeout_ = setTimeout(() => {\n      this.handlePointerMove_(\n        new MapBrowserEvent(\n          MapBrowserEventType.POINTERMOVE,\n          event.map,\n          event.originalEvent,\n          false,\n          event.frameState\n        )\n      );\n    }, this.dragVertexDelay_);\n    this.downPx_ = event.pixel;\n    return true;\n  }\n\n  /**\n   * @private\n   */\n  deactivateTrace_() {\n    this.traceState_ = {active: false};\n  }\n\n  /**\n   * Activate or deactivate trace state based on a browser event.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  toggleTraceState_(event) {\n    if (!this.traceSource_ || !this.traceCondition_(event)) {\n      return;\n    }\n\n    if (this.traceState_.active) {\n      this.deactivateTrace_();\n      return;\n    }\n\n    const map = this.getMap();\n    const lowerLeft = map.getCoordinateFromPixel([\n      event.pixel[0] - this.snapTolerance_,\n      event.pixel[1] + this.snapTolerance_,\n    ]);\n    const upperRight = map.getCoordinateFromPixel([\n      event.pixel[0] + this.snapTolerance_,\n      event.pixel[1] - this.snapTolerance_,\n    ]);\n    const extent = boundingExtent([lowerLeft, upperRight]);\n    const features = this.traceSource_.getFeaturesInExtent(extent);\n    if (features.length === 0) {\n      return;\n    }\n\n    const targets = getTraceTargets(event.coordinate, features);\n    if (targets.length) {\n      this.traceState_ = {\n        active: true,\n        startPx: event.pixel.slice(),\n        targets: targets,\n        targetIndex: -1,\n      };\n    }\n  }\n\n  /**\n   * @param {TraceTarget} target The trace target.\n   * @param {number} endIndex The new end index of the trace.\n   * @private\n   */\n  addOrRemoveTracedCoordinates_(target, endIndex) {\n    // three cases to handle:\n    //  1. traced in the same direction and points need adding\n    //  2. traced in the same direction and points need removing\n    //  3. traced in a new direction\n    const previouslyForward = target.startIndex <= target.endIndex;\n    const currentlyForward = target.startIndex <= endIndex;\n    if (previouslyForward === currentlyForward) {\n      // same direction\n      if (\n        (previouslyForward && endIndex > target.endIndex) ||\n        (!previouslyForward && endIndex < target.endIndex)\n      ) {\n        // case 1 - add new points\n        this.addTracedCoordinates_(target, target.endIndex, endIndex);\n      } else if (\n        (previouslyForward && endIndex < target.endIndex) ||\n        (!previouslyForward && endIndex > target.endIndex)\n      ) {\n        // case 2 - remove old points\n        this.removeTracedCoordinates_(endIndex, target.endIndex);\n      }\n    } else {\n      // case 3 - remove old points, add new points\n      this.removeTracedCoordinates_(target.startIndex, target.endIndex);\n      this.addTracedCoordinates_(target, target.startIndex, endIndex);\n    }\n  }\n\n  /**\n   * @param {number} fromIndex The start index.\n   * @param {number} toIndex The end index.\n   * @private\n   */\n  removeTracedCoordinates_(fromIndex, toIndex) {\n    if (fromIndex === toIndex) {\n      return;\n    }\n\n    let remove = 0;\n    if (fromIndex < toIndex) {\n      const start = Math.ceil(fromIndex);\n      let end = Math.floor(toIndex);\n      if (end === toIndex) {\n        end -= 1;\n      }\n      remove = end - start + 1;\n    } else {\n      const start = Math.floor(fromIndex);\n      let end = Math.ceil(toIndex);\n      if (end === toIndex) {\n        end += 1;\n      }\n      remove = start - end + 1;\n    }\n\n    if (remove > 0) {\n      this.removeLastPoints_(remove);\n    }\n  }\n\n  /**\n   * @param {TraceTarget} target The trace target.\n   * @param {number} fromIndex The start index.\n   * @param {number} toIndex The end index.\n   * @private\n   */\n  addTracedCoordinates_(target, fromIndex, toIndex) {\n    if (fromIndex === toIndex) {\n      return;\n    }\n\n    const coordinates = [];\n    if (fromIndex < toIndex) {\n      // forward trace\n      const start = Math.ceil(fromIndex);\n      let end = Math.floor(toIndex);\n      if (end === toIndex) {\n        // if end is snapped to a vertex, it will be added later\n        end -= 1;\n      }\n      for (let i = start; i <= end; ++i) {\n        coordinates.push(getCoordinate(target.coordinates, i));\n      }\n    } else {\n      // reverse trace\n      const start = Math.floor(fromIndex);\n      let end = Math.ceil(toIndex);\n      if (end === toIndex) {\n        end += 1;\n      }\n      for (let i = start; i >= end; --i) {\n        coordinates.push(getCoordinate(target.coordinates, i));\n      }\n    }\n    if (coordinates.length) {\n      this.appendCoordinates(coordinates);\n    }\n  }\n\n  /**\n   * Update the trace.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  updateTrace_(event) {\n    const traceState = this.traceState_;\n    if (!traceState.active) {\n      return;\n    }\n\n    if (traceState.targetIndex === -1) {\n      // check if we are ready to pick a target\n      if (distance(traceState.startPx, event.pixel) < this.snapTolerance_) {\n        return;\n      }\n    }\n\n    const updatedTraceTarget = getTraceTargetUpdate(\n      event.coordinate,\n      traceState,\n      this.getMap(),\n      this.snapTolerance_\n    );\n\n    if (traceState.targetIndex !== updatedTraceTarget.index) {\n      // target changed\n      if (traceState.targetIndex !== -1) {\n        // remove points added during previous trace\n        const oldTarget = traceState.targets[traceState.targetIndex];\n        this.removeTracedCoordinates_(oldTarget.startIndex, oldTarget.endIndex);\n      }\n      // add points for the new target\n      const newTarget = traceState.targets[updatedTraceTarget.index];\n      this.addTracedCoordinates_(\n        newTarget,\n        newTarget.startIndex,\n        updatedTraceTarget.endIndex\n      );\n    } else {\n      // target stayed the same\n      const target = traceState.targets[traceState.targetIndex];\n      this.addOrRemoveTracedCoordinates_(target, updatedTraceTarget.endIndex);\n    }\n\n    // modify the state with updated info\n    traceState.targetIndex = updatedTraceTarget.index;\n    const target = traceState.targets[traceState.targetIndex];\n    target.endIndex = updatedTraceTarget.endIndex;\n\n    // update event coordinate and pixel to match end point of final segment\n    const coordinate = interpolateCoordinate(\n      target.coordinates,\n      target.endIndex\n    );\n    const pixel = this.getMap().getPixelFromCoordinate(coordinate);\n    event.coordinate = coordinate;\n    event.pixel = [Math.round(pixel[0]), Math.round(pixel[1])];\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(event) {\n    let pass = true;\n\n    if (this.getPointerCount() === 0) {\n      if (this.downTimeout_) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n\n      this.handlePointerMove_(event);\n      const tracing = this.traceState_.active;\n      this.toggleTraceState_(event);\n\n      if (this.shouldHandle_) {\n        const startingToDraw = !this.finishCoordinate_;\n        if (startingToDraw) {\n          this.startDrawing_(event.coordinate);\n        }\n        if (!startingToDraw && this.freehand_) {\n          this.finishDrawing();\n        } else if (\n          !this.freehand_ &&\n          (!startingToDraw || this.mode_ === 'Point')\n        ) {\n          if (this.atFinish_(event.pixel, tracing)) {\n            if (this.finishCondition_(event)) {\n              this.finishDrawing();\n            }\n          } else {\n            this.addToDrawing_(event.coordinate);\n          }\n        }\n        pass = false;\n      } else if (this.freehand_) {\n        this.abortDrawing();\n      }\n    }\n\n    if (!pass && this.stopClick_) {\n      event.preventDefault();\n    }\n    return pass;\n  }\n\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @private\n   */\n  handlePointerMove_(event) {\n    this.pointerType_ = event.originalEvent.pointerType;\n    if (\n      this.downPx_ &&\n      ((!this.freehand_ && this.shouldHandle_) ||\n        (this.freehand_ && !this.shouldHandle_))\n    ) {\n      const downPx = this.downPx_;\n      const clickPx = event.pixel;\n      const dx = downPx[0] - clickPx[0];\n      const dy = downPx[1] - clickPx[1];\n      const squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_\n        ? squaredDistance > this.squaredClickTolerance_\n        : squaredDistance <= this.squaredClickTolerance_;\n      if (!this.shouldHandle_) {\n        return;\n      }\n    }\n\n    if (!this.finishCoordinate_) {\n      this.createOrUpdateSketchPoint_(event.coordinate.slice());\n      return;\n    }\n\n    this.updateTrace_(event);\n    this.modifyDrawing_(event.coordinate);\n  }\n\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @param {boolean} [tracing] Drawing in trace mode (only stop if at the starting point).\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n  atFinish_(pixel, tracing) {\n    let at = false;\n    if (this.sketchFeature_) {\n      let potentiallyDone = false;\n      let potentiallyFinishCoordinates = [this.finishCoordinate_];\n      const mode = this.mode_;\n      if (mode === 'Point') {\n        at = true;\n      } else if (mode === 'Circle') {\n        at = this.sketchCoords_.length === 2;\n      } else if (mode === 'LineString') {\n        potentiallyDone =\n          !tracing && this.sketchCoords_.length > this.minPoints_;\n      } else if (mode === 'Polygon') {\n        const sketchCoords = /** @type {PolyCoordType} */ (this.sketchCoords_);\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [\n          sketchCoords[0][0],\n          sketchCoords[0][sketchCoords[0].length - 2],\n        ];\n        if (tracing) {\n          potentiallyFinishCoordinates = [sketchCoords[0][0]];\n        } else {\n          potentiallyFinishCoordinates = [\n            sketchCoords[0][0],\n            sketchCoords[0][sketchCoords[0].length - 2],\n          ];\n        }\n      }\n      if (potentiallyDone) {\n        const map = this.getMap();\n        for (let i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          const finishCoordinate = potentiallyFinishCoordinates[i];\n          const finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          const dx = pixel[0] - finishPixel[0];\n          const dy = pixel[1] - finishPixel[1];\n          const snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n    return at;\n  }\n\n  /**\n   * @param {import(\"../coordinate\").Coordinate} coordinates Coordinate.\n   * @private\n   */\n  createOrUpdateSketchPoint_(coordinates) {\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      const sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  }\n\n  /**\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @private\n   */\n  createOrUpdateCustomSketchLine_(geometry) {\n    if (!this.sketchLine_) {\n      this.sketchLine_ = new Feature();\n    }\n    const ring = geometry.getLinearRing(0);\n    let sketchLineGeom = this.sketchLine_.getGeometry();\n    if (!sketchLineGeom) {\n      sketchLineGeom = new LineString(\n        ring.getFlatCoordinates(),\n        ring.getLayout()\n      );\n      this.sketchLine_.setGeometry(sketchLineGeom);\n    } else {\n      sketchLineGeom.setFlatCoordinates(\n        ring.getLayout(),\n        ring.getFlatCoordinates()\n      );\n      sketchLineGeom.changed();\n    }\n  }\n\n  /**\n   * Start the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} start Start coordinate.\n   * @private\n   */\n  startDrawing_(start) {\n    const projection = this.getMap().getView().getProjection();\n    const stride = getStrideForLayout(this.geometryLayout_);\n    while (start.length < stride) {\n      start.push(0);\n    }\n    this.finishCoordinate_ = start;\n    if (this.mode_ === 'Point') {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === 'Polygon') {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n    }\n    const geometry = this.geometryFunction_(\n      this.sketchCoords_,\n      undefined,\n      projection\n    );\n    this.sketchFeature_ = new Feature();\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(\n      new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_)\n    );\n  }\n\n  /**\n   * Modify the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @private\n   */\n  modifyDrawing_(coordinate) {\n    const map = this.getMap();\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = map.getView().getProjection();\n    const stride = getStrideForLayout(this.geometryLayout_);\n    let coordinates, last;\n    while (coordinate.length < stride) {\n      coordinate.push(0);\n    }\n    if (this.mode_ === 'Point') {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === 'Polygon') {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      last = coordinates[coordinates.length - 1];\n      if (this.atFinish_(map.getPixelFromCoordinate(coordinate))) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_(\n      /** @type {!LineCoordType} */ (this.sketchCoords_),\n      geometry,\n      projection\n    );\n    if (this.sketchPoint_) {\n      const sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n    if (geometry.getType() === 'Polygon' && this.mode_ !== 'Polygon') {\n      this.createOrUpdateCustomSketchLine_(/** @type {Polygon} */ (geometry));\n    } else if (this.sketchLineCoords_) {\n      const sketchLineGeom = this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {!PointCoordType} coordinate Coordinate\n   * @private\n   */\n  addToDrawing_(coordinate) {\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    let done;\n    let coordinates;\n    const mode = this.mode_;\n    if (mode === 'LineString' || mode === 'Circle') {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (mode === 'Polygon') {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n    this.createOrUpdateSketchPoint_(coordinate.slice());\n    this.updateSketchFeatures_();\n    if (done) {\n      this.finishDrawing();\n    }\n  }\n\n  /**\n   * @param {number} n The number of points to remove.\n   */\n  removeLastPoints_(n) {\n    if (!this.sketchFeature_) {\n      return;\n    }\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    const mode = this.mode_;\n    for (let i = 0; i < n; ++i) {\n      let coordinates;\n      if (mode === 'LineString' || mode === 'Circle') {\n        coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n        coordinates.splice(-2, 1);\n        if (coordinates.length >= 2) {\n          this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n          const finishCoordinate = this.finishCoordinate_.slice();\n          coordinates[coordinates.length - 1] = finishCoordinate;\n          this.createOrUpdateSketchPoint_(finishCoordinate);\n        }\n        this.geometryFunction_(coordinates, geometry, projection);\n        if (geometry.getType() === 'Polygon' && this.sketchLine_) {\n          this.createOrUpdateCustomSketchLine_(\n            /** @type {Polygon} */ (geometry)\n          );\n        }\n      } else if (mode === 'Polygon') {\n        coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n        coordinates.splice(-2, 1);\n        const sketchLineGeom = this.sketchLine_.getGeometry();\n        if (coordinates.length >= 2) {\n          const finishCoordinate = coordinates[coordinates.length - 2].slice();\n          coordinates[coordinates.length - 1] = finishCoordinate;\n          this.createOrUpdateSketchPoint_(finishCoordinate);\n        }\n        sketchLineGeom.setCoordinates(coordinates);\n        this.geometryFunction_(this.sketchCoords_, geometry, projection);\n      }\n\n      if (coordinates.length === 1) {\n        this.abortDrawing();\n        break;\n      }\n    }\n\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Remove last point of the feature currently being drawn. Does not do anything when\n   * drawing POINT or MULTI_POINT geometries.\n   * @api\n   */\n  removeLastPoint() {\n    this.removeLastPoints_(1);\n  }\n\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n  finishDrawing() {\n    const sketchFeature = this.abortDrawing_();\n    if (!sketchFeature) {\n      return;\n    }\n    let coordinates = this.sketchCoords_;\n    const geometry = sketchFeature.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    if (this.mode_ === 'LineString') {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (this.mode_ === 'Polygon') {\n      // remove the redundant last point in ring\n      /** @type {PolyCoordType} */ (coordinates)[0].pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n      coordinates = geometry.getCoordinates();\n    }\n\n    // cast multi-part geometries\n    if (this.type_ === 'MultiPoint') {\n      sketchFeature.setGeometry(\n        new MultiPoint([/** @type {PointCoordType} */ (coordinates)])\n      );\n    } else if (this.type_ === 'MultiLineString') {\n      sketchFeature.setGeometry(\n        new MultiLineString([/** @type {LineCoordType} */ (coordinates)])\n      );\n    } else if (this.type_ === 'MultiPolygon') {\n      sketchFeature.setGeometry(\n        new MultiPolygon([/** @type {PolyCoordType} */ (coordinates)])\n      );\n    }\n\n    // First dispatch event to allow full set up of feature\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));\n\n    // Then insert feature\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  }\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature<import(\"../geom/SimpleGeometry.js\").default>|null} The sketch feature (or null if none).\n   * @private\n   */\n  abortDrawing_() {\n    this.finishCoordinate_ = null;\n    const sketchFeature = this.sketchFeature_;\n    this.sketchFeature_ = null;\n    this.sketchPoint_ = null;\n    this.sketchLine_ = null;\n    this.overlay_.getSource().clear(true);\n    this.deactivateTrace_();\n    return sketchFeature;\n  }\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @api\n   */\n  abortDrawing() {\n    const sketchFeature = this.abortDrawing_();\n    if (sketchFeature) {\n      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWABORT, sketchFeature));\n    }\n  }\n\n  /**\n   * Append coordinates to the end of the geometry that is currently being drawn.\n   * This can be used when drawing LineStrings or Polygons. Coordinates will\n   * either be appended to the current LineString or the outer ring of the current\n   * Polygon. If no geometry is being drawn, a new one will be created.\n   * @param {!LineCoordType} coordinates Linear coordinates to be appended to\n   * the coordinate array.\n   * @api\n   */\n  appendCoordinates(coordinates) {\n    const mode = this.mode_;\n    const newDrawing = !this.sketchFeature_;\n    if (newDrawing) {\n      this.startDrawing_(coordinates[0]);\n    }\n    /** @type {LineCoordType} */\n    let sketchCoords;\n    if (mode === 'LineString' || mode === 'Circle') {\n      sketchCoords = /** @type {LineCoordType} */ (this.sketchCoords_);\n    } else if (mode === 'Polygon') {\n      sketchCoords =\n        this.sketchCoords_ && this.sketchCoords_.length\n          ? /** @type {PolyCoordType} */ (this.sketchCoords_)[0]\n          : [];\n    } else {\n      return;\n    }\n\n    if (newDrawing) {\n      sketchCoords.shift();\n    }\n\n    // Remove last coordinate from sketch drawing (this coordinate follows cursor position)\n    sketchCoords.pop();\n\n    // Append coordinate list\n    for (let i = 0; i < coordinates.length; i++) {\n      this.addToDrawing_(coordinates[i]);\n    }\n\n    const ending = coordinates[coordinates.length - 1];\n    // Duplicate last coordinate for sketch drawing (cursor position)\n    this.addToDrawing_(ending);\n    this.modifyDrawing_(ending);\n  }\n\n  /**\n   * Initiate draw mode by starting from an existing geometry which will\n   * receive new additional points. This only works on features with\n   * `LineString` geometries, where the interaction will extend lines by adding\n   * points to the end of the coordinates array.\n   * This will change the original feature, instead of drawing a copy.\n   *\n   * The function will dispatch a `drawstart` event.\n   *\n   * @param {!Feature<LineString>} feature Feature to be extended.\n   * @api\n   */\n  extend(feature) {\n    const geometry = feature.getGeometry();\n    const lineString = geometry;\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    const last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.sketchPoint_ = new Feature(new Point(last));\n    this.updateSketchFeatures_();\n    this.dispatchEvent(\n      new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_)\n    );\n  }\n\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n  updateSketchFeatures_() {\n    const sketchFeatures = [];\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n    const overlaySource = this.overlay_.getSource();\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  }\n\n  /**\n   * @private\n   */\n  updateState_() {\n    const map = this.getMap();\n    const active = this.getActive();\n    if (!map || !active) {\n      this.abortDrawing();\n    }\n    this.overlay_.setMap(active ? map : null);\n  }\n}\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const styles = createEditingStyle();\n  return function (feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of a\n * {@link import(\"../geom/Circle.js\").Circle} geometry.\n * @param {number} [sides] Number of sides of the regular polygon.\n *     Default is 32.\n * @param {number} [angle] Angle of the first point in counter-clockwise\n *     radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a polygon.\n * @api\n */\nexport function createRegularPolygon(sides, angle) {\n  return function (coordinates, geometry, projection) {\n    const center = fromUserCoordinate(\n      /** @type {LineCoordType} */ (coordinates)[0],\n      projection\n    );\n    const end = fromUserCoordinate(\n      /** @type {LineCoordType} */ (coordinates)[coordinates.length - 1],\n      projection\n    );\n    const radius = Math.sqrt(squaredCoordinateDistance(center, end));\n    geometry = geometry || fromCircle(new Circle(center), sides);\n\n    let internalAngle = angle;\n    if (!angle && angle !== 0) {\n      const x = end[0] - center[0];\n      const y = end[1] - center[1];\n      internalAngle = Math.atan2(y, x);\n    }\n    makeRegular(\n      /** @type {Polygon} */ (geometry),\n      center,\n      radius,\n      internalAngle\n    );\n\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\nexport function createBox() {\n  return function (coordinates, geometry, projection) {\n    const extent = boundingExtent(\n      /** @type {LineCoordType} */ ([\n        coordinates[0],\n        coordinates[coordinates.length - 1],\n      ]).map(function (coordinate) {\n        return fromUserCoordinate(coordinate, projection);\n      })\n    );\n    const boxCoordinates = [\n      [\n        getBottomLeft(extent),\n        getBottomRight(extent),\n        getTopRight(extent),\n        getTopLeft(extent),\n        getBottomLeft(extent),\n      ],\n    ];\n    if (geometry) {\n      geometry.setCoordinates(boxCoordinates);\n    } else {\n      geometry = new Polygon(boxCoordinates);\n    }\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n\n/**\n * Get the drawing mode.  The mode for multi-part geometries is the same as for\n * their single-part cousins.\n * @param {import(\"../geom/Geometry.js\").Type} type Geometry type.\n * @return {Mode} Drawing mode.\n */\nfunction getMode(type) {\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n      return 'Point';\n    case 'LineString':\n    case 'MultiLineString':\n      return 'LineString';\n    case 'Polygon':\n    case 'MultiPolygon':\n      return 'Polygon';\n    case 'Circle':\n      return 'Circle';\n    default:\n      throw new Error('Invalid type: ' + type);\n  }\n}\n\nexport default Draw;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}