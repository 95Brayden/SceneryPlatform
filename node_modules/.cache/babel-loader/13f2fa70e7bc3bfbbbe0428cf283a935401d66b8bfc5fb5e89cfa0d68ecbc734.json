{"ast":null,"code":"/**\n * @module ol/source/ImageStatic\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper, { decode } from '../Image.js';\nimport { createLoader } from './static.js';\nimport { get as getProjection } from '../proj.js';\nimport { intersects } from '../extent.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../extent.js\").Extent} imageExtent Extent of the image in map coordinates.\n * This is the [left, bottom, right, top] map coordinates of your image.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {string} url Image URL.\n */\n\n/**\n * @classdesc\n * A layer source for displaying a single, static image.\n * @api\n */\nclass Static extends ImageSource {\n  /**\n   * @param {Options} options ImageStatic options.\n   */\n  constructor(options) {\n    const crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    const /** @type {import(\"../Image.js\").LoadFunction} */imageLoadFunction = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: getProjection(options.projection)\n    });\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.imageExtent_ = options.imageExtent;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image = null;\n    this.image = new ImageWrapper(this.imageExtent_, undefined, 1, createLoader({\n      url: options.url,\n      imageExtent: options.imageExtent,\n      crossOrigin,\n      load: (image, src) => {\n        this.image.setImage(image);\n        imageLoadFunction(this.image, src);\n        return decode(image);\n      }\n    }));\n    this.image.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n  }\n\n  /**\n   * Returns the image extent\n   * @return {import(\"../extent.js\").Extent} image extent.\n   * @api\n   */\n  getImageExtent() {\n    return this.imageExtent_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (intersects(extent, this.image.getExtent())) {\n      return this.image;\n    }\n    return null;\n  }\n\n  /**\n   * Return the URL used for this image source.\n   * @return {string} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n}\nexport default Static;","map":{"version":3,"names":["EventType","ImageSource","defaultImageLoadFunction","ImageWrapper","decode","createLoader","get","getProjection","intersects","Static","constructor","options","crossOrigin","undefined","imageLoadFunction","attributions","interpolate","projection","url_","url","imageExtent_","imageExtent","image","load","src","setImage","addEventListener","CHANGE","handleImageChange","bind","getImageExtent","getImageInternal","extent","resolution","pixelRatio","getExtent","getUrl"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/source/ImageStatic.js"],"sourcesContent":["/**\n * @module ol/source/ImageStatic\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport ImageWrapper, {decode} from '../Image.js';\nimport {createLoader} from './static.js';\nimport {get as getProjection} from '../proj.js';\nimport {intersects} from '../extent.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../extent.js\").Extent} imageExtent Extent of the image in map coordinates.\n * This is the [left, bottom, right, top] map coordinates of your image.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {string} url Image URL.\n */\n\n/**\n * @classdesc\n * A layer source for displaying a single, static image.\n * @api\n */\nclass Static extends ImageSource {\n  /**\n   * @param {Options} options ImageStatic options.\n   */\n  constructor(options) {\n    const crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    const /** @type {import(\"../Image.js\").LoadFunction} */ imageLoadFunction =\n        options.imageLoadFunction !== undefined\n          ? options.imageLoadFunction\n          : defaultImageLoadFunction;\n\n    super({\n      attributions: options.attributions,\n      interpolate: options.interpolate,\n      projection: getProjection(options.projection),\n    });\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.imageExtent_ = options.imageExtent;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image = null;\n\n    this.image = new ImageWrapper(\n      this.imageExtent_,\n      undefined,\n      1,\n      createLoader({\n        url: options.url,\n        imageExtent: options.imageExtent,\n        crossOrigin,\n        load: (image, src) => {\n          this.image.setImage(image);\n          imageLoadFunction(this.image, src);\n          return decode(image);\n        },\n      })\n    );\n\n    this.image.addEventListener(\n      EventType.CHANGE,\n      this.handleImageChange.bind(this)\n    );\n  }\n\n  /**\n   * Returns the image extent\n   * @return {import(\"../extent.js\").Extent} image extent.\n   * @api\n   */\n  getImageExtent() {\n    return this.imageExtent_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (intersects(extent, this.image.getExtent())) {\n      return this.image;\n    }\n    return null;\n  }\n\n  /**\n   * Return the URL used for this image source.\n   * @return {string} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n}\n\nexport default Static;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAOA,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,WAAW,IAAGC,wBAAwB,QAAO,YAAY;AAChE,OAAOC,YAAY,IAAGC,MAAM,QAAO,aAAa;AAChD,SAAQC,YAAY,QAAO,aAAa;AACxC,SAAQC,GAAG,IAAIC,aAAa,QAAO,YAAY;AAC/C,SAAQC,UAAU,QAAO,cAAc;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,SAASR,WAAW,CAAC;EAC/B;AACF;AACA;EACES,WAAWA,CAACC,OAAO,EAAE;IACnB,MAAMC,WAAW,GACfD,OAAO,CAACC,WAAW,KAAKC,SAAS,GAAGF,OAAO,CAACC,WAAW,GAAG,IAAI;IAEhE,MAAM,iDAAkDE,iBAAiB,GACrEH,OAAO,CAACG,iBAAiB,KAAKD,SAAS,GACnCF,OAAO,CAACG,iBAAiB,GACzBZ,wBAAwB;IAEhC,KAAK,CAAC;MACJa,YAAY,EAAEJ,OAAO,CAACI,YAAY;MAClCC,WAAW,EAAEL,OAAO,CAACK,WAAW;MAChCC,UAAU,EAAEV,aAAa,CAACI,OAAO,CAACM,UAAU;IAC9C,CAAC,CAAC;;IAEF;AACJ;AACA;AACA;IACI,IAAI,CAACC,IAAI,GAAGP,OAAO,CAACQ,GAAG;;IAEvB;AACJ;AACA;AACA;IACI,IAAI,CAACC,YAAY,GAAGT,OAAO,CAACU,WAAW;;IAEvC;AACJ;AACA;AACA;IACI,IAAI,CAACC,KAAK,GAAG,IAAI;IAEjB,IAAI,CAACA,KAAK,GAAG,IAAInB,YAAY,CAC3B,IAAI,CAACiB,YAAY,EACjBP,SAAS,EACT,CAAC,EACDR,YAAY,CAAC;MACXc,GAAG,EAAER,OAAO,CAACQ,GAAG;MAChBE,WAAW,EAAEV,OAAO,CAACU,WAAW;MAChCT,WAAW;MACXW,IAAI,EAAEA,CAACD,KAAK,EAAEE,GAAG,KAAK;QACpB,IAAI,CAACF,KAAK,CAACG,QAAQ,CAACH,KAAK,CAAC;QAC1BR,iBAAiB,CAAC,IAAI,CAACQ,KAAK,EAAEE,GAAG,CAAC;QAClC,OAAOpB,MAAM,CAACkB,KAAK,CAAC;MACtB;IACF,CAAC,CACH,CAAC;IAED,IAAI,CAACA,KAAK,CAACI,gBAAgB,CACzB1B,SAAS,CAAC2B,MAAM,EAChB,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAClC,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;EACEC,cAAcA,CAAA,EAAG;IACf,OAAO,IAAI,CAACV,YAAY;EAC1B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEW,gBAAgBA,CAACC,MAAM,EAAEC,UAAU,EAAEC,UAAU,EAAEjB,UAAU,EAAE;IAC3D,IAAIT,UAAU,CAACwB,MAAM,EAAE,IAAI,CAACV,KAAK,CAACa,SAAS,CAAC,CAAC,CAAC,EAAE;MAC9C,OAAO,IAAI,CAACb,KAAK;IACnB;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACEc,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAAClB,IAAI;EAClB;AACF;AAEA,eAAeT,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}