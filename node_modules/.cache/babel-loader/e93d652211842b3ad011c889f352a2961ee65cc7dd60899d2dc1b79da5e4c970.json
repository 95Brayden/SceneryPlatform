{"ast":null,"code":"import { WORKER_OFFSCREEN_CANVAS } from './has.js';\n\n/**\n * @module ol/dom\n */\n\n//FIXME Move this function to the canvas module\n/**\n * Create an html canvas element and returns its 2d context.\n * @param {number} [width] Canvas width.\n * @param {number} [height] Canvas height.\n * @param {Array<HTMLCanvasElement>} [canvasPool] Canvas pool to take existing canvas from.\n * @param {CanvasRenderingContext2DSettings} [settings] CanvasRenderingContext2DSettings\n * @return {CanvasRenderingContext2D} The context.\n */\nexport function createCanvasContext2D(width, height, canvasPool, settings) {\n  /** @type {HTMLCanvasElement|OffscreenCanvas} */\n  let canvas;\n  if (canvasPool && canvasPool.length) {\n    canvas = canvasPool.shift();\n  } else if (WORKER_OFFSCREEN_CANVAS) {\n    canvas = new OffscreenCanvas(width || 300, height || 300);\n  } else {\n    canvas = document.createElement('canvas');\n  }\n  if (width) {\n    canvas.width = width;\n  }\n  if (height) {\n    canvas.height = height;\n  }\n  //FIXME Allow OffscreenCanvasRenderingContext2D as return type\n  return (/** @type {CanvasRenderingContext2D} */\n    canvas.getContext('2d', settings)\n  );\n}\n\n/**\n * Releases canvas memory to avoid exceeding memory limits in Safari.\n * See https://pqina.nl/blog/total-canvas-memory-use-exceeds-the-maximum-limit/\n * @param {CanvasRenderingContext2D} context Context.\n */\nexport function releaseCanvas(context) {\n  const canvas = context.canvas;\n  canvas.width = 1;\n  canvas.height = 1;\n  context.clearRect(0, 0, 1, 1);\n}\n\n/**\n * Get the current computed width for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The width.\n */\nexport function outerWidth(element) {\n  let width = element.offsetWidth;\n  const style = getComputedStyle(element);\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\n  return width;\n}\n\n/**\n * Get the current computed height for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The height.\n */\nexport function outerHeight(element) {\n  let height = element.offsetHeight;\n  const style = getComputedStyle(element);\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n  return height;\n}\n\n/**\n * @param {Node} newNode Node to replace old node\n * @param {Node} oldNode The node to be replaced\n */\nexport function replaceNode(newNode, oldNode) {\n  const parent = oldNode.parentNode;\n  if (parent) {\n    parent.replaceChild(newNode, oldNode);\n  }\n}\n\n/**\n * @param {Node} node The node to remove.\n * @return {Node|null} The node that was removed or null.\n */\nexport function removeNode(node) {\n  return node && node.parentNode ? node.parentNode.removeChild(node) : null;\n}\n\n/**\n * @param {Node} node The node to remove the children from.\n */\nexport function removeChildren(node) {\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n}\n\n/**\n * Transform the children of a parent node so they match the\n * provided list of children.  This function aims to efficiently\n * remove, add, and reorder child nodes while maintaining a simple\n * implementation (it is not guaranteed to minimize DOM operations).\n * @param {Node} node The parent node whose children need reworking.\n * @param {Array<Node>} children The desired children.\n */\nexport function replaceChildren(node, children) {\n  const oldChildren = node.childNodes;\n  for (let i = 0; true; ++i) {\n    const oldChild = oldChildren[i];\n    const newChild = children[i];\n\n    // check if our work is done\n    if (!oldChild && !newChild) {\n      break;\n    }\n\n    // check if children match\n    if (oldChild === newChild) {\n      continue;\n    }\n\n    // check if a new child needs to be added\n    if (!oldChild) {\n      node.appendChild(newChild);\n      continue;\n    }\n\n    // check if an old child needs to be removed\n    if (!newChild) {\n      node.removeChild(oldChild);\n      --i;\n      continue;\n    }\n\n    // reorder\n    node.insertBefore(newChild, oldChild);\n  }\n}","map":{"version":3,"names":["WORKER_OFFSCREEN_CANVAS","createCanvasContext2D","width","height","canvasPool","settings","canvas","length","shift","OffscreenCanvas","document","createElement","getContext","releaseCanvas","context","clearRect","outerWidth","element","offsetWidth","style","getComputedStyle","parseInt","marginLeft","marginRight","outerHeight","offsetHeight","marginTop","marginBottom","replaceNode","newNode","oldNode","parent","parentNode","replaceChild","removeNode","node","removeChild","removeChildren","lastChild","replaceChildren","children","oldChildren","childNodes","i","oldChild","newChild","appendChild","insertBefore"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/dom.js"],"sourcesContent":["import {WORKER_OFFSCREEN_CANVAS} from './has.js';\n\n/**\n * @module ol/dom\n */\n\n//FIXME Move this function to the canvas module\n/**\n * Create an html canvas element and returns its 2d context.\n * @param {number} [width] Canvas width.\n * @param {number} [height] Canvas height.\n * @param {Array<HTMLCanvasElement>} [canvasPool] Canvas pool to take existing canvas from.\n * @param {CanvasRenderingContext2DSettings} [settings] CanvasRenderingContext2DSettings\n * @return {CanvasRenderingContext2D} The context.\n */\nexport function createCanvasContext2D(width, height, canvasPool, settings) {\n  /** @type {HTMLCanvasElement|OffscreenCanvas} */\n  let canvas;\n  if (canvasPool && canvasPool.length) {\n    canvas = canvasPool.shift();\n  } else if (WORKER_OFFSCREEN_CANVAS) {\n    canvas = new OffscreenCanvas(width || 300, height || 300);\n  } else {\n    canvas = document.createElement('canvas');\n  }\n  if (width) {\n    canvas.width = width;\n  }\n  if (height) {\n    canvas.height = height;\n  }\n  //FIXME Allow OffscreenCanvasRenderingContext2D as return type\n  return /** @type {CanvasRenderingContext2D} */ (\n    canvas.getContext('2d', settings)\n  );\n}\n\n/**\n * Releases canvas memory to avoid exceeding memory limits in Safari.\n * See https://pqina.nl/blog/total-canvas-memory-use-exceeds-the-maximum-limit/\n * @param {CanvasRenderingContext2D} context Context.\n */\nexport function releaseCanvas(context) {\n  const canvas = context.canvas;\n  canvas.width = 1;\n  canvas.height = 1;\n  context.clearRect(0, 0, 1, 1);\n}\n\n/**\n * Get the current computed width for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The width.\n */\nexport function outerWidth(element) {\n  let width = element.offsetWidth;\n  const style = getComputedStyle(element);\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\n\n  return width;\n}\n\n/**\n * Get the current computed height for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The height.\n */\nexport function outerHeight(element) {\n  let height = element.offsetHeight;\n  const style = getComputedStyle(element);\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n\n  return height;\n}\n\n/**\n * @param {Node} newNode Node to replace old node\n * @param {Node} oldNode The node to be replaced\n */\nexport function replaceNode(newNode, oldNode) {\n  const parent = oldNode.parentNode;\n  if (parent) {\n    parent.replaceChild(newNode, oldNode);\n  }\n}\n\n/**\n * @param {Node} node The node to remove.\n * @return {Node|null} The node that was removed or null.\n */\nexport function removeNode(node) {\n  return node && node.parentNode ? node.parentNode.removeChild(node) : null;\n}\n\n/**\n * @param {Node} node The node to remove the children from.\n */\nexport function removeChildren(node) {\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n}\n\n/**\n * Transform the children of a parent node so they match the\n * provided list of children.  This function aims to efficiently\n * remove, add, and reorder child nodes while maintaining a simple\n * implementation (it is not guaranteed to minimize DOM operations).\n * @param {Node} node The parent node whose children need reworking.\n * @param {Array<Node>} children The desired children.\n */\nexport function replaceChildren(node, children) {\n  const oldChildren = node.childNodes;\n\n  for (let i = 0; true; ++i) {\n    const oldChild = oldChildren[i];\n    const newChild = children[i];\n\n    // check if our work is done\n    if (!oldChild && !newChild) {\n      break;\n    }\n\n    // check if children match\n    if (oldChild === newChild) {\n      continue;\n    }\n\n    // check if a new child needs to be added\n    if (!oldChild) {\n      node.appendChild(newChild);\n      continue;\n    }\n\n    // check if an old child needs to be removed\n    if (!newChild) {\n      node.removeChild(oldChild);\n      --i;\n      continue;\n    }\n\n    // reorder\n    node.insertBefore(newChild, oldChild);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}