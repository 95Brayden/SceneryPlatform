{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/source/WMTS\n */\n\nimport TileImage from './TileImage.js';\nimport { appendParams } from '../uri.js';\nimport { containsExtent } from '../extent.js';\nimport { createFromCapabilitiesMatrixSet } from '../tilegrid/WMTS.js';\nimport { createFromTileUrlFunctions, expandUrl } from '../tileurlfunction.js';\nimport { equivalent, get as getProjection, transformExtent } from '../proj.js';\n\n/**\n * Request encoding. One of 'KVP', 'REST'.\n * @typedef {'KVP' | 'REST'} RequestEncoding\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {RequestEncoding} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */\nclass WMTS extends TileImage {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    // TODO: add support for TileMatrixLimits\n\n    const requestEncoding = options.requestEncoding !== undefined ? options.requestEncoding : 'KVP';\n\n    // FIXME: should we create a default tileGrid?\n    // we could issue a getCapabilities xhr to retrieve missing configuration\n    const tileGrid = options.tileGrid;\n    let urls = options.urls;\n    if (urls === undefined && options.url !== undefined) {\n      urls = expandUrl(options.url);\n    }\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      urls: urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : false,\n      transition: options.transition,\n      zDirection: options.zDirection\n    });\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version !== undefined ? options.version : '1.0.0';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.dimensions_ = options.dimensions !== undefined ? options.dimensions : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.layer_ = options.layer;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.matrixSet_ = options.matrixSet;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.style_ = options.style;\n\n    // FIXME: should we guess this requestEncoding from options.url(s)\n    //        structure? that would mean KVP only if a template is not provided.\n\n    /**\n     * @private\n     * @type {RequestEncoding}\n     */\n    this.requestEncoding_ = requestEncoding;\n    this.setKey(this.getKeyForDimensions_());\n    if (urls && urls.length > 0) {\n      this.tileUrlFunction = createFromTileUrlFunctions(urls.map(this.createFromWMTSTemplate.bind(this)));\n    }\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @param {Array<string>} urls URLs.\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    this.setTileUrlFunction(createFromTileUrlFunctions(urls.map(this.createFromWMTSTemplate.bind(this))), key);\n  }\n\n  /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */\n  getDimensions() {\n    return this.dimensions_;\n  }\n\n  /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */\n  getLayer() {\n    return this.layer_;\n  }\n\n  /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */\n  getMatrixSet() {\n    return this.matrixSet_;\n  }\n\n  /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {RequestEncoding} Request encoding.\n   * @api\n   */\n  getRequestEncoding() {\n    return this.requestEncoding_;\n  }\n\n  /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */\n  getVersion() {\n    return this.version_;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */\n  getKeyForDimensions_() {\n    const res = this.urls ? this.urls.slice(0) : [];\n    for (const key in this.dimensions_) {\n      res.push(key + '-' + this.dimensions_[key]);\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */\n  updateDimensions(dimensions) {\n    Object.assign(this.dimensions_, dimensions);\n    this.setKey(this.getKeyForDimensions_());\n  }\n\n  /**\n   * @param {string} template Template.\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n   */\n  createFromWMTSTemplate(template) {\n    const requestEncoding = this.requestEncoding_;\n\n    // context property names are lower case to allow for a case insensitive\n    // replacement as some services use different naming conventions\n    const context = {\n      'layer': this.layer_,\n      'style': this.style_,\n      'tilematrixset': this.matrixSet_\n    };\n    if (requestEncoding == 'KVP') {\n      Object.assign(context, {\n        'Service': 'WMTS',\n        'Request': 'GetTile',\n        'Version': this.version_,\n        'Format': this.format_\n      });\n    }\n\n    // TODO: we may want to create our own appendParams function so that params\n    // order conforms to wmts spec guidance, and so that we can avoid to escape\n    // special template params\n\n    template = requestEncoding == 'KVP' ? appendParams(template, context) : template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n      return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n    });\n    const tileGrid = /** @type {import(\"../tilegrid/WMTS.js\").default} */\n    this.tileGrid;\n    const dimensions = this.dimensions_;\n    return (\n      /**\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */\n      function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n          return undefined;\n        }\n        const localContext = {\n          'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n          'TileCol': tileCoord[1],\n          'TileRow': tileCoord[2]\n        };\n        Object.assign(localContext, dimensions);\n        let url = template;\n        if (requestEncoding == 'KVP') {\n          url = appendParams(url, localContext);\n        } else {\n          url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return localContext[p];\n          });\n        }\n        return url;\n      }\n    );\n  }\n}\nexport default WMTS;\n\n/**\n * Generate source options from a capabilities object.\n * @param {Object} wmtsCap An object representing the capabilities document.\n * @param {!Object} config Configuration properties for the layer.  Defaults for\n *                  the layer will apply if not provided.\n *\n * Required config properties:\n *  - layer - {string} The layer identifier.\n *\n * Optional config properties:\n *  - matrixSet - {string} The matrix set identifier, required if there is\n *       more than one matrix set in the layer capabilities.\n *  - projection - {string} The desired CRS when no matrixSet is specified.\n *       eg: \"EPSG:3857\". If the desired projection is not available,\n *       an error is thrown.\n *  - requestEncoding - {string} url encoding format for the layer. Default is\n *       the first tile url format found in the GetCapabilities response.\n *  - style - {string} The name of the style\n *  - format - {string} Image format for the layer. Default is the first\n *       format returned in the GetCapabilities response.\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\n * @return {Options|null} WMTS source options object or `null` if the layer was not found.\n * @api\n */\nexport function optionsFromCapabilities(wmtsCap, config) {\n  const layers = wmtsCap['Contents']['Layer'];\n  const l = layers.find(function (elt) {\n    return elt['Identifier'] == config['layer'];\n  });\n  if (!l) {\n    return null;\n  }\n  const tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  let idx;\n  if (l['TileMatrixSetLink'].length > 1) {\n    if ('projection' in config) {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        const tileMatrixSet = tileMatrixSets.find(function (el) {\n          return el['Identifier'] == elt['TileMatrixSet'];\n        });\n        const supportedCRS = tileMatrixSet['SupportedCRS'];\n        const proj1 = getProjection(supportedCRS);\n        const proj2 = getProjection(config['projection']);\n        if (proj1 && proj2) {\n          return equivalent(proj1, proj2);\n        }\n        return supportedCRS == config['projection'];\n      });\n    } else {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        return elt['TileMatrixSet'] == config['matrixSet'];\n      });\n    }\n  } else {\n    idx = 0;\n  }\n  if (idx < 0) {\n    idx = 0;\n  }\n  const matrixSet = /** @type {string} */\n  l['TileMatrixSetLink'][idx]['TileMatrixSet'];\n  const matrixLimits = /** @type {Array<Object>} */\n  l['TileMatrixSetLink'][idx]['TileMatrixSetLimits'];\n  let format = /** @type {string} */l['Format'][0];\n  if ('format' in config) {\n    format = config['format'];\n  }\n  idx = l['Style'].findIndex(function (elt) {\n    if ('style' in config) {\n      return elt['Title'] == config['style'];\n    }\n    return elt['isDefault'];\n  });\n  if (idx < 0) {\n    idx = 0;\n  }\n  const style = /** @type {string} */l['Style'][idx]['Identifier'];\n  const dimensions = {};\n  if ('Dimension' in l) {\n    l['Dimension'].forEach(function (elt, index, array) {\n      const key = elt['Identifier'];\n      let value = elt['Default'];\n      if (value === undefined) {\n        value = elt['Value'][0];\n      }\n      dimensions[key] = value;\n    });\n  }\n  const matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  const matrixSetObj = matrixSets.find(function (elt) {\n    return elt['Identifier'] == matrixSet;\n  });\n  let projection;\n  const code = matrixSetObj['SupportedCRS'];\n  if (code) {\n    projection = getProjection(code);\n  }\n  if ('projection' in config) {\n    const projConfig = getProjection(config['projection']);\n    if (projConfig) {\n      if (!projection || equivalent(projConfig, projection)) {\n        projection = projConfig;\n      }\n    }\n  }\n  let wrapX = false;\n  const switchXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n  let matrix = matrixSetObj.TileMatrix[0];\n\n  // create default matrixLimit\n  let selectedMatrixLimit = {\n    MinTileCol: 0,\n    MinTileRow: 0,\n    // subtract one to end up at tile top left\n    MaxTileCol: matrix.MatrixWidth - 1,\n    MaxTileRow: matrix.MatrixHeight - 1\n  };\n\n  //in case of matrix limits, use matrix limits to calculate extent\n  if (matrixLimits) {\n    selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\n    const m = matrixSetObj.TileMatrix.find(tileMatrixValue => tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix || matrixSetObj.Identifier + ':' + tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix);\n    if (m) {\n      matrix = m;\n    }\n  }\n  const resolution = matrix.ScaleDenominator * 0.00028 / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\n  const origin = switchXY ? [matrix.TopLeftCorner[1], matrix.TopLeftCorner[0]] : matrix.TopLeftCorner;\n  const tileSpanX = matrix.TileWidth * resolution;\n  const tileSpanY = matrix.TileHeight * resolution;\n  let matrixSetExtent = matrixSetObj['BoundingBox'];\n  if (matrixSetExtent && switchXY) {\n    matrixSetExtent = [matrixSetExtent[1], matrixSetExtent[0], matrixSetExtent[3], matrixSetExtent[2]];\n  }\n  let extent = [origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol,\n  // add one to get proper bottom/right coordinate\n  origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow), origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol), origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow];\n  if (matrixSetExtent !== undefined && !containsExtent(matrixSetExtent, extent)) {\n    const wgs84BoundingBox = l['WGS84BoundingBox'];\n    const wgs84ProjectionExtent = getProjection('EPSG:4326').getExtent();\n    extent = matrixSetExtent;\n    if (wgs84BoundingBox) {\n      wrapX = wgs84BoundingBox[0] === wgs84ProjectionExtent[0] && wgs84BoundingBox[2] === wgs84ProjectionExtent[2];\n    } else {\n      const wgs84MatrixSetExtent = transformExtent(matrixSetExtent, matrixSetObj['SupportedCRS'], 'EPSG:4326');\n      // Ignore slight deviation from the correct x limits\n      wrapX = wgs84MatrixSetExtent[0] - 1e-10 <= wgs84ProjectionExtent[0] && wgs84MatrixSetExtent[2] + 1e-10 >= wgs84ProjectionExtent[2];\n    }\n  }\n  const tileGrid = createFromCapabilitiesMatrixSet(matrixSetObj, extent, matrixLimits);\n\n  /** @type {!Array<string>} */\n  const urls = [];\n  let requestEncoding = config['requestEncoding'];\n  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n  if ('OperationsMetadata' in wmtsCap && 'GetTile' in wmtsCap['OperationsMetadata']) {\n    const gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n    for (let i = 0, ii = gets.length; i < ii; ++i) {\n      if (gets[i]['Constraint']) {\n        const constraint = gets[i]['Constraint'].find(function (element) {\n          return element['name'] == 'GetEncoding';\n        });\n        const encodings = constraint['AllowedValues']['Value'];\n        if (requestEncoding === '') {\n          // requestEncoding not provided, use the first encoding from the list\n          requestEncoding = encodings[0];\n        }\n        if (requestEncoding === 'KVP') {\n          if (encodings.includes('KVP')) {\n            urls.push( /** @type {string} */gets[i]['href']);\n          }\n        } else {\n          break;\n        }\n      } else if (gets[i]['href']) {\n        requestEncoding = 'KVP';\n        urls.push( /** @type {string} */gets[i]['href']);\n      }\n    }\n  }\n  if (urls.length === 0) {\n    requestEncoding = 'REST';\n    l['ResourceURL'].forEach(function (element) {\n      if (element['resourceType'] === 'tile') {\n        format = element['format'];\n        urls.push( /** @type {string} */element['template']);\n      }\n    });\n  }\n  return {\n    urls: urls,\n    layer: config['layer'],\n    matrixSet: matrixSet,\n    format: format,\n    projection: projection,\n    requestEncoding: requestEncoding,\n    tileGrid: tileGrid,\n    style: style,\n    dimensions: dimensions,\n    wrapX: wrapX,\n    crossOrigin: config['crossOrigin']\n  };\n}","map":{"version":3,"names":["TileImage","appendParams","containsExtent","createFromCapabilitiesMatrixSet","createFromTileUrlFunctions","expandUrl","equivalent","get","getProjection","transformExtent","WMTS","constructor","options","requestEncoding","undefined","tileGrid","urls","url","attributions","attributionsCollapsible","cacheSize","crossOrigin","interpolate","projection","reprojectionErrorThreshold","tileClass","tileLoadFunction","tilePixelRatio","wrapX","transition","zDirection","version_","version","format_","format","dimensions_","dimensions","layer_","layer","matrixSet_","matrixSet","style_","style","requestEncoding_","setKey","getKeyForDimensions_","length","tileUrlFunction","map","createFromWMTSTemplate","bind","setUrls","key","join","setTileUrlFunction","getDimensions","getFormat","getLayer","getMatrixSet","getRequestEncoding","getStyle","getVersion","res","slice","push","updateDimensions","Object","assign","template","context","replace","m","p","toLowerCase","tileCoord","pixelRatio","localContext","getMatrixId","optionsFromCapabilities","wmtsCap","config","layers","l","find","elt","tileMatrixSets","idx","findIndex","tileMatrixSet","el","supportedCRS","proj1","proj2","matrixLimits","forEach","index","array","value","matrixSets","matrixSetObj","code","projConfig","switchXY","getAxisOrientation","substr","matrix","TileMatrix","selectedMatrixLimit","MinTileCol","MinTileRow","MaxTileCol","MatrixWidth","MaxTileRow","MatrixHeight","tileMatrixValue","Identifier","resolution","ScaleDenominator","getMetersPerUnit","origin","TopLeftCorner","tileSpanX","TileWidth","tileSpanY","TileHeight","matrixSetExtent","extent","wgs84BoundingBox","wgs84ProjectionExtent","getExtent","wgs84MatrixSetExtent","gets","i","ii","constraint","element","encodings","includes"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/source/WMTS.js"],"sourcesContent":["/**\n * @module ol/source/WMTS\n */\n\nimport TileImage from './TileImage.js';\nimport {appendParams} from '../uri.js';\nimport {containsExtent} from '../extent.js';\nimport {createFromCapabilitiesMatrixSet} from '../tilegrid/WMTS.js';\nimport {createFromTileUrlFunctions, expandUrl} from '../tileurlfunction.js';\nimport {equivalent, get as getProjection, transformExtent} from '../proj.js';\n\n/**\n * Request encoding. One of 'KVP', 'REST'.\n * @typedef {'KVP' | 'REST'} RequestEncoding\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {RequestEncoding} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */\nclass WMTS extends TileImage {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    // TODO: add support for TileMatrixLimits\n\n    const requestEncoding =\n      options.requestEncoding !== undefined ? options.requestEncoding : 'KVP';\n\n    // FIXME: should we create a default tileGrid?\n    // we could issue a getCapabilities xhr to retrieve missing configuration\n    const tileGrid = options.tileGrid;\n\n    let urls = options.urls;\n    if (urls === undefined && options.url !== undefined) {\n      urls = expandUrl(options.url);\n    }\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      urls: urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : false,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version !== undefined ? options.version : '1.0.0';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.dimensions_ =\n      options.dimensions !== undefined ? options.dimensions : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.layer_ = options.layer;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.matrixSet_ = options.matrixSet;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.style_ = options.style;\n\n    // FIXME: should we guess this requestEncoding from options.url(s)\n    //        structure? that would mean KVP only if a template is not provided.\n\n    /**\n     * @private\n     * @type {RequestEncoding}\n     */\n    this.requestEncoding_ = requestEncoding;\n\n    this.setKey(this.getKeyForDimensions_());\n\n    if (urls && urls.length > 0) {\n      this.tileUrlFunction = createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this))\n      );\n    }\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @param {Array<string>} urls URLs.\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    this.setTileUrlFunction(\n      createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this))\n      ),\n      key\n    );\n  }\n\n  /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */\n  getDimensions() {\n    return this.dimensions_;\n  }\n\n  /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */\n  getLayer() {\n    return this.layer_;\n  }\n\n  /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */\n  getMatrixSet() {\n    return this.matrixSet_;\n  }\n\n  /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {RequestEncoding} Request encoding.\n   * @api\n   */\n  getRequestEncoding() {\n    return this.requestEncoding_;\n  }\n\n  /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */\n  getVersion() {\n    return this.version_;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */\n  getKeyForDimensions_() {\n    const res = this.urls ? this.urls.slice(0) : [];\n    for (const key in this.dimensions_) {\n      res.push(key + '-' + this.dimensions_[key]);\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */\n  updateDimensions(dimensions) {\n    Object.assign(this.dimensions_, dimensions);\n    this.setKey(this.getKeyForDimensions_());\n  }\n\n  /**\n   * @param {string} template Template.\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n   */\n  createFromWMTSTemplate(template) {\n    const requestEncoding = this.requestEncoding_;\n\n    // context property names are lower case to allow for a case insensitive\n    // replacement as some services use different naming conventions\n    const context = {\n      'layer': this.layer_,\n      'style': this.style_,\n      'tilematrixset': this.matrixSet_,\n    };\n\n    if (requestEncoding == 'KVP') {\n      Object.assign(context, {\n        'Service': 'WMTS',\n        'Request': 'GetTile',\n        'Version': this.version_,\n        'Format': this.format_,\n      });\n    }\n\n    // TODO: we may want to create our own appendParams function so that params\n    // order conforms to wmts spec guidance, and so that we can avoid to escape\n    // special template params\n\n    template =\n      requestEncoding == 'KVP'\n        ? appendParams(template, context)\n        : template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n          });\n\n    const tileGrid = /** @type {import(\"../tilegrid/WMTS.js\").default} */ (\n      this.tileGrid\n    );\n    const dimensions = this.dimensions_;\n\n    return (\n      /**\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */\n      function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n          return undefined;\n        }\n        const localContext = {\n          'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n          'TileCol': tileCoord[1],\n          'TileRow': tileCoord[2],\n        };\n        Object.assign(localContext, dimensions);\n        let url = template;\n        if (requestEncoding == 'KVP') {\n          url = appendParams(url, localContext);\n        } else {\n          url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return localContext[p];\n          });\n        }\n        return url;\n      }\n    );\n  }\n}\n\nexport default WMTS;\n\n/**\n * Generate source options from a capabilities object.\n * @param {Object} wmtsCap An object representing the capabilities document.\n * @param {!Object} config Configuration properties for the layer.  Defaults for\n *                  the layer will apply if not provided.\n *\n * Required config properties:\n *  - layer - {string} The layer identifier.\n *\n * Optional config properties:\n *  - matrixSet - {string} The matrix set identifier, required if there is\n *       more than one matrix set in the layer capabilities.\n *  - projection - {string} The desired CRS when no matrixSet is specified.\n *       eg: \"EPSG:3857\". If the desired projection is not available,\n *       an error is thrown.\n *  - requestEncoding - {string} url encoding format for the layer. Default is\n *       the first tile url format found in the GetCapabilities response.\n *  - style - {string} The name of the style\n *  - format - {string} Image format for the layer. Default is the first\n *       format returned in the GetCapabilities response.\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\n * @return {Options|null} WMTS source options object or `null` if the layer was not found.\n * @api\n */\nexport function optionsFromCapabilities(wmtsCap, config) {\n  const layers = wmtsCap['Contents']['Layer'];\n  const l = layers.find(function (elt) {\n    return elt['Identifier'] == config['layer'];\n  });\n  if (!l) {\n    return null;\n  }\n  const tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  let idx;\n  if (l['TileMatrixSetLink'].length > 1) {\n    if ('projection' in config) {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        const tileMatrixSet = tileMatrixSets.find(function (el) {\n          return el['Identifier'] == elt['TileMatrixSet'];\n        });\n        const supportedCRS = tileMatrixSet['SupportedCRS'];\n        const proj1 = getProjection(supportedCRS);\n        const proj2 = getProjection(config['projection']);\n        if (proj1 && proj2) {\n          return equivalent(proj1, proj2);\n        }\n        return supportedCRS == config['projection'];\n      });\n    } else {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        return elt['TileMatrixSet'] == config['matrixSet'];\n      });\n    }\n  } else {\n    idx = 0;\n  }\n  if (idx < 0) {\n    idx = 0;\n  }\n  const matrixSet =\n    /** @type {string} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSet']);\n  const matrixLimits =\n    /** @type {Array<Object>} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSetLimits']);\n\n  let format = /** @type {string} */ (l['Format'][0]);\n  if ('format' in config) {\n    format = config['format'];\n  }\n  idx = l['Style'].findIndex(function (elt) {\n    if ('style' in config) {\n      return elt['Title'] == config['style'];\n    }\n    return elt['isDefault'];\n  });\n  if (idx < 0) {\n    idx = 0;\n  }\n  const style = /** @type {string} */ (l['Style'][idx]['Identifier']);\n\n  const dimensions = {};\n  if ('Dimension' in l) {\n    l['Dimension'].forEach(function (elt, index, array) {\n      const key = elt['Identifier'];\n      let value = elt['Default'];\n      if (value === undefined) {\n        value = elt['Value'][0];\n      }\n      dimensions[key] = value;\n    });\n  }\n\n  const matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  const matrixSetObj = matrixSets.find(function (elt) {\n    return elt['Identifier'] == matrixSet;\n  });\n\n  let projection;\n  const code = matrixSetObj['SupportedCRS'];\n  if (code) {\n    projection = getProjection(code);\n  }\n  if ('projection' in config) {\n    const projConfig = getProjection(config['projection']);\n    if (projConfig) {\n      if (!projection || equivalent(projConfig, projection)) {\n        projection = projConfig;\n      }\n    }\n  }\n\n  let wrapX = false;\n  const switchXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n\n  let matrix = matrixSetObj.TileMatrix[0];\n\n  // create default matrixLimit\n  let selectedMatrixLimit = {\n    MinTileCol: 0,\n    MinTileRow: 0,\n    // subtract one to end up at tile top left\n    MaxTileCol: matrix.MatrixWidth - 1,\n    MaxTileRow: matrix.MatrixHeight - 1,\n  };\n\n  //in case of matrix limits, use matrix limits to calculate extent\n  if (matrixLimits) {\n    selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\n    const m = matrixSetObj.TileMatrix.find(\n      (tileMatrixValue) =>\n        tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix ||\n        matrixSetObj.Identifier + ':' + tileMatrixValue.Identifier ===\n          selectedMatrixLimit.TileMatrix\n    );\n    if (m) {\n      matrix = m;\n    }\n  }\n\n  const resolution =\n    (matrix.ScaleDenominator * 0.00028) / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\n  const origin = switchXY\n    ? [matrix.TopLeftCorner[1], matrix.TopLeftCorner[0]]\n    : matrix.TopLeftCorner;\n  const tileSpanX = matrix.TileWidth * resolution;\n  const tileSpanY = matrix.TileHeight * resolution;\n  let matrixSetExtent = matrixSetObj['BoundingBox'];\n  if (matrixSetExtent && switchXY) {\n    matrixSetExtent = [\n      matrixSetExtent[1],\n      matrixSetExtent[0],\n      matrixSetExtent[3],\n      matrixSetExtent[2],\n    ];\n  }\n  let extent = [\n    origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol,\n    // add one to get proper bottom/right coordinate\n    origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow),\n    origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol),\n    origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow,\n  ];\n\n  if (\n    matrixSetExtent !== undefined &&\n    !containsExtent(matrixSetExtent, extent)\n  ) {\n    const wgs84BoundingBox = l['WGS84BoundingBox'];\n    const wgs84ProjectionExtent = getProjection('EPSG:4326').getExtent();\n    extent = matrixSetExtent;\n    if (wgs84BoundingBox) {\n      wrapX =\n        wgs84BoundingBox[0] === wgs84ProjectionExtent[0] &&\n        wgs84BoundingBox[2] === wgs84ProjectionExtent[2];\n    } else {\n      const wgs84MatrixSetExtent = transformExtent(\n        matrixSetExtent,\n        matrixSetObj['SupportedCRS'],\n        'EPSG:4326'\n      );\n      // Ignore slight deviation from the correct x limits\n      wrapX =\n        wgs84MatrixSetExtent[0] - 1e-10 <= wgs84ProjectionExtent[0] &&\n        wgs84MatrixSetExtent[2] + 1e-10 >= wgs84ProjectionExtent[2];\n    }\n  }\n\n  const tileGrid = createFromCapabilitiesMatrixSet(\n    matrixSetObj,\n    extent,\n    matrixLimits\n  );\n\n  /** @type {!Array<string>} */\n  const urls = [];\n  let requestEncoding = config['requestEncoding'];\n  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n\n  if (\n    'OperationsMetadata' in wmtsCap &&\n    'GetTile' in wmtsCap['OperationsMetadata']\n  ) {\n    const gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n\n    for (let i = 0, ii = gets.length; i < ii; ++i) {\n      if (gets[i]['Constraint']) {\n        const constraint = gets[i]['Constraint'].find(function (element) {\n          return element['name'] == 'GetEncoding';\n        });\n        const encodings = constraint['AllowedValues']['Value'];\n\n        if (requestEncoding === '') {\n          // requestEncoding not provided, use the first encoding from the list\n          requestEncoding = encodings[0];\n        }\n        if (requestEncoding === 'KVP') {\n          if (encodings.includes('KVP')) {\n            urls.push(/** @type {string} */ (gets[i]['href']));\n          }\n        } else {\n          break;\n        }\n      } else if (gets[i]['href']) {\n        requestEncoding = 'KVP';\n        urls.push(/** @type {string} */ (gets[i]['href']));\n      }\n    }\n  }\n  if (urls.length === 0) {\n    requestEncoding = 'REST';\n    l['ResourceURL'].forEach(function (element) {\n      if (element['resourceType'] === 'tile') {\n        format = element['format'];\n        urls.push(/** @type {string} */ (element['template']));\n      }\n    });\n  }\n\n  return {\n    urls: urls,\n    layer: config['layer'],\n    matrixSet: matrixSet,\n    format: format,\n    projection: projection,\n    requestEncoding: requestEncoding,\n    tileGrid: tileGrid,\n    style: style,\n    dimensions: dimensions,\n    wrapX: wrapX,\n    crossOrigin: config['crossOrigin'],\n  };\n}\n"],"mappings":";AAAA;AACA;AACA;;AAEA,OAAOA,SAAS,MAAM,gBAAgB;AACtC,SAAQC,YAAY,QAAO,WAAW;AACtC,SAAQC,cAAc,QAAO,cAAc;AAC3C,SAAQC,+BAA+B,QAAO,qBAAqB;AACnE,SAAQC,0BAA0B,EAAEC,SAAS,QAAO,uBAAuB;AAC3E,SAAQC,UAAU,EAAEC,GAAG,IAAIC,aAAa,EAAEC,eAAe,QAAO,YAAY;;AAE5E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,SAASV,SAAS,CAAC;EAC3B;AACF;AACA;EACEW,WAAWA,CAACC,OAAO,EAAE;IACnB;;IAEA,MAAMC,eAAe,GACnBD,OAAO,CAACC,eAAe,KAAKC,SAAS,GAAGF,OAAO,CAACC,eAAe,GAAG,KAAK;;IAEzE;IACA;IACA,MAAME,QAAQ,GAAGH,OAAO,CAACG,QAAQ;IAEjC,IAAIC,IAAI,GAAGJ,OAAO,CAACI,IAAI;IACvB,IAAIA,IAAI,KAAKF,SAAS,IAAIF,OAAO,CAACK,GAAG,KAAKH,SAAS,EAAE;MACnDE,IAAI,GAAGX,SAAS,CAACO,OAAO,CAACK,GAAG,CAAC;IAC/B;IAEA,KAAK,CAAC;MACJC,YAAY,EAAEN,OAAO,CAACM,YAAY;MAClCC,uBAAuB,EAAEP,OAAO,CAACO,uBAAuB;MACxDC,SAAS,EAAER,OAAO,CAACQ,SAAS;MAC5BC,WAAW,EAAET,OAAO,CAACS,WAAW;MAChCC,WAAW,EAAEV,OAAO,CAACU,WAAW;MAChCC,UAAU,EAAEX,OAAO,CAACW,UAAU;MAC9BC,0BAA0B,EAAEZ,OAAO,CAACY,0BAA0B;MAC9DC,SAAS,EAAEb,OAAO,CAACa,SAAS;MAC5BV,QAAQ,EAAEA,QAAQ;MAClBW,gBAAgB,EAAEd,OAAO,CAACc,gBAAgB;MAC1CC,cAAc,EAAEf,OAAO,CAACe,cAAc;MACtCX,IAAI,EAAEA,IAAI;MACVY,KAAK,EAAEhB,OAAO,CAACgB,KAAK,KAAKd,SAAS,GAAGF,OAAO,CAACgB,KAAK,GAAG,KAAK;MAC1DC,UAAU,EAAEjB,OAAO,CAACiB,UAAU;MAC9BC,UAAU,EAAElB,OAAO,CAACkB;IACtB,CAAC,CAAC;;IAEF;AACJ;AACA;AACA;IACI,IAAI,CAACC,QAAQ,GAAGnB,OAAO,CAACoB,OAAO,KAAKlB,SAAS,GAAGF,OAAO,CAACoB,OAAO,GAAG,OAAO;;IAEzE;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAGrB,OAAO,CAACsB,MAAM,KAAKpB,SAAS,GAAGF,OAAO,CAACsB,MAAM,GAAG,YAAY;;IAE3E;AACJ;AACA;AACA;IACI,IAAI,CAACC,WAAW,GACdvB,OAAO,CAACwB,UAAU,KAAKtB,SAAS,GAAGF,OAAO,CAACwB,UAAU,GAAG,CAAC,CAAC;;IAE5D;AACJ;AACA;AACA;IACI,IAAI,CAACC,MAAM,GAAGzB,OAAO,CAAC0B,KAAK;;IAE3B;AACJ;AACA;AACA;IACI,IAAI,CAACC,UAAU,GAAG3B,OAAO,CAAC4B,SAAS;;IAEnC;AACJ;AACA;AACA;IACI,IAAI,CAACC,MAAM,GAAG7B,OAAO,CAAC8B,KAAK;;IAE3B;IACA;;IAEA;AACJ;AACA;AACA;IACI,IAAI,CAACC,gBAAgB,GAAG9B,eAAe;IAEvC,IAAI,CAAC+B,MAAM,CAAC,IAAI,CAACC,oBAAoB,CAAC,CAAC,CAAC;IAExC,IAAI7B,IAAI,IAAIA,IAAI,CAAC8B,MAAM,GAAG,CAAC,EAAE;MAC3B,IAAI,CAACC,eAAe,GAAG3C,0BAA0B,CAC/CY,IAAI,CAACgC,GAAG,CAAC,IAAI,CAACC,sBAAsB,CAACC,IAAI,CAAC,IAAI,CAAC,CACjD,CAAC;IACH;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEC,OAAOA,CAACnC,IAAI,EAAE;IACZ,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,MAAMoC,GAAG,GAAGpC,IAAI,CAACqC,IAAI,CAAC,IAAI,CAAC;IAC3B,IAAI,CAACC,kBAAkB,CACrBlD,0BAA0B,CACxBY,IAAI,CAACgC,GAAG,CAAC,IAAI,CAACC,sBAAsB,CAACC,IAAI,CAAC,IAAI,CAAC,CACjD,CAAC,EACDE,GACF,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,aAAaA,CAAA,EAAG;IACd,OAAO,IAAI,CAACpB,WAAW;EACzB;;EAEA;AACF;AACA;AACA;AACA;EACEqB,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAACvB,OAAO;EACrB;;EAEA;AACF;AACA;AACA;AACA;EACEwB,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACpB,MAAM;EACpB;;EAEA;AACF;AACA;AACA;AACA;EACEqB,YAAYA,CAAA,EAAG;IACb,OAAO,IAAI,CAACnB,UAAU;EACxB;;EAEA;AACF;AACA;AACA;AACA;EACEoB,kBAAkBA,CAAA,EAAG;IACnB,OAAO,IAAI,CAAChB,gBAAgB;EAC9B;;EAEA;AACF;AACA;AACA;AACA;EACEiB,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACnB,MAAM;EACpB;;EAEA;AACF;AACA;AACA;AACA;EACEoB,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAAC9B,QAAQ;EACtB;;EAEA;AACF;AACA;AACA;EACEc,oBAAoBA,CAAA,EAAG;IACrB,MAAMiB,GAAG,GAAG,IAAI,CAAC9C,IAAI,GAAG,IAAI,CAACA,IAAI,CAAC+C,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;IAC/C,KAAK,MAAMX,GAAG,IAAI,IAAI,CAACjB,WAAW,EAAE;MAClC2B,GAAG,CAACE,IAAI,CAACZ,GAAG,GAAG,GAAG,GAAG,IAAI,CAACjB,WAAW,CAACiB,GAAG,CAAC,CAAC;IAC7C;IACA,OAAOU,GAAG,CAACT,IAAI,CAAC,GAAG,CAAC;EACtB;;EAEA;AACF;AACA;AACA;AACA;EACEY,gBAAgBA,CAAC7B,UAAU,EAAE;IAC3B8B,MAAM,CAACC,MAAM,CAAC,IAAI,CAAChC,WAAW,EAAEC,UAAU,CAAC;IAC3C,IAAI,CAACQ,MAAM,CAAC,IAAI,CAACC,oBAAoB,CAAC,CAAC,CAAC;EAC1C;;EAEA;AACF;AACA;AACA;EACEI,sBAAsBA,CAACmB,QAAQ,EAAE;IAC/B,MAAMvD,eAAe,GAAG,IAAI,CAAC8B,gBAAgB;;IAE7C;IACA;IACA,MAAM0B,OAAO,GAAG;MACd,OAAO,EAAE,IAAI,CAAChC,MAAM;MACpB,OAAO,EAAE,IAAI,CAACI,MAAM;MACpB,eAAe,EAAE,IAAI,CAACF;IACxB,CAAC;IAED,IAAI1B,eAAe,IAAI,KAAK,EAAE;MAC5BqD,MAAM,CAACC,MAAM,CAACE,OAAO,EAAE;QACrB,SAAS,EAAE,MAAM;QACjB,SAAS,EAAE,SAAS;QACpB,SAAS,EAAE,IAAI,CAACtC,QAAQ;QACxB,QAAQ,EAAE,IAAI,CAACE;MACjB,CAAC,CAAC;IACJ;;IAEA;IACA;IACA;;IAEAmC,QAAQ,GACNvD,eAAe,IAAI,KAAK,GACpBZ,YAAY,CAACmE,QAAQ,EAAEC,OAAO,CAAC,GAC/BD,QAAQ,CAACE,OAAO,CAAC,aAAa,EAAE,UAAUC,CAAC,EAAEC,CAAC,EAAE;MAC9C,OAAOA,CAAC,CAACC,WAAW,CAAC,CAAC,IAAIJ,OAAO,GAAGA,OAAO,CAACG,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,GAAGF,CAAC;IAClE,CAAC,CAAC;IAER,MAAMxD,QAAQ,GAAG;IACf,IAAI,CAACA,QACN;IACD,MAAMqB,UAAU,GAAG,IAAI,CAACD,WAAW;IAEnC;MACE;AACN;AACA;AACA;AACA;AACA;MACM,UAAUuC,SAAS,EAAEC,UAAU,EAAEpD,UAAU,EAAE;QAC3C,IAAI,CAACmD,SAAS,EAAE;UACd,OAAO5D,SAAS;QAClB;QACA,MAAM8D,YAAY,GAAG;UACnB,YAAY,EAAE7D,QAAQ,CAAC8D,WAAW,CAACH,SAAS,CAAC,CAAC,CAAC,CAAC;UAChD,SAAS,EAAEA,SAAS,CAAC,CAAC,CAAC;UACvB,SAAS,EAAEA,SAAS,CAAC,CAAC;QACxB,CAAC;QACDR,MAAM,CAACC,MAAM,CAACS,YAAY,EAAExC,UAAU,CAAC;QACvC,IAAInB,GAAG,GAAGmD,QAAQ;QAClB,IAAIvD,eAAe,IAAI,KAAK,EAAE;UAC5BI,GAAG,GAAGhB,YAAY,CAACgB,GAAG,EAAE2D,YAAY,CAAC;QACvC,CAAC,MAAM;UACL3D,GAAG,GAAGA,GAAG,CAACqD,OAAO,CAAC,aAAa,EAAE,UAAUC,CAAC,EAAEC,CAAC,EAAE;YAC/C,OAAOI,YAAY,CAACJ,CAAC,CAAC;UACxB,CAAC,CAAC;QACJ;QACA,OAAOvD,GAAG;MACZ;IAAC;EAEL;AACF;AAEA,eAAeP,IAAI;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASoE,uBAAuBA,CAACC,OAAO,EAAEC,MAAM,EAAE;EACvD,MAAMC,MAAM,GAAGF,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC;EAC3C,MAAMG,CAAC,GAAGD,MAAM,CAACE,IAAI,CAAC,UAAUC,GAAG,EAAE;IACnC,OAAOA,GAAG,CAAC,YAAY,CAAC,IAAIJ,MAAM,CAAC,OAAO,CAAC;EAC7C,CAAC,CAAC;EACF,IAAI,CAACE,CAAC,EAAE;IACN,OAAO,IAAI;EACb;EACA,MAAMG,cAAc,GAAGN,OAAO,CAAC,UAAU,CAAC,CAAC,eAAe,CAAC;EAC3D,IAAIO,GAAG;EACP,IAAIJ,CAAC,CAAC,mBAAmB,CAAC,CAACpC,MAAM,GAAG,CAAC,EAAE;IACrC,IAAI,YAAY,IAAIkC,MAAM,EAAE;MAC1BM,GAAG,GAAGJ,CAAC,CAAC,mBAAmB,CAAC,CAACK,SAAS,CAAC,UAAUH,GAAG,EAAE;QACpD,MAAMI,aAAa,GAAGH,cAAc,CAACF,IAAI,CAAC,UAAUM,EAAE,EAAE;UACtD,OAAOA,EAAE,CAAC,YAAY,CAAC,IAAIL,GAAG,CAAC,eAAe,CAAC;QACjD,CAAC,CAAC;QACF,MAAMM,YAAY,GAAGF,aAAa,CAAC,cAAc,CAAC;QAClD,MAAMG,KAAK,GAAGnF,aAAa,CAACkF,YAAY,CAAC;QACzC,MAAME,KAAK,GAAGpF,aAAa,CAACwE,MAAM,CAAC,YAAY,CAAC,CAAC;QACjD,IAAIW,KAAK,IAAIC,KAAK,EAAE;UAClB,OAAOtF,UAAU,CAACqF,KAAK,EAAEC,KAAK,CAAC;QACjC;QACA,OAAOF,YAAY,IAAIV,MAAM,CAAC,YAAY,CAAC;MAC7C,CAAC,CAAC;IACJ,CAAC,MAAM;MACLM,GAAG,GAAGJ,CAAC,CAAC,mBAAmB,CAAC,CAACK,SAAS,CAAC,UAAUH,GAAG,EAAE;QACpD,OAAOA,GAAG,CAAC,eAAe,CAAC,IAAIJ,MAAM,CAAC,WAAW,CAAC;MACpD,CAAC,CAAC;IACJ;EACF,CAAC,MAAM;IACLM,GAAG,GAAG,CAAC;EACT;EACA,IAAIA,GAAG,GAAG,CAAC,EAAE;IACXA,GAAG,GAAG,CAAC;EACT;EACA,MAAM9C,SAAS,GACb;EACC0C,CAAC,CAAC,mBAAmB,CAAC,CAACI,GAAG,CAAC,CAAC,eAAe,CAAE;EAChD,MAAMO,YAAY,GAChB;EACCX,CAAC,CAAC,mBAAmB,CAAC,CAACI,GAAG,CAAC,CAAC,qBAAqB,CAAE;EAEtD,IAAIpD,MAAM,GAAG,qBAAuBgD,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAE;EACnD,IAAI,QAAQ,IAAIF,MAAM,EAAE;IACtB9C,MAAM,GAAG8C,MAAM,CAAC,QAAQ,CAAC;EAC3B;EACAM,GAAG,GAAGJ,CAAC,CAAC,OAAO,CAAC,CAACK,SAAS,CAAC,UAAUH,GAAG,EAAE;IACxC,IAAI,OAAO,IAAIJ,MAAM,EAAE;MACrB,OAAOI,GAAG,CAAC,OAAO,CAAC,IAAIJ,MAAM,CAAC,OAAO,CAAC;IACxC;IACA,OAAOI,GAAG,CAAC,WAAW,CAAC;EACzB,CAAC,CAAC;EACF,IAAIE,GAAG,GAAG,CAAC,EAAE;IACXA,GAAG,GAAG,CAAC;EACT;EACA,MAAM5C,KAAK,GAAG,qBAAuBwC,CAAC,CAAC,OAAO,CAAC,CAACI,GAAG,CAAC,CAAC,YAAY,CAAE;EAEnE,MAAMlD,UAAU,GAAG,CAAC,CAAC;EACrB,IAAI,WAAW,IAAI8C,CAAC,EAAE;IACpBA,CAAC,CAAC,WAAW,CAAC,CAACY,OAAO,CAAC,UAAUV,GAAG,EAAEW,KAAK,EAAEC,KAAK,EAAE;MAClD,MAAM5C,GAAG,GAAGgC,GAAG,CAAC,YAAY,CAAC;MAC7B,IAAIa,KAAK,GAAGb,GAAG,CAAC,SAAS,CAAC;MAC1B,IAAIa,KAAK,KAAKnF,SAAS,EAAE;QACvBmF,KAAK,GAAGb,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;MACzB;MACAhD,UAAU,CAACgB,GAAG,CAAC,GAAG6C,KAAK;IACzB,CAAC,CAAC;EACJ;EAEA,MAAMC,UAAU,GAAGnB,OAAO,CAAC,UAAU,CAAC,CAAC,eAAe,CAAC;EACvD,MAAMoB,YAAY,GAAGD,UAAU,CAACf,IAAI,CAAC,UAAUC,GAAG,EAAE;IAClD,OAAOA,GAAG,CAAC,YAAY,CAAC,IAAI5C,SAAS;EACvC,CAAC,CAAC;EAEF,IAAIjB,UAAU;EACd,MAAM6E,IAAI,GAAGD,YAAY,CAAC,cAAc,CAAC;EACzC,IAAIC,IAAI,EAAE;IACR7E,UAAU,GAAGf,aAAa,CAAC4F,IAAI,CAAC;EAClC;EACA,IAAI,YAAY,IAAIpB,MAAM,EAAE;IAC1B,MAAMqB,UAAU,GAAG7F,aAAa,CAACwE,MAAM,CAAC,YAAY,CAAC,CAAC;IACtD,IAAIqB,UAAU,EAAE;MACd,IAAI,CAAC9E,UAAU,IAAIjB,UAAU,CAAC+F,UAAU,EAAE9E,UAAU,CAAC,EAAE;QACrDA,UAAU,GAAG8E,UAAU;MACzB;IACF;EACF;EAEA,IAAIzE,KAAK,GAAG,KAAK;EACjB,MAAM0E,QAAQ,GAAG/E,UAAU,CAACgF,kBAAkB,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI;EAErE,IAAIC,MAAM,GAAGN,YAAY,CAACO,UAAU,CAAC,CAAC,CAAC;;EAEvC;EACA,IAAIC,mBAAmB,GAAG;IACxBC,UAAU,EAAE,CAAC;IACbC,UAAU,EAAE,CAAC;IACb;IACAC,UAAU,EAAEL,MAAM,CAACM,WAAW,GAAG,CAAC;IAClCC,UAAU,EAAEP,MAAM,CAACQ,YAAY,GAAG;EACpC,CAAC;;EAED;EACA,IAAIpB,YAAY,EAAE;IAChBc,mBAAmB,GAAGd,YAAY,CAACA,YAAY,CAAC/C,MAAM,GAAG,CAAC,CAAC;IAC3D,MAAMyB,CAAC,GAAG4B,YAAY,CAACO,UAAU,CAACvB,IAAI,CACnC+B,eAAe,IACdA,eAAe,CAACC,UAAU,KAAKR,mBAAmB,CAACD,UAAU,IAC7DP,YAAY,CAACgB,UAAU,GAAG,GAAG,GAAGD,eAAe,CAACC,UAAU,KACxDR,mBAAmB,CAACD,UAC1B,CAAC;IACD,IAAInC,CAAC,EAAE;MACLkC,MAAM,GAAGlC,CAAC;IACZ;EACF;EAEA,MAAM6C,UAAU,GACbX,MAAM,CAACY,gBAAgB,GAAG,OAAO,GAAI9F,UAAU,CAAC+F,gBAAgB,CAAC,CAAC,CAAC,CAAC;EACvE,MAAMC,MAAM,GAAGjB,QAAQ,GACnB,CAACG,MAAM,CAACe,aAAa,CAAC,CAAC,CAAC,EAAEf,MAAM,CAACe,aAAa,CAAC,CAAC,CAAC,CAAC,GAClDf,MAAM,CAACe,aAAa;EACxB,MAAMC,SAAS,GAAGhB,MAAM,CAACiB,SAAS,GAAGN,UAAU;EAC/C,MAAMO,SAAS,GAAGlB,MAAM,CAACmB,UAAU,GAAGR,UAAU;EAChD,IAAIS,eAAe,GAAG1B,YAAY,CAAC,aAAa,CAAC;EACjD,IAAI0B,eAAe,IAAIvB,QAAQ,EAAE;IAC/BuB,eAAe,GAAG,CAChBA,eAAe,CAAC,CAAC,CAAC,EAClBA,eAAe,CAAC,CAAC,CAAC,EAClBA,eAAe,CAAC,CAAC,CAAC,EAClBA,eAAe,CAAC,CAAC,CAAC,CACnB;EACH;EACA,IAAIC,MAAM,GAAG,CACXP,MAAM,CAAC,CAAC,CAAC,GAAGE,SAAS,GAAGd,mBAAmB,CAACC,UAAU;EACtD;EACAW,MAAM,CAAC,CAAC,CAAC,GAAGI,SAAS,IAAI,CAAC,GAAGhB,mBAAmB,CAACK,UAAU,CAAC,EAC5DO,MAAM,CAAC,CAAC,CAAC,GAAGE,SAAS,IAAI,CAAC,GAAGd,mBAAmB,CAACG,UAAU,CAAC,EAC5DS,MAAM,CAAC,CAAC,CAAC,GAAGI,SAAS,GAAGhB,mBAAmB,CAACE,UAAU,CACvD;EAED,IACEgB,eAAe,KAAK/G,SAAS,IAC7B,CAACZ,cAAc,CAAC2H,eAAe,EAAEC,MAAM,CAAC,EACxC;IACA,MAAMC,gBAAgB,GAAG7C,CAAC,CAAC,kBAAkB,CAAC;IAC9C,MAAM8C,qBAAqB,GAAGxH,aAAa,CAAC,WAAW,CAAC,CAACyH,SAAS,CAAC,CAAC;IACpEH,MAAM,GAAGD,eAAe;IACxB,IAAIE,gBAAgB,EAAE;MACpBnG,KAAK,GACHmG,gBAAgB,CAAC,CAAC,CAAC,KAAKC,qBAAqB,CAAC,CAAC,CAAC,IAChDD,gBAAgB,CAAC,CAAC,CAAC,KAAKC,qBAAqB,CAAC,CAAC,CAAC;IACpD,CAAC,MAAM;MACL,MAAME,oBAAoB,GAAGzH,eAAe,CAC1CoH,eAAe,EACf1B,YAAY,CAAC,cAAc,CAAC,EAC5B,WACF,CAAC;MACD;MACAvE,KAAK,GACHsG,oBAAoB,CAAC,CAAC,CAAC,GAAG,KAAK,IAAIF,qBAAqB,CAAC,CAAC,CAAC,IAC3DE,oBAAoB,CAAC,CAAC,CAAC,GAAG,KAAK,IAAIF,qBAAqB,CAAC,CAAC,CAAC;IAC/D;EACF;EAEA,MAAMjH,QAAQ,GAAGZ,+BAA+B,CAC9CgG,YAAY,EACZ2B,MAAM,EACNjC,YACF,CAAC;;EAED;EACA,MAAM7E,IAAI,GAAG,EAAE;EACf,IAAIH,eAAe,GAAGmE,MAAM,CAAC,iBAAiB,CAAC;EAC/CnE,eAAe,GAAGA,eAAe,KAAKC,SAAS,GAAGD,eAAe,GAAG,EAAE;EAEtE,IACE,oBAAoB,IAAIkE,OAAO,IAC/B,SAAS,IAAIA,OAAO,CAAC,oBAAoB,CAAC,EAC1C;IACA,MAAMoD,IAAI,GAAGpD,OAAO,CAAC,oBAAoB,CAAC,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;IAE3E,KAAK,IAAIqD,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGF,IAAI,CAACrF,MAAM,EAAEsF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;MAC7C,IAAID,IAAI,CAACC,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE;QACzB,MAAME,UAAU,GAAGH,IAAI,CAACC,CAAC,CAAC,CAAC,YAAY,CAAC,CAACjD,IAAI,CAAC,UAAUoD,OAAO,EAAE;UAC/D,OAAOA,OAAO,CAAC,MAAM,CAAC,IAAI,aAAa;QACzC,CAAC,CAAC;QACF,MAAMC,SAAS,GAAGF,UAAU,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC;QAEtD,IAAIzH,eAAe,KAAK,EAAE,EAAE;UAC1B;UACAA,eAAe,GAAG2H,SAAS,CAAC,CAAC,CAAC;QAChC;QACA,IAAI3H,eAAe,KAAK,KAAK,EAAE;UAC7B,IAAI2H,SAAS,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;YAC7BzH,IAAI,CAACgD,IAAI,EAAC,qBAAuBmE,IAAI,CAACC,CAAC,CAAC,CAAC,MAAM,CAAE,CAAC;UACpD;QACF,CAAC,MAAM;UACL;QACF;MACF,CAAC,MAAM,IAAID,IAAI,CAACC,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE;QAC1BvH,eAAe,GAAG,KAAK;QACvBG,IAAI,CAACgD,IAAI,EAAC,qBAAuBmE,IAAI,CAACC,CAAC,CAAC,CAAC,MAAM,CAAE,CAAC;MACpD;IACF;EACF;EACA,IAAIpH,IAAI,CAAC8B,MAAM,KAAK,CAAC,EAAE;IACrBjC,eAAe,GAAG,MAAM;IACxBqE,CAAC,CAAC,aAAa,CAAC,CAACY,OAAO,CAAC,UAAUyC,OAAO,EAAE;MAC1C,IAAIA,OAAO,CAAC,cAAc,CAAC,KAAK,MAAM,EAAE;QACtCrG,MAAM,GAAGqG,OAAO,CAAC,QAAQ,CAAC;QAC1BvH,IAAI,CAACgD,IAAI,EAAC,qBAAuBuE,OAAO,CAAC,UAAU,CAAE,CAAC;MACxD;IACF,CAAC,CAAC;EACJ;EAEA,OAAO;IACLvH,IAAI,EAAEA,IAAI;IACVsB,KAAK,EAAE0C,MAAM,CAAC,OAAO,CAAC;IACtBxC,SAAS,EAAEA,SAAS;IACpBN,MAAM,EAAEA,MAAM;IACdX,UAAU,EAAEA,UAAU;IACtBV,eAAe,EAAEA,eAAe;IAChCE,QAAQ,EAAEA,QAAQ;IAClB2B,KAAK,EAAEA,KAAK;IACZN,UAAU,EAAEA,UAAU;IACtBR,KAAK,EAAEA,KAAK;IACZP,WAAW,EAAE2D,MAAM,CAAC,aAAa;EACnC,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}