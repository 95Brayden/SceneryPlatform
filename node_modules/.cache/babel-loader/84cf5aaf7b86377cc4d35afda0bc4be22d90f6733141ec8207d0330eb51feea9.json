{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/source/Vector\n */\n\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport RBush from '../structs/RBush.js';\nimport Source from './Source.js';\nimport VectorEventType from './VectorEventType.js';\nimport { TRUE, VOID } from '../functions.js';\nimport { all as allStrategy } from '../loadingstrategy.js';\nimport { assert } from '../asserts.js';\nimport { containsExtent, equals, wrapAndSliceX } from '../extent.js';\nimport { extend } from '../array.js';\nimport { getUid } from '../util.js';\nimport { isEmpty } from '../obj.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { xhr } from '../featureloader.js';\n\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number, import(\"../proj/Projection.js\").default): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector~VectorSource} instances are instances of this\n * type.\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\n */\nexport class VectorSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Feature.js\").default<Geometry>} [feature] Feature.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} [features] Features.\n   */\n  constructor(type, feature, features) {\n    super(type);\n\n    /**\n     * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.\n     * @type {import(\"../Feature.js\").default<Geometry>|undefined}\n     * @api\n     */\n    this.feature = feature;\n\n    /**\n     * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.\n     * @type {Array<import(\"../Feature.js\").default<Geometry>>|undefined}\n     * @api\n     */\n    this.features = features;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./VectorEventType\").VectorSourceEventTypes, VectorSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./VectorEventType\").VectorSourceEventTypes, Return>} VectorSourceOnSignature\n */\n\n/**\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default<Geometry>>|Collection<import(\"../Feature.js\").default<Geometry>>} [features]\n * Features. If provided as {@link module:ol/Collection~Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events\n * will only fire if the `success` and `failure` callbacks are used.\n *\n * Example:\n *\n * ```js\n * import Vector from 'ol/source/Vector.js';\n * import GeoJSON from 'ol/format/GeoJSON.js';\n * import {bbox} from 'ol/loadingstrategy.js';\n *\n * const vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection, success, failure) {\n *      const proj = projection.getCode();\n *      const url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      const xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      const onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *        failure();\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          const features = vectorSource.getFormat().readFeatures(xhr.responseText);\n *          vectorSource.addFeatures(features);\n *          success(features);\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox,\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy.all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader.xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy.all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection~Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires VectorSourceEvent\n * @api\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\n */\nclass VectorSource extends Source {\n  /**\n   * @param {Options<Geometry>} [options] Vector source options.\n   */\n  constructor(options) {\n    options = options || {};\n    super({\n      attributions: options.attributions,\n      interpolate: true,\n      projection: undefined,\n      state: 'ready',\n      wrapX: options.wrapX !== undefined ? options.wrapX : true\n    });\n\n    /***\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {VectorSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader}\n     */\n    this.loader_ = VOID;\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|undefined}\n     */\n    this.format_ = options.format;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\n\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n    this.url_ = options.url;\n    if (options.loader !== undefined) {\n      this.loader_ = options.loader;\n    } else if (this.url_ !== undefined) {\n      assert(this.format_, '`format` must be set when `url` is set');\n      // create a XHR feature loader for \"url\" and \"format\"\n      this.loader_ = xhr(this.url_, /** @type {import(\"../format/Feature.js\").default} */this.format_);\n    }\n\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n    this.strategy_ = options.strategy !== undefined ? options.strategy : allStrategy;\n    const useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n\n    /**\n     * @private\n     * @type {RBush<import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n    this.loadedExtentsRtree_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.loadingExtentsCount_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.nullGeometryFeatures_ = {};\n\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.idIndex_ = {};\n\n    /**\n     * A lookup of features by uid (using getUid(feature)).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.uidIndex_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    this.featureChangeKeys_ = {};\n\n    /**\n     * @private\n     * @type {Collection<import(\"../Feature.js\").default<Geometry>>|null}\n     */\n    this.featuresCollection_ = null;\n\n    /** @type {Collection<import(\"../Feature.js\").default<Geometry>>} */\n    let collection;\n    /** @type {Array<import(\"../Feature.js\").default<Geometry>>} */\n    let features;\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n    if (features !== undefined) {\n      this.addFeaturesInternal(features);\n    }\n    if (collection !== undefined) {\n      this.bindFeaturesCollection_(collection);\n    }\n  }\n\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * Note: this also applies if an {@link module:ol/Collection~Collection} is used for features,\n   * meaning that if a feature with a duplicate id is added in the collection, it will\n   * be removed from it right away.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to add.\n   * @api\n   */\n  addFeature(feature) {\n    this.addFeatureInternal(feature);\n    this.changed();\n  }\n\n  /**\n   * Add a feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @protected\n   */\n  addFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n    if (!this.addToIndex_(featureKey, feature)) {\n      if (this.featuresCollection_) {\n        this.featuresCollection_.remove(feature);\n      }\n      return;\n    }\n    this.setupChangeEvents_(featureKey, feature);\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      const extent = geometry.getExtent();\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));\n  }\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @private\n   */\n  setupChangeEvents_(featureKey, feature) {\n    this.featureChangeKeys_[featureKey] = [listen(feature, EventType.CHANGE, this.handleFeatureChange_, this), listen(feature, ObjectEventType.PROPERTYCHANGE, this.handleFeatureChange_, this)];\n  }\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */\n  addToIndex_(featureKey, feature) {\n    let valid = true;\n    const id = feature.getId();\n    if (id !== undefined) {\n      if (!(id.toString() in this.idIndex_)) {\n        this.idIndex_[id.toString()] = feature;\n      } else {\n        valid = false;\n      }\n    }\n    if (valid) {\n      assert(!(featureKey in this.uidIndex_), 'The passed `feature` was already added to the source');\n      this.uidIndex_[featureKey] = feature;\n    }\n    return valid;\n  }\n\n  /**\n   * Add a batch of features to the source.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features to add.\n   * @api\n   */\n  addFeatures(features) {\n    this.addFeaturesInternal(features);\n    this.changed();\n  }\n\n  /**\n   * Add features without firing a `change` event.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features.\n   * @protected\n   */\n  addFeaturesInternal(features) {\n    const extents = [];\n    const newFeatures = [];\n    const geometryFeatures = [];\n    for (let i = 0, length = features.length; i < length; i++) {\n      const feature = features[i];\n      const featureKey = getUid(feature);\n      if (this.addToIndex_(featureKey, feature)) {\n        newFeatures.push(feature);\n      }\n    }\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\n      const feature = newFeatures[i];\n      const featureKey = getUid(feature);\n      this.setupChangeEvents_(featureKey, feature);\n      const geometry = feature.getGeometry();\n      if (geometry) {\n        const extent = geometry.getExtent();\n        extents.push(extent);\n        geometryFeatures.push(feature);\n      } else {\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.load(extents, geometryFeatures);\n    }\n    if (this.hasListener(VectorEventType.ADDFEATURE)) {\n      for (let i = 0, length = newFeatures.length; i < length; i++) {\n        this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i]));\n      }\n    }\n  }\n\n  /**\n   * @param {!Collection<import(\"../Feature.js\").default<Geometry>>} collection Collection.\n   * @private\n   */\n  bindFeaturesCollection_(collection) {\n    let modifyingCollection = false;\n    this.addEventListener(VectorEventType.ADDFEATURE,\n    /**\n     * @param {VectorSourceEvent<Geometry>} evt The vector source event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.push(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n    this.addEventListener(VectorEventType.REMOVEFEATURE,\n    /**\n     * @param {VectorSourceEvent<Geometry>} evt The vector source event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.remove(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n    collection.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent<import(\"../Feature.js\").default<Geometry>>} evt The collection event\n     */\n    evt => {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.addFeature(evt.element);\n        modifyingCollection = false;\n      }\n    });\n    collection.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent<import(\"../Feature.js\").default<Geometry>>} evt The collection event\n     */\n    evt => {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.removeFeature(evt.element);\n        modifyingCollection = false;\n      }\n    });\n    this.featuresCollection_ = collection;\n  }\n\n  /**\n   * Remove all features from the source.\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature} events.\n   * @api\n   */\n  clear(fast) {\n    if (fast) {\n      for (const featureId in this.featureChangeKeys_) {\n        const keys = this.featureChangeKeys_[featureId];\n        keys.forEach(unlistenByKey);\n      }\n      if (!this.featuresCollection_) {\n        this.featureChangeKeys_ = {};\n        this.idIndex_ = {};\n        this.uidIndex_ = {};\n      }\n    } else {\n      if (this.featuresRtree_) {\n        const removeAndIgnoreReturn = feature => {\n          this.removeFeatureInternal(feature);\n        };\n        this.featuresRtree_.forEach(removeAndIgnoreReturn);\n        for (const id in this.nullGeometryFeatures_) {\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n      }\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.clear();\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.clear();\n    }\n    this.nullGeometryFeatures_ = {};\n    const clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n    this.dispatchEvent(clearEvent);\n    this.changed();\n  }\n\n  /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeature(callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEach(callback);\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n  /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n  forEachFeatureAtCoordinateDirect(coordinate, callback) {\n    const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n    return this.forEachFeatureInExtent(extent, function (feature) {\n      const geometry = feature.getGeometry();\n      if (geometry.intersectsCoordinate(coordinate)) {\n        return callback(feature);\n      }\n      return undefined;\n    });\n  }\n\n  /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureInExtent(extent, callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEachInExtent(extent, callback);\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n  /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureIntersectingExtent(extent, callback) {\n    return this.forEachFeatureInExtent(extent,\n    /**\n     * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n     * @return {T|undefined} The return value from the last call to the callback.\n     */\n    function (feature) {\n      const geometry = feature.getGeometry();\n      if (geometry.intersectsExtent(extent)) {\n        const result = callback(feature);\n        if (result) {\n          return result;\n        }\n      }\n    });\n  }\n\n  /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection~Collection} as `features`.\n   * @return {Collection<import(\"../Feature.js\").default<Geometry>>|null} The collection of features.\n   * @api\n   */\n  getFeaturesCollection() {\n    return this.featuresCollection_;\n  }\n\n  /**\n   * Get a snapshot of the features currently on the source in random order. The returned array\n   * is a copy, the features are references to the features in the source.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  getFeatures() {\n    let features;\n    if (this.featuresCollection_) {\n      features = this.featuresCollection_.getArray().slice(0);\n    } else if (this.featuresRtree_) {\n      features = this.featuresRtree_.getAll();\n      if (!isEmpty(this.nullGeometryFeatures_)) {\n        extend(features, Object.values(this.nullGeometryFeatures_));\n      }\n    }\n    return (/** @type {Array<import(\"../Feature.js\").default<Geometry>>} */\n      features\n    );\n  }\n\n  /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  getFeaturesAtCoordinate(coordinate) {\n    const features = [];\n    this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\n      features.push(feature);\n    });\n    return features;\n  }\n\n  /**\n   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * When `useSpatialIndex` is set to false, this method will return all\n   * features.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../proj/Projection.js\").default} [projection] Include features\n   * where `extent` exceeds the x-axis bounds of `projection` and wraps around the world.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  getFeaturesInExtent(extent, projection) {\n    if (this.featuresRtree_) {\n      const multiWorld = projection && projection.canWrapX() && this.getWrapX();\n      if (!multiWorld) {\n        return this.featuresRtree_.getInExtent(extent);\n      }\n      const extents = wrapAndSliceX(extent, projection);\n      return [].concat(...extents.map(anExtent => this.featuresRtree_.getInExtent(anExtent)));\n    }\n    if (this.featuresCollection_) {\n      return this.featuresCollection_.getArray().slice(0);\n    }\n    return [];\n  }\n\n  /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>):boolean} [filter] Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature~Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {import(\"../Feature.js\").default<Geometry>} Closest feature.\n   * @api\n   */\n  getClosestFeatureToCoordinate(coordinate, filter) {\n    // Find the closest feature using branch and bound.  We start searching an\n    // infinite extent, and find the distance from the first feature found.  This\n    // becomes the closest feature.  We then compute a smaller extent which any\n    // closer feature must intersect.  We continue searching with this smaller\n    // extent, trying to find a closer feature.  Every time we find a closer\n    // feature, we update the extent being searched so that any even closer\n    // feature must intersect it.  We continue until we run out of features.\n    const x = coordinate[0];\n    const y = coordinate[1];\n    let closestFeature = null;\n    const closestPoint = [NaN, NaN];\n    let minSquaredDistance = Infinity;\n    const extent = [-Infinity, -Infinity, Infinity, Infinity];\n    filter = filter ? filter : TRUE;\n    this.featuresRtree_.forEachInExtent(extent,\n    /**\n     * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n     */\n    function (feature) {\n      if (filter(feature)) {\n        const geometry = feature.getGeometry();\n        const previousMinSquaredDistance = minSquaredDistance;\n        minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);\n        if (minSquaredDistance < previousMinSquaredDistance) {\n          closestFeature = feature;\n          // This is sneaky.  Reduce the extent that it is currently being\n          // searched while the R-Tree traversal using this same extent object\n          // is still in progress.  This is safe because the new extent is\n          // strictly contained by the old extent.\n          const minDistance = Math.sqrt(minSquaredDistance);\n          extent[0] = x - minDistance;\n          extent[1] = y - minDistance;\n          extent[2] = x + minDistance;\n          extent[3] = y + minDistance;\n        }\n      }\n    });\n    return closestFeature;\n  }\n\n  /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent} [extent] Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent(extent) {\n    return this.featuresRtree_.getExtent(extent);\n  }\n\n  /**\n   * Get a feature by its identifier (the value returned by feature.getId()).\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>|null} The feature (or `null` if not found).\n   * @api\n   */\n  getFeatureById(id) {\n    const feature = this.idIndex_[id.toString()];\n    return feature !== undefined ? feature : null;\n  }\n\n  /**\n   * Get a feature by its internal unique identifier (using `getUid`).\n   *\n   * @param {string} uid Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>|null} The feature (or `null` if not found).\n   */\n  getFeatureByUid(uid) {\n    const feature = this.uidIndex_[uid];\n    return feature !== undefined ? feature : null;\n  }\n\n  /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  getOverlaps() {\n    return this.overlaps_;\n  }\n\n  /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  handleFeatureChange_(event) {\n    const feature = /** @type {import(\"../Feature.js\").default<Geometry>} */\n    event.target;\n    const featureKey = getUid(feature);\n    const geometry = feature.getGeometry();\n    if (!geometry) {\n      if (!(featureKey in this.nullGeometryFeatures_)) {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    } else {\n      const extent = geometry.getExtent();\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.update(extent, feature);\n        }\n      }\n    }\n    const id = feature.getId();\n    if (id !== undefined) {\n      const sid = id.toString();\n      if (this.idIndex_[sid] !== feature) {\n        this.removeFromIdIndex_(feature);\n        this.idIndex_[sid] = feature;\n      }\n    } else {\n      this.removeFromIdIndex_(feature);\n      this.uidIndex_[featureKey] = feature;\n    }\n    this.changed();\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature));\n  }\n\n  /**\n   * Returns true if the feature is contained within the source.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */\n  hasFeature(feature) {\n    const id = feature.getId();\n    if (id !== undefined) {\n      return id in this.idIndex_;\n    }\n    return getUid(feature) in this.uidIndex_;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);\n    }\n    if (this.featuresCollection_) {\n      return this.featuresCollection_.getLength() === 0;\n    }\n    return true;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  loadFeatures(extent, resolution, projection) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    const extentsToLoad = this.strategy_(extent, resolution, projection);\n    for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {\n      const extentToLoad = extentsToLoad[i];\n      const alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,\n      /**\n       * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n       * @return {boolean} Contains.\n       */\n      function (object) {\n        return containsExtent(object.extent, extentToLoad);\n      });\n      if (!alreadyLoaded) {\n        ++this.loadingExtentsCount_;\n        this.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADSTART));\n        this.loader_.call(this, extentToLoad, resolution, projection, features => {\n          --this.loadingExtentsCount_;\n          this.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADEND, undefined, features));\n        }, () => {\n          --this.loadingExtentsCount_;\n          this.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADERROR));\n        });\n        loadedExtentsRtree.insert(extentToLoad, {\n          extent: extentToLoad.slice()\n        });\n      }\n    }\n    this.loading = this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;\n  }\n  refresh() {\n    this.clear(true);\n    this.loadedExtentsRtree_.clear();\n    super.refresh();\n  }\n\n  /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  removeLoadedExtent(extent) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    let obj;\n    loadedExtentsRtree.forEachInExtent(extent, function (object) {\n      if (equals(object.extent, extent)) {\n        obj = object;\n        return true;\n      }\n    });\n    if (obj) {\n      loadedExtentsRtree.remove(obj);\n    }\n  }\n\n  /**\n   * Remove a single feature from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to remove.\n   * @api\n   */\n  removeFeature(feature) {\n    if (!feature) {\n      return;\n    }\n    const featureKey = getUid(feature);\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n    }\n    const result = this.removeFeatureInternal(feature);\n    if (result) {\n      this.changed();\n    }\n  }\n\n  /**\n   * Remove feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @return {import(\"../Feature.js\").default<Geometry>|undefined} The removed feature\n   *     (or undefined if the feature was not found).\n   * @protected\n   */\n  removeFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n    const featureChangeKeys = this.featureChangeKeys_[featureKey];\n    if (!featureChangeKeys) {\n      return;\n    }\n    featureChangeKeys.forEach(unlistenByKey);\n    delete this.featureChangeKeys_[featureKey];\n    const id = feature.getId();\n    if (id !== undefined) {\n      delete this.idIndex_[id.toString()];\n    }\n    delete this.uidIndex_[featureKey];\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature));\n    return feature;\n  }\n\n  /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */\n  removeFromIdIndex_(feature) {\n    let removed = false;\n    for (const id in this.idIndex_) {\n      if (this.idIndex_[id] === feature) {\n        delete this.idIndex_[id];\n        removed = true;\n        break;\n      }\n    }\n    return removed;\n  }\n\n  /**\n   * Set the new loader of the source. The next render cycle will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n   * @api\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n\n  /**\n   * Points the source to a new url. The next render cycle will use the new url.\n   * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\n   * @api\n   */\n  setUrl(url) {\n    assert(this.format_, '`format` must be set when `url` is set');\n    this.url_ = url;\n    this.setLoader(xhr(url, this.format_));\n  }\n}\nexport default VectorSource;","map":{"version":3,"names":["Collection","CollectionEventType","Event","EventType","ObjectEventType","RBush","Source","VectorEventType","TRUE","VOID","all","allStrategy","assert","containsExtent","equals","wrapAndSliceX","extend","getUid","isEmpty","listen","unlistenByKey","xhr","VectorSourceEvent","constructor","type","feature","features","VectorSource","options","attributions","interpolate","projection","undefined","state","wrapX","on","once","un","loader_","format_","format","overlaps_","overlaps","url_","url","loader","strategy_","strategy","useSpatialIndex","featuresRtree_","loadedExtentsRtree_","loadingExtentsCount_","nullGeometryFeatures_","idIndex_","uidIndex_","featureChangeKeys_","featuresCollection_","collection","Array","isArray","getArray","addFeaturesInternal","bindFeaturesCollection_","addFeature","addFeatureInternal","changed","featureKey","addToIndex_","remove","setupChangeEvents_","geometry","getGeometry","extent","getExtent","insert","dispatchEvent","ADDFEATURE","CHANGE","handleFeatureChange_","PROPERTYCHANGE","valid","id","getId","toString","addFeatures","extents","newFeatures","geometryFeatures","i","length","push","load","hasListener","modifyingCollection","addEventListener","evt","REMOVEFEATURE","ADD","element","REMOVE","removeFeature","clear","fast","featureId","keys","forEach","removeAndIgnoreReturn","removeFeatureInternal","clearEvent","CLEAR","forEachFeature","callback","forEachFeatureAtCoordinateDirect","coordinate","forEachFeatureInExtent","intersectsCoordinate","forEachInExtent","forEachFeatureIntersectingExtent","intersectsExtent","result","getFeaturesCollection","getFeatures","slice","getAll","Object","values","getFeaturesAtCoordinate","getFeaturesInExtent","multiWorld","canWrapX","getWrapX","getInExtent","concat","map","anExtent","getClosestFeatureToCoordinate","filter","x","y","closestFeature","closestPoint","NaN","minSquaredDistance","Infinity","previousMinSquaredDistance","closestPointXY","minDistance","Math","sqrt","getFeatureById","getFeatureByUid","uid","getFormat","getOverlaps","getUrl","event","target","update","sid","removeFromIdIndex_","CHANGEFEATURE","hasFeature","getLength","loadFeatures","resolution","loadedExtentsRtree","extentsToLoad","ii","extentToLoad","alreadyLoaded","object","FEATURESLOADSTART","call","FEATURESLOADEND","FEATURESLOADERROR","loading","refresh","removeLoadedExtent","obj","featureChangeKeys","removed","setLoader","setUrl"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/source/Vector.js"],"sourcesContent":["/**\n * @module ol/source/Vector\n */\n\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport RBush from '../structs/RBush.js';\nimport Source from './Source.js';\nimport VectorEventType from './VectorEventType.js';\nimport {TRUE, VOID} from '../functions.js';\nimport {all as allStrategy} from '../loadingstrategy.js';\nimport {assert} from '../asserts.js';\nimport {containsExtent, equals, wrapAndSliceX} from '../extent.js';\nimport {extend} from '../array.js';\nimport {getUid} from '../util.js';\nimport {isEmpty} from '../obj.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {xhr} from '../featureloader.js';\n\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number, import(\"../proj/Projection.js\").default): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector~VectorSource} instances are instances of this\n * type.\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\n */\nexport class VectorSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Feature.js\").default<Geometry>} [feature] Feature.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} [features] Features.\n   */\n  constructor(type, feature, features) {\n    super(type);\n\n    /**\n     * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.\n     * @type {import(\"../Feature.js\").default<Geometry>|undefined}\n     * @api\n     */\n    this.feature = feature;\n\n    /**\n     * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.\n     * @type {Array<import(\"../Feature.js\").default<Geometry>>|undefined}\n     * @api\n     */\n    this.features = features;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./VectorEventType\").VectorSourceEventTypes, VectorSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./VectorEventType\").VectorSourceEventTypes, Return>} VectorSourceOnSignature\n */\n\n/**\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default<Geometry>>|Collection<import(\"../Feature.js\").default<Geometry>>} [features]\n * Features. If provided as {@link module:ol/Collection~Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events\n * will only fire if the `success` and `failure` callbacks are used.\n *\n * Example:\n *\n * ```js\n * import Vector from 'ol/source/Vector.js';\n * import GeoJSON from 'ol/format/GeoJSON.js';\n * import {bbox} from 'ol/loadingstrategy.js';\n *\n * const vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection, success, failure) {\n *      const proj = projection.getCode();\n *      const url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      const xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      const onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *        failure();\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          const features = vectorSource.getFormat().readFeatures(xhr.responseText);\n *          vectorSource.addFeatures(features);\n *          success(features);\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox,\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy.all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader.xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy.all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection~Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires VectorSourceEvent\n * @api\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\n */\nclass VectorSource extends Source {\n  /**\n   * @param {Options<Geometry>} [options] Vector source options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    super({\n      attributions: options.attributions,\n      interpolate: true,\n      projection: undefined,\n      state: 'ready',\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    });\n\n    /***\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {VectorSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader}\n     */\n    this.loader_ = VOID;\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|undefined}\n     */\n    this.format_ = options.format;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\n\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n    this.url_ = options.url;\n\n    if (options.loader !== undefined) {\n      this.loader_ = options.loader;\n    } else if (this.url_ !== undefined) {\n      assert(this.format_, '`format` must be set when `url` is set');\n      // create a XHR feature loader for \"url\" and \"format\"\n      this.loader_ = xhr(\n        this.url_,\n        /** @type {import(\"../format/Feature.js\").default} */ (this.format_)\n      );\n    }\n\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n    this.strategy_ =\n      options.strategy !== undefined ? options.strategy : allStrategy;\n\n    const useSpatialIndex =\n      options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n\n    /**\n     * @private\n     * @type {RBush<import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n    this.loadedExtentsRtree_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.loadingExtentsCount_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.nullGeometryFeatures_ = {};\n\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.idIndex_ = {};\n\n    /**\n     * A lookup of features by uid (using getUid(feature)).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.uidIndex_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    this.featureChangeKeys_ = {};\n\n    /**\n     * @private\n     * @type {Collection<import(\"../Feature.js\").default<Geometry>>|null}\n     */\n    this.featuresCollection_ = null;\n\n    /** @type {Collection<import(\"../Feature.js\").default<Geometry>>} */\n    let collection;\n    /** @type {Array<import(\"../Feature.js\").default<Geometry>>} */\n    let features;\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n    if (features !== undefined) {\n      this.addFeaturesInternal(features);\n    }\n    if (collection !== undefined) {\n      this.bindFeaturesCollection_(collection);\n    }\n  }\n\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * Note: this also applies if an {@link module:ol/Collection~Collection} is used for features,\n   * meaning that if a feature with a duplicate id is added in the collection, it will\n   * be removed from it right away.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to add.\n   * @api\n   */\n  addFeature(feature) {\n    this.addFeatureInternal(feature);\n    this.changed();\n  }\n\n  /**\n   * Add a feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @protected\n   */\n  addFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n\n    if (!this.addToIndex_(featureKey, feature)) {\n      if (this.featuresCollection_) {\n        this.featuresCollection_.remove(feature);\n      }\n      return;\n    }\n\n    this.setupChangeEvents_(featureKey, feature);\n\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      const extent = geometry.getExtent();\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.ADDFEATURE, feature)\n    );\n  }\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @private\n   */\n  setupChangeEvents_(featureKey, feature) {\n    this.featureChangeKeys_[featureKey] = [\n      listen(feature, EventType.CHANGE, this.handleFeatureChange_, this),\n      listen(\n        feature,\n        ObjectEventType.PROPERTYCHANGE,\n        this.handleFeatureChange_,\n        this\n      ),\n    ];\n  }\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */\n  addToIndex_(featureKey, feature) {\n    let valid = true;\n    const id = feature.getId();\n    if (id !== undefined) {\n      if (!(id.toString() in this.idIndex_)) {\n        this.idIndex_[id.toString()] = feature;\n      } else {\n        valid = false;\n      }\n    }\n    if (valid) {\n      assert(\n        !(featureKey in this.uidIndex_),\n        'The passed `feature` was already added to the source'\n      );\n      this.uidIndex_[featureKey] = feature;\n    }\n    return valid;\n  }\n\n  /**\n   * Add a batch of features to the source.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features to add.\n   * @api\n   */\n  addFeatures(features) {\n    this.addFeaturesInternal(features);\n    this.changed();\n  }\n\n  /**\n   * Add features without firing a `change` event.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features.\n   * @protected\n   */\n  addFeaturesInternal(features) {\n    const extents = [];\n    const newFeatures = [];\n    const geometryFeatures = [];\n\n    for (let i = 0, length = features.length; i < length; i++) {\n      const feature = features[i];\n      const featureKey = getUid(feature);\n      if (this.addToIndex_(featureKey, feature)) {\n        newFeatures.push(feature);\n      }\n    }\n\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\n      const feature = newFeatures[i];\n      const featureKey = getUid(feature);\n      this.setupChangeEvents_(featureKey, feature);\n\n      const geometry = feature.getGeometry();\n      if (geometry) {\n        const extent = geometry.getExtent();\n        extents.push(extent);\n        geometryFeatures.push(feature);\n      } else {\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.load(extents, geometryFeatures);\n    }\n\n    if (this.hasListener(VectorEventType.ADDFEATURE)) {\n      for (let i = 0, length = newFeatures.length; i < length; i++) {\n        this.dispatchEvent(\n          new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i])\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {!Collection<import(\"../Feature.js\").default<Geometry>>} collection Collection.\n   * @private\n   */\n  bindFeaturesCollection_(collection) {\n    let modifyingCollection = false;\n    this.addEventListener(\n      VectorEventType.ADDFEATURE,\n      /**\n       * @param {VectorSourceEvent<Geometry>} evt The vector source event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.push(evt.feature);\n          modifyingCollection = false;\n        }\n      }\n    );\n    this.addEventListener(\n      VectorEventType.REMOVEFEATURE,\n      /**\n       * @param {VectorSourceEvent<Geometry>} evt The vector source event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.remove(evt.feature);\n          modifyingCollection = false;\n        }\n      }\n    );\n    collection.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent<import(\"../Feature.js\").default<Geometry>>} evt The collection event\n       */\n      (evt) => {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.addFeature(evt.element);\n          modifyingCollection = false;\n        }\n      }\n    );\n    collection.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent<import(\"../Feature.js\").default<Geometry>>} evt The collection event\n       */\n      (evt) => {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.removeFeature(evt.element);\n          modifyingCollection = false;\n        }\n      }\n    );\n    this.featuresCollection_ = collection;\n  }\n\n  /**\n   * Remove all features from the source.\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature} events.\n   * @api\n   */\n  clear(fast) {\n    if (fast) {\n      for (const featureId in this.featureChangeKeys_) {\n        const keys = this.featureChangeKeys_[featureId];\n        keys.forEach(unlistenByKey);\n      }\n      if (!this.featuresCollection_) {\n        this.featureChangeKeys_ = {};\n        this.idIndex_ = {};\n        this.uidIndex_ = {};\n      }\n    } else {\n      if (this.featuresRtree_) {\n        const removeAndIgnoreReturn = (feature) => {\n          this.removeFeatureInternal(feature);\n        };\n        this.featuresRtree_.forEach(removeAndIgnoreReturn);\n        for (const id in this.nullGeometryFeatures_) {\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n      }\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.clear();\n    }\n\n    if (this.featuresRtree_) {\n      this.featuresRtree_.clear();\n    }\n    this.nullGeometryFeatures_ = {};\n\n    const clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n    this.dispatchEvent(clearEvent);\n    this.changed();\n  }\n\n  /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeature(callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEach(callback);\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n  /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n  forEachFeatureAtCoordinateDirect(coordinate, callback) {\n    const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n    return this.forEachFeatureInExtent(extent, function (feature) {\n      const geometry = feature.getGeometry();\n      if (geometry.intersectsCoordinate(coordinate)) {\n        return callback(feature);\n      }\n      return undefined;\n    });\n  }\n\n  /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureInExtent(extent, callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEachInExtent(extent, callback);\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n  /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureIntersectingExtent(extent, callback) {\n    return this.forEachFeatureInExtent(\n      extent,\n      /**\n       * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n       * @return {T|undefined} The return value from the last call to the callback.\n       */\n      function (feature) {\n        const geometry = feature.getGeometry();\n        if (geometry.intersectsExtent(extent)) {\n          const result = callback(feature);\n          if (result) {\n            return result;\n          }\n        }\n      }\n    );\n  }\n\n  /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection~Collection} as `features`.\n   * @return {Collection<import(\"../Feature.js\").default<Geometry>>|null} The collection of features.\n   * @api\n   */\n  getFeaturesCollection() {\n    return this.featuresCollection_;\n  }\n\n  /**\n   * Get a snapshot of the features currently on the source in random order. The returned array\n   * is a copy, the features are references to the features in the source.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  getFeatures() {\n    let features;\n    if (this.featuresCollection_) {\n      features = this.featuresCollection_.getArray().slice(0);\n    } else if (this.featuresRtree_) {\n      features = this.featuresRtree_.getAll();\n      if (!isEmpty(this.nullGeometryFeatures_)) {\n        extend(features, Object.values(this.nullGeometryFeatures_));\n      }\n    }\n    return /** @type {Array<import(\"../Feature.js\").default<Geometry>>} */ (\n      features\n    );\n  }\n\n  /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  getFeaturesAtCoordinate(coordinate) {\n    const features = [];\n    this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\n      features.push(feature);\n    });\n    return features;\n  }\n\n  /**\n   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * When `useSpatialIndex` is set to false, this method will return all\n   * features.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../proj/Projection.js\").default} [projection] Include features\n   * where `extent` exceeds the x-axis bounds of `projection` and wraps around the world.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  getFeaturesInExtent(extent, projection) {\n    if (this.featuresRtree_) {\n      const multiWorld = projection && projection.canWrapX() && this.getWrapX();\n\n      if (!multiWorld) {\n        return this.featuresRtree_.getInExtent(extent);\n      }\n\n      const extents = wrapAndSliceX(extent, projection);\n\n      return [].concat(\n        ...extents.map((anExtent) => this.featuresRtree_.getInExtent(anExtent))\n      );\n    }\n    if (this.featuresCollection_) {\n      return this.featuresCollection_.getArray().slice(0);\n    }\n    return [];\n  }\n\n  /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>):boolean} [filter] Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature~Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {import(\"../Feature.js\").default<Geometry>} Closest feature.\n   * @api\n   */\n  getClosestFeatureToCoordinate(coordinate, filter) {\n    // Find the closest feature using branch and bound.  We start searching an\n    // infinite extent, and find the distance from the first feature found.  This\n    // becomes the closest feature.  We then compute a smaller extent which any\n    // closer feature must intersect.  We continue searching with this smaller\n    // extent, trying to find a closer feature.  Every time we find a closer\n    // feature, we update the extent being searched so that any even closer\n    // feature must intersect it.  We continue until we run out of features.\n    const x = coordinate[0];\n    const y = coordinate[1];\n    let closestFeature = null;\n    const closestPoint = [NaN, NaN];\n    let minSquaredDistance = Infinity;\n    const extent = [-Infinity, -Infinity, Infinity, Infinity];\n    filter = filter ? filter : TRUE;\n    this.featuresRtree_.forEachInExtent(\n      extent,\n      /**\n       * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n       */\n      function (feature) {\n        if (filter(feature)) {\n          const geometry = feature.getGeometry();\n          const previousMinSquaredDistance = minSquaredDistance;\n          minSquaredDistance = geometry.closestPointXY(\n            x,\n            y,\n            closestPoint,\n            minSquaredDistance\n          );\n          if (minSquaredDistance < previousMinSquaredDistance) {\n            closestFeature = feature;\n            // This is sneaky.  Reduce the extent that it is currently being\n            // searched while the R-Tree traversal using this same extent object\n            // is still in progress.  This is safe because the new extent is\n            // strictly contained by the old extent.\n            const minDistance = Math.sqrt(minSquaredDistance);\n            extent[0] = x - minDistance;\n            extent[1] = y - minDistance;\n            extent[2] = x + minDistance;\n            extent[3] = y + minDistance;\n          }\n        }\n      }\n    );\n    return closestFeature;\n  }\n\n  /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent} [extent] Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent(extent) {\n    return this.featuresRtree_.getExtent(extent);\n  }\n\n  /**\n   * Get a feature by its identifier (the value returned by feature.getId()).\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>|null} The feature (or `null` if not found).\n   * @api\n   */\n  getFeatureById(id) {\n    const feature = this.idIndex_[id.toString()];\n    return feature !== undefined ? feature : null;\n  }\n\n  /**\n   * Get a feature by its internal unique identifier (using `getUid`).\n   *\n   * @param {string} uid Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>|null} The feature (or `null` if not found).\n   */\n  getFeatureByUid(uid) {\n    const feature = this.uidIndex_[uid];\n    return feature !== undefined ? feature : null;\n  }\n\n  /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  getOverlaps() {\n    return this.overlaps_;\n  }\n\n  /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  handleFeatureChange_(event) {\n    const feature = /** @type {import(\"../Feature.js\").default<Geometry>} */ (\n      event.target\n    );\n    const featureKey = getUid(feature);\n    const geometry = feature.getGeometry();\n    if (!geometry) {\n      if (!(featureKey in this.nullGeometryFeatures_)) {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    } else {\n      const extent = geometry.getExtent();\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.update(extent, feature);\n        }\n      }\n    }\n    const id = feature.getId();\n    if (id !== undefined) {\n      const sid = id.toString();\n      if (this.idIndex_[sid] !== feature) {\n        this.removeFromIdIndex_(feature);\n        this.idIndex_[sid] = feature;\n      }\n    } else {\n      this.removeFromIdIndex_(feature);\n      this.uidIndex_[featureKey] = feature;\n    }\n    this.changed();\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature)\n    );\n  }\n\n  /**\n   * Returns true if the feature is contained within the source.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */\n  hasFeature(feature) {\n    const id = feature.getId();\n    if (id !== undefined) {\n      return id in this.idIndex_;\n    }\n    return getUid(feature) in this.uidIndex_;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    if (this.featuresRtree_) {\n      return (\n        this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_)\n      );\n    }\n    if (this.featuresCollection_) {\n      return this.featuresCollection_.getLength() === 0;\n    }\n    return true;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  loadFeatures(extent, resolution, projection) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    const extentsToLoad = this.strategy_(extent, resolution, projection);\n    for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {\n      const extentToLoad = extentsToLoad[i];\n      const alreadyLoaded = loadedExtentsRtree.forEachInExtent(\n        extentToLoad,\n        /**\n         * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n         * @return {boolean} Contains.\n         */\n        function (object) {\n          return containsExtent(object.extent, extentToLoad);\n        }\n      );\n      if (!alreadyLoaded) {\n        ++this.loadingExtentsCount_;\n        this.dispatchEvent(\n          new VectorSourceEvent(VectorEventType.FEATURESLOADSTART)\n        );\n        this.loader_.call(\n          this,\n          extentToLoad,\n          resolution,\n          projection,\n          (features) => {\n            --this.loadingExtentsCount_;\n            this.dispatchEvent(\n              new VectorSourceEvent(\n                VectorEventType.FEATURESLOADEND,\n                undefined,\n                features\n              )\n            );\n          },\n          () => {\n            --this.loadingExtentsCount_;\n            this.dispatchEvent(\n              new VectorSourceEvent(VectorEventType.FEATURESLOADERROR)\n            );\n          }\n        );\n        loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});\n      }\n    }\n    this.loading =\n      this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;\n  }\n\n  refresh() {\n    this.clear(true);\n    this.loadedExtentsRtree_.clear();\n    super.refresh();\n  }\n\n  /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  removeLoadedExtent(extent) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    let obj;\n    loadedExtentsRtree.forEachInExtent(extent, function (object) {\n      if (equals(object.extent, extent)) {\n        obj = object;\n        return true;\n      }\n    });\n    if (obj) {\n      loadedExtentsRtree.remove(obj);\n    }\n  }\n\n  /**\n   * Remove a single feature from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to remove.\n   * @api\n   */\n  removeFeature(feature) {\n    if (!feature) {\n      return;\n    }\n    const featureKey = getUid(feature);\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n    }\n    const result = this.removeFeatureInternal(feature);\n    if (result) {\n      this.changed();\n    }\n  }\n\n  /**\n   * Remove feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @return {import(\"../Feature.js\").default<Geometry>|undefined} The removed feature\n   *     (or undefined if the feature was not found).\n   * @protected\n   */\n  removeFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n    const featureChangeKeys = this.featureChangeKeys_[featureKey];\n    if (!featureChangeKeys) {\n      return;\n    }\n    featureChangeKeys.forEach(unlistenByKey);\n    delete this.featureChangeKeys_[featureKey];\n    const id = feature.getId();\n    if (id !== undefined) {\n      delete this.idIndex_[id.toString()];\n    }\n    delete this.uidIndex_[featureKey];\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature)\n    );\n    return feature;\n  }\n\n  /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */\n  removeFromIdIndex_(feature) {\n    let removed = false;\n    for (const id in this.idIndex_) {\n      if (this.idIndex_[id] === feature) {\n        delete this.idIndex_[id];\n        removed = true;\n        break;\n      }\n    }\n    return removed;\n  }\n\n  /**\n   * Set the new loader of the source. The next render cycle will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n   * @api\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n\n  /**\n   * Points the source to a new url. The next render cycle will use the new url.\n   * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\n   * @api\n   */\n  setUrl(url) {\n    assert(this.format_, '`format` must be set when `url` is set');\n    this.url_ = url;\n    this.setLoader(xhr(url, this.format_));\n  }\n}\n\nexport default VectorSource;\n"],"mappings":";AAAA;AACA;AACA;;AAEA,OAAOA,UAAU,MAAM,kBAAkB;AACzC,OAAOC,mBAAmB,MAAM,2BAA2B;AAC3D,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,eAAe,MAAM,uBAAuB;AACnD,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,MAAM,MAAM,aAAa;AAChC,OAAOC,eAAe,MAAM,sBAAsB;AAClD,SAAQC,IAAI,EAAEC,IAAI,QAAO,iBAAiB;AAC1C,SAAQC,GAAG,IAAIC,WAAW,QAAO,uBAAuB;AACxD,SAAQC,MAAM,QAAO,eAAe;AACpC,SAAQC,cAAc,EAAEC,MAAM,EAAEC,aAAa,QAAO,cAAc;AAClE,SAAQC,MAAM,QAAO,aAAa;AAClC,SAAQC,MAAM,QAAO,YAAY;AACjC,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,MAAM,EAAEC,aAAa,QAAO,cAAc;AAClD,SAAQC,GAAG,QAAO,qBAAqB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,SAASpB,KAAK,CAAC;EAC3C;AACF;AACA;AACA;AACA;EACEqB,WAAWA,CAACC,IAAI,EAAEC,OAAO,EAAEC,QAAQ,EAAE;IACnC,KAAK,CAACF,IAAI,CAAC;;IAEX;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAGA,OAAO;;IAEtB;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC1B;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,SAASrB,MAAM,CAAC;EAChC;AACF;AACA;EACEiB,WAAWA,CAACK,OAAO,EAAE;IACnBA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IAEvB,KAAK,CAAC;MACJC,YAAY,EAAED,OAAO,CAACC,YAAY;MAClCC,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAEC,SAAS;MACrBC,KAAK,EAAE,OAAO;MACdC,KAAK,EAAEN,OAAO,CAACM,KAAK,KAAKF,SAAS,GAAGJ,OAAO,CAACM,KAAK,GAAG;IACvD,CAAC,CAAC;;IAEF;AACJ;AACA;IACI,IAAI,CAACC,EAAE;;IAEP;AACJ;AACA;IACI,IAAI,CAACC,IAAI;;IAET;AACJ;AACA;IACI,IAAI,CAACC,EAAE;;IAEP;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAG7B,IAAI;;IAEnB;AACJ;AACA;AACA;IACI,IAAI,CAAC8B,OAAO,GAAGX,OAAO,CAACY,MAAM;;IAE7B;AACJ;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAGb,OAAO,CAACc,QAAQ,KAAKV,SAAS,GAAG,IAAI,GAAGJ,OAAO,CAACc,QAAQ;;IAEzE;AACJ;AACA;AACA;IACI,IAAI,CAACC,IAAI,GAAGf,OAAO,CAACgB,GAAG;IAEvB,IAAIhB,OAAO,CAACiB,MAAM,KAAKb,SAAS,EAAE;MAChC,IAAI,CAACM,OAAO,GAAGV,OAAO,CAACiB,MAAM;IAC/B,CAAC,MAAM,IAAI,IAAI,CAACF,IAAI,KAAKX,SAAS,EAAE;MAClCpB,MAAM,CAAC,IAAI,CAAC2B,OAAO,EAAE,wCAAwC,CAAC;MAC9D;MACA,IAAI,CAACD,OAAO,GAAGjB,GAAG,CAChB,IAAI,CAACsB,IAAI,EACT,qDAAuD,IAAI,CAACJ,OAC9D,CAAC;IACH;;IAEA;AACJ;AACA;AACA;IACI,IAAI,CAACO,SAAS,GACZlB,OAAO,CAACmB,QAAQ,KAAKf,SAAS,GAAGJ,OAAO,CAACmB,QAAQ,GAAGpC,WAAW;IAEjE,MAAMqC,eAAe,GACnBpB,OAAO,CAACoB,eAAe,KAAKhB,SAAS,GAAGJ,OAAO,CAACoB,eAAe,GAAG,IAAI;;IAExE;AACJ;AACA;AACA;IACI,IAAI,CAACC,cAAc,GAAGD,eAAe,GAAG,IAAI3C,KAAK,CAAC,CAAC,GAAG,IAAI;;IAE1D;AACJ;AACA;AACA;IACI,IAAI,CAAC6C,mBAAmB,GAAG,IAAI7C,KAAK,CAAC,CAAC;;IAEtC;AACJ;AACA;AACA;IACI,IAAI,CAAC8C,oBAAoB,GAAG,CAAC;;IAE7B;AACJ;AACA;AACA;IACI,IAAI,CAACC,qBAAqB,GAAG,CAAC,CAAC;;IAE/B;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;;IAElB;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;;IAEnB;AACJ;AACA;AACA;IACI,IAAI,CAACC,kBAAkB,GAAG,CAAC,CAAC;;IAE5B;AACJ;AACA;AACA;IACI,IAAI,CAACC,mBAAmB,GAAG,IAAI;;IAE/B;IACA,IAAIC,UAAU;IACd;IACA,IAAI/B,QAAQ;IACZ,IAAIgC,KAAK,CAACC,OAAO,CAAC/B,OAAO,CAACF,QAAQ,CAAC,EAAE;MACnCA,QAAQ,GAAGE,OAAO,CAACF,QAAQ;IAC7B,CAAC,MAAM,IAAIE,OAAO,CAACF,QAAQ,EAAE;MAC3B+B,UAAU,GAAG7B,OAAO,CAACF,QAAQ;MAC7BA,QAAQ,GAAG+B,UAAU,CAACG,QAAQ,CAAC,CAAC;IAClC;IACA,IAAI,CAACZ,eAAe,IAAIS,UAAU,KAAKzB,SAAS,EAAE;MAChDyB,UAAU,GAAG,IAAIzD,UAAU,CAAC0B,QAAQ,CAAC;IACvC;IACA,IAAIA,QAAQ,KAAKM,SAAS,EAAE;MAC1B,IAAI,CAAC6B,mBAAmB,CAACnC,QAAQ,CAAC;IACpC;IACA,IAAI+B,UAAU,KAAKzB,SAAS,EAAE;MAC5B,IAAI,CAAC8B,uBAAuB,CAACL,UAAU,CAAC;IAC1C;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,UAAUA,CAACtC,OAAO,EAAE;IAClB,IAAI,CAACuC,kBAAkB,CAACvC,OAAO,CAAC;IAChC,IAAI,CAACwC,OAAO,CAAC,CAAC;EAChB;;EAEA;AACF;AACA;AACA;AACA;EACED,kBAAkBA,CAACvC,OAAO,EAAE;IAC1B,MAAMyC,UAAU,GAAGjD,MAAM,CAACQ,OAAO,CAAC;IAElC,IAAI,CAAC,IAAI,CAAC0C,WAAW,CAACD,UAAU,EAAEzC,OAAO,CAAC,EAAE;MAC1C,IAAI,IAAI,CAAC+B,mBAAmB,EAAE;QAC5B,IAAI,CAACA,mBAAmB,CAACY,MAAM,CAAC3C,OAAO,CAAC;MAC1C;MACA;IACF;IAEA,IAAI,CAAC4C,kBAAkB,CAACH,UAAU,EAAEzC,OAAO,CAAC;IAE5C,MAAM6C,QAAQ,GAAG7C,OAAO,CAAC8C,WAAW,CAAC,CAAC;IACtC,IAAID,QAAQ,EAAE;MACZ,MAAME,MAAM,GAAGF,QAAQ,CAACG,SAAS,CAAC,CAAC;MACnC,IAAI,IAAI,CAACxB,cAAc,EAAE;QACvB,IAAI,CAACA,cAAc,CAACyB,MAAM,CAACF,MAAM,EAAE/C,OAAO,CAAC;MAC7C;IACF,CAAC,MAAM;MACL,IAAI,CAAC2B,qBAAqB,CAACc,UAAU,CAAC,GAAGzC,OAAO;IAClD;IAEA,IAAI,CAACkD,aAAa,CAChB,IAAIrD,iBAAiB,CAACf,eAAe,CAACqE,UAAU,EAAEnD,OAAO,CAC3D,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;EACE4C,kBAAkBA,CAACH,UAAU,EAAEzC,OAAO,EAAE;IACtC,IAAI,CAAC8B,kBAAkB,CAACW,UAAU,CAAC,GAAG,CACpC/C,MAAM,CAACM,OAAO,EAAEtB,SAAS,CAAC0E,MAAM,EAAE,IAAI,CAACC,oBAAoB,EAAE,IAAI,CAAC,EAClE3D,MAAM,CACJM,OAAO,EACPrB,eAAe,CAAC2E,cAAc,EAC9B,IAAI,CAACD,oBAAoB,EACzB,IACF,CAAC,CACF;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEX,WAAWA,CAACD,UAAU,EAAEzC,OAAO,EAAE;IAC/B,IAAIuD,KAAK,GAAG,IAAI;IAChB,MAAMC,EAAE,GAAGxD,OAAO,CAACyD,KAAK,CAAC,CAAC;IAC1B,IAAID,EAAE,KAAKjD,SAAS,EAAE;MACpB,IAAI,EAAEiD,EAAE,CAACE,QAAQ,CAAC,CAAC,IAAI,IAAI,CAAC9B,QAAQ,CAAC,EAAE;QACrC,IAAI,CAACA,QAAQ,CAAC4B,EAAE,CAACE,QAAQ,CAAC,CAAC,CAAC,GAAG1D,OAAO;MACxC,CAAC,MAAM;QACLuD,KAAK,GAAG,KAAK;MACf;IACF;IACA,IAAIA,KAAK,EAAE;MACTpE,MAAM,CACJ,EAAEsD,UAAU,IAAI,IAAI,CAACZ,SAAS,CAAC,EAC/B,sDACF,CAAC;MACD,IAAI,CAACA,SAAS,CAACY,UAAU,CAAC,GAAGzC,OAAO;IACtC;IACA,OAAOuD,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;EACEI,WAAWA,CAAC1D,QAAQ,EAAE;IACpB,IAAI,CAACmC,mBAAmB,CAACnC,QAAQ,CAAC;IAClC,IAAI,CAACuC,OAAO,CAAC,CAAC;EAChB;;EAEA;AACF;AACA;AACA;AACA;EACEJ,mBAAmBA,CAACnC,QAAQ,EAAE;IAC5B,MAAM2D,OAAO,GAAG,EAAE;IAClB,MAAMC,WAAW,GAAG,EAAE;IACtB,MAAMC,gBAAgB,GAAG,EAAE;IAE3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,MAAM,GAAG/D,QAAQ,CAAC+D,MAAM,EAAED,CAAC,GAAGC,MAAM,EAAED,CAAC,EAAE,EAAE;MACzD,MAAM/D,OAAO,GAAGC,QAAQ,CAAC8D,CAAC,CAAC;MAC3B,MAAMtB,UAAU,GAAGjD,MAAM,CAACQ,OAAO,CAAC;MAClC,IAAI,IAAI,CAAC0C,WAAW,CAACD,UAAU,EAAEzC,OAAO,CAAC,EAAE;QACzC6D,WAAW,CAACI,IAAI,CAACjE,OAAO,CAAC;MAC3B;IACF;IAEA,KAAK,IAAI+D,CAAC,GAAG,CAAC,EAAEC,MAAM,GAAGH,WAAW,CAACG,MAAM,EAAED,CAAC,GAAGC,MAAM,EAAED,CAAC,EAAE,EAAE;MAC5D,MAAM/D,OAAO,GAAG6D,WAAW,CAACE,CAAC,CAAC;MAC9B,MAAMtB,UAAU,GAAGjD,MAAM,CAACQ,OAAO,CAAC;MAClC,IAAI,CAAC4C,kBAAkB,CAACH,UAAU,EAAEzC,OAAO,CAAC;MAE5C,MAAM6C,QAAQ,GAAG7C,OAAO,CAAC8C,WAAW,CAAC,CAAC;MACtC,IAAID,QAAQ,EAAE;QACZ,MAAME,MAAM,GAAGF,QAAQ,CAACG,SAAS,CAAC,CAAC;QACnCY,OAAO,CAACK,IAAI,CAAClB,MAAM,CAAC;QACpBe,gBAAgB,CAACG,IAAI,CAACjE,OAAO,CAAC;MAChC,CAAC,MAAM;QACL,IAAI,CAAC2B,qBAAqB,CAACc,UAAU,CAAC,GAAGzC,OAAO;MAClD;IACF;IACA,IAAI,IAAI,CAACwB,cAAc,EAAE;MACvB,IAAI,CAACA,cAAc,CAAC0C,IAAI,CAACN,OAAO,EAAEE,gBAAgB,CAAC;IACrD;IAEA,IAAI,IAAI,CAACK,WAAW,CAACrF,eAAe,CAACqE,UAAU,CAAC,EAAE;MAChD,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEC,MAAM,GAAGH,WAAW,CAACG,MAAM,EAAED,CAAC,GAAGC,MAAM,EAAED,CAAC,EAAE,EAAE;QAC5D,IAAI,CAACb,aAAa,CAChB,IAAIrD,iBAAiB,CAACf,eAAe,CAACqE,UAAU,EAAEU,WAAW,CAACE,CAAC,CAAC,CAClE,CAAC;MACH;IACF;EACF;;EAEA;AACF;AACA;AACA;EACE1B,uBAAuBA,CAACL,UAAU,EAAE;IAClC,IAAIoC,mBAAmB,GAAG,KAAK;IAC/B,IAAI,CAACC,gBAAgB,CACnBvF,eAAe,CAACqE,UAAU;IAC1B;AACN;AACA;IACM,UAAUmB,GAAG,EAAE;MACb,IAAI,CAACF,mBAAmB,EAAE;QACxBA,mBAAmB,GAAG,IAAI;QAC1BpC,UAAU,CAACiC,IAAI,CAACK,GAAG,CAACtE,OAAO,CAAC;QAC5BoE,mBAAmB,GAAG,KAAK;MAC7B;IACF,CACF,CAAC;IACD,IAAI,CAACC,gBAAgB,CACnBvF,eAAe,CAACyF,aAAa;IAC7B;AACN;AACA;IACM,UAAUD,GAAG,EAAE;MACb,IAAI,CAACF,mBAAmB,EAAE;QACxBA,mBAAmB,GAAG,IAAI;QAC1BpC,UAAU,CAACW,MAAM,CAAC2B,GAAG,CAACtE,OAAO,CAAC;QAC9BoE,mBAAmB,GAAG,KAAK;MAC7B;IACF,CACF,CAAC;IACDpC,UAAU,CAACqC,gBAAgB,CACzB7F,mBAAmB,CAACgG,GAAG;IACvB;AACN;AACA;IACOF,GAAG,IAAK;MACP,IAAI,CAACF,mBAAmB,EAAE;QACxBA,mBAAmB,GAAG,IAAI;QAC1B,IAAI,CAAC9B,UAAU,CAACgC,GAAG,CAACG,OAAO,CAAC;QAC5BL,mBAAmB,GAAG,KAAK;MAC7B;IACF,CACF,CAAC;IACDpC,UAAU,CAACqC,gBAAgB,CACzB7F,mBAAmB,CAACkG,MAAM;IAC1B;AACN;AACA;IACOJ,GAAG,IAAK;MACP,IAAI,CAACF,mBAAmB,EAAE;QACxBA,mBAAmB,GAAG,IAAI;QAC1B,IAAI,CAACO,aAAa,CAACL,GAAG,CAACG,OAAO,CAAC;QAC/BL,mBAAmB,GAAG,KAAK;MAC7B;IACF,CACF,CAAC;IACD,IAAI,CAACrC,mBAAmB,GAAGC,UAAU;EACvC;;EAEA;AACF;AACA;AACA;AACA;EACE4C,KAAKA,CAACC,IAAI,EAAE;IACV,IAAIA,IAAI,EAAE;MACR,KAAK,MAAMC,SAAS,IAAI,IAAI,CAAChD,kBAAkB,EAAE;QAC/C,MAAMiD,IAAI,GAAG,IAAI,CAACjD,kBAAkB,CAACgD,SAAS,CAAC;QAC/CC,IAAI,CAACC,OAAO,CAACrF,aAAa,CAAC;MAC7B;MACA,IAAI,CAAC,IAAI,CAACoC,mBAAmB,EAAE;QAC7B,IAAI,CAACD,kBAAkB,GAAG,CAAC,CAAC;QAC5B,IAAI,CAACF,QAAQ,GAAG,CAAC,CAAC;QAClB,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;MACrB;IACF,CAAC,MAAM;MACL,IAAI,IAAI,CAACL,cAAc,EAAE;QACvB,MAAMyD,qBAAqB,GAAIjF,OAAO,IAAK;UACzC,IAAI,CAACkF,qBAAqB,CAAClF,OAAO,CAAC;QACrC,CAAC;QACD,IAAI,CAACwB,cAAc,CAACwD,OAAO,CAACC,qBAAqB,CAAC;QAClD,KAAK,MAAMzB,EAAE,IAAI,IAAI,CAAC7B,qBAAqB,EAAE;UAC3C,IAAI,CAACuD,qBAAqB,CAAC,IAAI,CAACvD,qBAAqB,CAAC6B,EAAE,CAAC,CAAC;QAC5D;MACF;IACF;IACA,IAAI,IAAI,CAACzB,mBAAmB,EAAE;MAC5B,IAAI,CAACA,mBAAmB,CAAC6C,KAAK,CAAC,CAAC;IAClC;IAEA,IAAI,IAAI,CAACpD,cAAc,EAAE;MACvB,IAAI,CAACA,cAAc,CAACoD,KAAK,CAAC,CAAC;IAC7B;IACA,IAAI,CAACjD,qBAAqB,GAAG,CAAC,CAAC;IAE/B,MAAMwD,UAAU,GAAG,IAAItF,iBAAiB,CAACf,eAAe,CAACsG,KAAK,CAAC;IAC/D,IAAI,CAAClC,aAAa,CAACiC,UAAU,CAAC;IAC9B,IAAI,CAAC3C,OAAO,CAAC,CAAC;EAChB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE6C,cAAcA,CAACC,QAAQ,EAAE;IACvB,IAAI,IAAI,CAAC9D,cAAc,EAAE;MACvB,OAAO,IAAI,CAACA,cAAc,CAACwD,OAAO,CAACM,QAAQ,CAAC;IAC9C;IACA,IAAI,IAAI,CAACvD,mBAAmB,EAAE;MAC5B,IAAI,CAACA,mBAAmB,CAACiD,OAAO,CAACM,QAAQ,CAAC;IAC5C;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,gCAAgCA,CAACC,UAAU,EAAEF,QAAQ,EAAE;IACrD,MAAMvC,MAAM,GAAG,CAACyC,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,CAAC;IAC3E,OAAO,IAAI,CAACC,sBAAsB,CAAC1C,MAAM,EAAE,UAAU/C,OAAO,EAAE;MAC5D,MAAM6C,QAAQ,GAAG7C,OAAO,CAAC8C,WAAW,CAAC,CAAC;MACtC,IAAID,QAAQ,CAAC6C,oBAAoB,CAACF,UAAU,CAAC,EAAE;QAC7C,OAAOF,QAAQ,CAACtF,OAAO,CAAC;MAC1B;MACA,OAAOO,SAAS;IAClB,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEkF,sBAAsBA,CAAC1C,MAAM,EAAEuC,QAAQ,EAAE;IACvC,IAAI,IAAI,CAAC9D,cAAc,EAAE;MACvB,OAAO,IAAI,CAACA,cAAc,CAACmE,eAAe,CAAC5C,MAAM,EAAEuC,QAAQ,CAAC;IAC9D;IACA,IAAI,IAAI,CAACvD,mBAAmB,EAAE;MAC5B,IAAI,CAACA,mBAAmB,CAACiD,OAAO,CAACM,QAAQ,CAAC;IAC5C;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,gCAAgCA,CAAC7C,MAAM,EAAEuC,QAAQ,EAAE;IACjD,OAAO,IAAI,CAACG,sBAAsB,CAChC1C,MAAM;IACN;AACN;AACA;AACA;IACM,UAAU/C,OAAO,EAAE;MACjB,MAAM6C,QAAQ,GAAG7C,OAAO,CAAC8C,WAAW,CAAC,CAAC;MACtC,IAAID,QAAQ,CAACgD,gBAAgB,CAAC9C,MAAM,CAAC,EAAE;QACrC,MAAM+C,MAAM,GAAGR,QAAQ,CAACtF,OAAO,CAAC;QAChC,IAAI8F,MAAM,EAAE;UACV,OAAOA,MAAM;QACf;MACF;IACF,CACF,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,qBAAqBA,CAAA,EAAG;IACtB,OAAO,IAAI,CAAChE,mBAAmB;EACjC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEiE,WAAWA,CAAA,EAAG;IACZ,IAAI/F,QAAQ;IACZ,IAAI,IAAI,CAAC8B,mBAAmB,EAAE;MAC5B9B,QAAQ,GAAG,IAAI,CAAC8B,mBAAmB,CAACI,QAAQ,CAAC,CAAC,CAAC8D,KAAK,CAAC,CAAC,CAAC;IACzD,CAAC,MAAM,IAAI,IAAI,CAACzE,cAAc,EAAE;MAC9BvB,QAAQ,GAAG,IAAI,CAACuB,cAAc,CAAC0E,MAAM,CAAC,CAAC;MACvC,IAAI,CAACzG,OAAO,CAAC,IAAI,CAACkC,qBAAqB,CAAC,EAAE;QACxCpC,MAAM,CAACU,QAAQ,EAAEkG,MAAM,CAACC,MAAM,CAAC,IAAI,CAACzE,qBAAqB,CAAC,CAAC;MAC7D;IACF;IACA,OAAO;MACL1B;IAAQ;EAEZ;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEoG,uBAAuBA,CAACb,UAAU,EAAE;IAClC,MAAMvF,QAAQ,GAAG,EAAE;IACnB,IAAI,CAACsF,gCAAgC,CAACC,UAAU,EAAE,UAAUxF,OAAO,EAAE;MACnEC,QAAQ,CAACgE,IAAI,CAACjE,OAAO,CAAC;IACxB,CAAC,CAAC;IACF,OAAOC,QAAQ;EACjB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEqG,mBAAmBA,CAACvD,MAAM,EAAEzC,UAAU,EAAE;IACtC,IAAI,IAAI,CAACkB,cAAc,EAAE;MACvB,MAAM+E,UAAU,GAAGjG,UAAU,IAAIA,UAAU,CAACkG,QAAQ,CAAC,CAAC,IAAI,IAAI,CAACC,QAAQ,CAAC,CAAC;MAEzE,IAAI,CAACF,UAAU,EAAE;QACf,OAAO,IAAI,CAAC/E,cAAc,CAACkF,WAAW,CAAC3D,MAAM,CAAC;MAChD;MAEA,MAAMa,OAAO,GAAGtE,aAAa,CAACyD,MAAM,EAAEzC,UAAU,CAAC;MAEjD,OAAO,EAAE,CAACqG,MAAM,CACd,GAAG/C,OAAO,CAACgD,GAAG,CAAEC,QAAQ,IAAK,IAAI,CAACrF,cAAc,CAACkF,WAAW,CAACG,QAAQ,CAAC,CACxE,CAAC;IACH;IACA,IAAI,IAAI,CAAC9E,mBAAmB,EAAE;MAC5B,OAAO,IAAI,CAACA,mBAAmB,CAACI,QAAQ,CAAC,CAAC,CAAC8D,KAAK,CAAC,CAAC,CAAC;IACrD;IACA,OAAO,EAAE;EACX;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEa,6BAA6BA,CAACtB,UAAU,EAAEuB,MAAM,EAAE;IAChD;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMC,CAAC,GAAGxB,UAAU,CAAC,CAAC,CAAC;IACvB,MAAMyB,CAAC,GAAGzB,UAAU,CAAC,CAAC,CAAC;IACvB,IAAI0B,cAAc,GAAG,IAAI;IACzB,MAAMC,YAAY,GAAG,CAACC,GAAG,EAAEA,GAAG,CAAC;IAC/B,IAAIC,kBAAkB,GAAGC,QAAQ;IACjC,MAAMvE,MAAM,GAAG,CAAC,CAACuE,QAAQ,EAAE,CAACA,QAAQ,EAAEA,QAAQ,EAAEA,QAAQ,CAAC;IACzDP,MAAM,GAAGA,MAAM,GAAGA,MAAM,GAAGhI,IAAI;IAC/B,IAAI,CAACyC,cAAc,CAACmE,eAAe,CACjC5C,MAAM;IACN;AACN;AACA;IACM,UAAU/C,OAAO,EAAE;MACjB,IAAI+G,MAAM,CAAC/G,OAAO,CAAC,EAAE;QACnB,MAAM6C,QAAQ,GAAG7C,OAAO,CAAC8C,WAAW,CAAC,CAAC;QACtC,MAAMyE,0BAA0B,GAAGF,kBAAkB;QACrDA,kBAAkB,GAAGxE,QAAQ,CAAC2E,cAAc,CAC1CR,CAAC,EACDC,CAAC,EACDE,YAAY,EACZE,kBACF,CAAC;QACD,IAAIA,kBAAkB,GAAGE,0BAA0B,EAAE;UACnDL,cAAc,GAAGlH,OAAO;UACxB;UACA;UACA;UACA;UACA,MAAMyH,WAAW,GAAGC,IAAI,CAACC,IAAI,CAACN,kBAAkB,CAAC;UACjDtE,MAAM,CAAC,CAAC,CAAC,GAAGiE,CAAC,GAAGS,WAAW;UAC3B1E,MAAM,CAAC,CAAC,CAAC,GAAGkE,CAAC,GAAGQ,WAAW;UAC3B1E,MAAM,CAAC,CAAC,CAAC,GAAGiE,CAAC,GAAGS,WAAW;UAC3B1E,MAAM,CAAC,CAAC,CAAC,GAAGkE,CAAC,GAAGQ,WAAW;QAC7B;MACF;IACF,CACF,CAAC;IACD,OAAOP,cAAc;EACvB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACElE,SAASA,CAACD,MAAM,EAAE;IAChB,OAAO,IAAI,CAACvB,cAAc,CAACwB,SAAS,CAACD,MAAM,CAAC;EAC9C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE6E,cAAcA,CAACpE,EAAE,EAAE;IACjB,MAAMxD,OAAO,GAAG,IAAI,CAAC4B,QAAQ,CAAC4B,EAAE,CAACE,QAAQ,CAAC,CAAC,CAAC;IAC5C,OAAO1D,OAAO,KAAKO,SAAS,GAAGP,OAAO,GAAG,IAAI;EAC/C;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE6H,eAAeA,CAACC,GAAG,EAAE;IACnB,MAAM9H,OAAO,GAAG,IAAI,CAAC6B,SAAS,CAACiG,GAAG,CAAC;IACnC,OAAO9H,OAAO,KAAKO,SAAS,GAAGP,OAAO,GAAG,IAAI;EAC/C;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE+H,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAACjH,OAAO;EACrB;;EAEA;AACF;AACA;EACEkH,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAI,CAAChH,SAAS;EACvB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEiH,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAAC/G,IAAI;EAClB;;EAEA;AACF;AACA;AACA;EACEmC,oBAAoBA,CAAC6E,KAAK,EAAE;IAC1B,MAAMlI,OAAO,GAAG;IACdkI,KAAK,CAACC,MACP;IACD,MAAM1F,UAAU,GAAGjD,MAAM,CAACQ,OAAO,CAAC;IAClC,MAAM6C,QAAQ,GAAG7C,OAAO,CAAC8C,WAAW,CAAC,CAAC;IACtC,IAAI,CAACD,QAAQ,EAAE;MACb,IAAI,EAAEJ,UAAU,IAAI,IAAI,CAACd,qBAAqB,CAAC,EAAE;QAC/C,IAAI,IAAI,CAACH,cAAc,EAAE;UACvB,IAAI,CAACA,cAAc,CAACmB,MAAM,CAAC3C,OAAO,CAAC;QACrC;QACA,IAAI,CAAC2B,qBAAqB,CAACc,UAAU,CAAC,GAAGzC,OAAO;MAClD;IACF,CAAC,MAAM;MACL,MAAM+C,MAAM,GAAGF,QAAQ,CAACG,SAAS,CAAC,CAAC;MACnC,IAAIP,UAAU,IAAI,IAAI,CAACd,qBAAqB,EAAE;QAC5C,OAAO,IAAI,CAACA,qBAAqB,CAACc,UAAU,CAAC;QAC7C,IAAI,IAAI,CAACjB,cAAc,EAAE;UACvB,IAAI,CAACA,cAAc,CAACyB,MAAM,CAACF,MAAM,EAAE/C,OAAO,CAAC;QAC7C;MACF,CAAC,MAAM;QACL,IAAI,IAAI,CAACwB,cAAc,EAAE;UACvB,IAAI,CAACA,cAAc,CAAC4G,MAAM,CAACrF,MAAM,EAAE/C,OAAO,CAAC;QAC7C;MACF;IACF;IACA,MAAMwD,EAAE,GAAGxD,OAAO,CAACyD,KAAK,CAAC,CAAC;IAC1B,IAAID,EAAE,KAAKjD,SAAS,EAAE;MACpB,MAAM8H,GAAG,GAAG7E,EAAE,CAACE,QAAQ,CAAC,CAAC;MACzB,IAAI,IAAI,CAAC9B,QAAQ,CAACyG,GAAG,CAAC,KAAKrI,OAAO,EAAE;QAClC,IAAI,CAACsI,kBAAkB,CAACtI,OAAO,CAAC;QAChC,IAAI,CAAC4B,QAAQ,CAACyG,GAAG,CAAC,GAAGrI,OAAO;MAC9B;IACF,CAAC,MAAM;MACL,IAAI,CAACsI,kBAAkB,CAACtI,OAAO,CAAC;MAChC,IAAI,CAAC6B,SAAS,CAACY,UAAU,CAAC,GAAGzC,OAAO;IACtC;IACA,IAAI,CAACwC,OAAO,CAAC,CAAC;IACd,IAAI,CAACU,aAAa,CAChB,IAAIrD,iBAAiB,CAACf,eAAe,CAACyJ,aAAa,EAAEvI,OAAO,CAC9D,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEwI,UAAUA,CAACxI,OAAO,EAAE;IAClB,MAAMwD,EAAE,GAAGxD,OAAO,CAACyD,KAAK,CAAC,CAAC;IAC1B,IAAID,EAAE,KAAKjD,SAAS,EAAE;MACpB,OAAOiD,EAAE,IAAI,IAAI,CAAC5B,QAAQ;IAC5B;IACA,OAAOpC,MAAM,CAACQ,OAAO,CAAC,IAAI,IAAI,CAAC6B,SAAS;EAC1C;;EAEA;AACF;AACA;EACEpC,OAAOA,CAAA,EAAG;IACR,IAAI,IAAI,CAAC+B,cAAc,EAAE;MACvB,OACE,IAAI,CAACA,cAAc,CAAC/B,OAAO,CAAC,CAAC,IAAIA,OAAO,CAAC,IAAI,CAACkC,qBAAqB,CAAC;IAExE;IACA,IAAI,IAAI,CAACI,mBAAmB,EAAE;MAC5B,OAAO,IAAI,CAACA,mBAAmB,CAAC0G,SAAS,CAAC,CAAC,KAAK,CAAC;IACnD;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACEC,YAAYA,CAAC3F,MAAM,EAAE4F,UAAU,EAAErI,UAAU,EAAE;IAC3C,MAAMsI,kBAAkB,GAAG,IAAI,CAACnH,mBAAmB;IACnD,MAAMoH,aAAa,GAAG,IAAI,CAACxH,SAAS,CAAC0B,MAAM,EAAE4F,UAAU,EAAErI,UAAU,CAAC;IACpE,KAAK,IAAIyD,CAAC,GAAG,CAAC,EAAE+E,EAAE,GAAGD,aAAa,CAAC7E,MAAM,EAAED,CAAC,GAAG+E,EAAE,EAAE,EAAE/E,CAAC,EAAE;MACtD,MAAMgF,YAAY,GAAGF,aAAa,CAAC9E,CAAC,CAAC;MACrC,MAAMiF,aAAa,GAAGJ,kBAAkB,CAACjD,eAAe,CACtDoD,YAAY;MACZ;AACR;AACA;AACA;MACQ,UAAUE,MAAM,EAAE;QAChB,OAAO7J,cAAc,CAAC6J,MAAM,CAAClG,MAAM,EAAEgG,YAAY,CAAC;MACpD,CACF,CAAC;MACD,IAAI,CAACC,aAAa,EAAE;QAClB,EAAE,IAAI,CAACtH,oBAAoB;QAC3B,IAAI,CAACwB,aAAa,CAChB,IAAIrD,iBAAiB,CAACf,eAAe,CAACoK,iBAAiB,CACzD,CAAC;QACD,IAAI,CAACrI,OAAO,CAACsI,IAAI,CACf,IAAI,EACJJ,YAAY,EACZJ,UAAU,EACVrI,UAAU,EACTL,QAAQ,IAAK;UACZ,EAAE,IAAI,CAACyB,oBAAoB;UAC3B,IAAI,CAACwB,aAAa,CAChB,IAAIrD,iBAAiB,CACnBf,eAAe,CAACsK,eAAe,EAC/B7I,SAAS,EACTN,QACF,CACF,CAAC;QACH,CAAC,EACD,MAAM;UACJ,EAAE,IAAI,CAACyB,oBAAoB;UAC3B,IAAI,CAACwB,aAAa,CAChB,IAAIrD,iBAAiB,CAACf,eAAe,CAACuK,iBAAiB,CACzD,CAAC;QACH,CACF,CAAC;QACDT,kBAAkB,CAAC3F,MAAM,CAAC8F,YAAY,EAAE;UAAChG,MAAM,EAAEgG,YAAY,CAAC9C,KAAK,CAAC;QAAC,CAAC,CAAC;MACzE;IACF;IACA,IAAI,CAACqD,OAAO,GACV,IAAI,CAACzI,OAAO,CAACmD,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,CAACtC,oBAAoB,GAAG,CAAC;EACnE;EAEA6H,OAAOA,CAAA,EAAG;IACR,IAAI,CAAC3E,KAAK,CAAC,IAAI,CAAC;IAChB,IAAI,CAACnD,mBAAmB,CAACmD,KAAK,CAAC,CAAC;IAChC,KAAK,CAAC2E,OAAO,CAAC,CAAC;EACjB;;EAEA;AACF;AACA;AACA;AACA;EACEC,kBAAkBA,CAACzG,MAAM,EAAE;IACzB,MAAM6F,kBAAkB,GAAG,IAAI,CAACnH,mBAAmB;IACnD,IAAIgI,GAAG;IACPb,kBAAkB,CAACjD,eAAe,CAAC5C,MAAM,EAAE,UAAUkG,MAAM,EAAE;MAC3D,IAAI5J,MAAM,CAAC4J,MAAM,CAAClG,MAAM,EAAEA,MAAM,CAAC,EAAE;QACjC0G,GAAG,GAAGR,MAAM;QACZ,OAAO,IAAI;MACb;IACF,CAAC,CAAC;IACF,IAAIQ,GAAG,EAAE;MACPb,kBAAkB,CAACjG,MAAM,CAAC8G,GAAG,CAAC;IAChC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE9E,aAAaA,CAAC3E,OAAO,EAAE;IACrB,IAAI,CAACA,OAAO,EAAE;MACZ;IACF;IACA,MAAMyC,UAAU,GAAGjD,MAAM,CAACQ,OAAO,CAAC;IAClC,IAAIyC,UAAU,IAAI,IAAI,CAACd,qBAAqB,EAAE;MAC5C,OAAO,IAAI,CAACA,qBAAqB,CAACc,UAAU,CAAC;IAC/C,CAAC,MAAM;MACL,IAAI,IAAI,CAACjB,cAAc,EAAE;QACvB,IAAI,CAACA,cAAc,CAACmB,MAAM,CAAC3C,OAAO,CAAC;MACrC;IACF;IACA,MAAM8F,MAAM,GAAG,IAAI,CAACZ,qBAAqB,CAAClF,OAAO,CAAC;IAClD,IAAI8F,MAAM,EAAE;MACV,IAAI,CAACtD,OAAO,CAAC,CAAC;IAChB;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE0C,qBAAqBA,CAAClF,OAAO,EAAE;IAC7B,MAAMyC,UAAU,GAAGjD,MAAM,CAACQ,OAAO,CAAC;IAClC,MAAM0J,iBAAiB,GAAG,IAAI,CAAC5H,kBAAkB,CAACW,UAAU,CAAC;IAC7D,IAAI,CAACiH,iBAAiB,EAAE;MACtB;IACF;IACAA,iBAAiB,CAAC1E,OAAO,CAACrF,aAAa,CAAC;IACxC,OAAO,IAAI,CAACmC,kBAAkB,CAACW,UAAU,CAAC;IAC1C,MAAMe,EAAE,GAAGxD,OAAO,CAACyD,KAAK,CAAC,CAAC;IAC1B,IAAID,EAAE,KAAKjD,SAAS,EAAE;MACpB,OAAO,IAAI,CAACqB,QAAQ,CAAC4B,EAAE,CAACE,QAAQ,CAAC,CAAC,CAAC;IACrC;IACA,OAAO,IAAI,CAAC7B,SAAS,CAACY,UAAU,CAAC;IACjC,IAAI,CAACS,aAAa,CAChB,IAAIrD,iBAAiB,CAACf,eAAe,CAACyF,aAAa,EAAEvE,OAAO,CAC9D,CAAC;IACD,OAAOA,OAAO;EAChB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEsI,kBAAkBA,CAACtI,OAAO,EAAE;IAC1B,IAAI2J,OAAO,GAAG,KAAK;IACnB,KAAK,MAAMnG,EAAE,IAAI,IAAI,CAAC5B,QAAQ,EAAE;MAC9B,IAAI,IAAI,CAACA,QAAQ,CAAC4B,EAAE,CAAC,KAAKxD,OAAO,EAAE;QACjC,OAAO,IAAI,CAAC4B,QAAQ,CAAC4B,EAAE,CAAC;QACxBmG,OAAO,GAAG,IAAI;QACd;MACF;IACF;IACA,OAAOA,OAAO;EAChB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,SAASA,CAACxI,MAAM,EAAE;IAChB,IAAI,CAACP,OAAO,GAAGO,MAAM;EACvB;;EAEA;AACF;AACA;AACA;AACA;EACEyI,MAAMA,CAAC1I,GAAG,EAAE;IACVhC,MAAM,CAAC,IAAI,CAAC2B,OAAO,EAAE,wCAAwC,CAAC;IAC9D,IAAI,CAACI,IAAI,GAAGC,GAAG;IACf,IAAI,CAACyI,SAAS,CAAChK,GAAG,CAACuB,GAAG,EAAE,IAAI,CAACL,OAAO,CAAC,CAAC;EACxC;AACF;AAEA,eAAeZ,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}