{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/source/VectorTile\n */\n\nimport EventType from '../events/EventType.js';\nimport Tile from '../VectorTile.js';\nimport TileCache from '../TileCache.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport VectorRenderTile from '../VectorRenderTile.js';\nimport { DEFAULT_MAX_ZOOM } from '../tilegrid/common.js';\nimport { buffer as bufferExtent, getIntersection, intersects } from '../extent.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { fromKey, getCacheKeyForTileKey, getKeyZXY } from '../tilecoord.js';\nimport { isEmpty } from '../obj.js';\nimport { loadFeaturesXhr } from '../featureloader.js';\nimport { toSize } from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least twice the number of tiles in the viewport.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {import(\"../format/Feature.js\").default} [format] Feature format for tiles. Used and required by the default.\n * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this\n * to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection of the tile grid.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../VectorTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/VectorTile~VectorTile}.\n * @property {number} [maxZoom=22] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number|import(\"../size.js\").Size} [tileSize=512] Optional tile size. Not used if `tileGrid` is provided.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction]\n * Optional function to load a tile given a URL. Could look like this for pbf tiles:\n * ```js\n * function(tile, url) {\n *   tile.setLoader(function(extent, resolution, projection) {\n *     fetch(url).then(function(response) {\n *       response.arrayBuffer().then(function(data) {\n *         const format = tile.getFormat() // ol/format/MVT configured as source format\n *         const features = format.readFeatures(data, {\n *           extent: extent,\n *           featureProjection: projection\n *         });\n *         tile.setFeatures(features);\n *       });\n *     });\n *   });\n * }\n * ```\n * If you do not need extent, resolution and projection to get the features for a tile (e.g.\n * for GeoJSON tiles), your `tileLoadFunction` does not need a `setLoader()` call. Only make sure\n * to call `setFeatures()` on the tile:\n * ```js\n * const format = new GeoJSON({featureProjection: map.getView().getProjection()});\n * async function tileLoadFunction(tile, url) {\n *   const response = await fetch(url);\n *   const data = await response.json();\n *   tile.setFeatures(format.readFeatures(data));\n * }\n * ```\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {number} [transition] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When set to `true`, tiles will be wrapped horizontally to\n * render multiple worlds.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=1]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Class for layer sources providing vector data divided into a tile grid, to be\n * used with {@link module:ol/layer/VectorTile~VectorTileLayer}. Although this source receives tiles\n * with vector features from the server, it is not meant for feature editing.\n * Features are optimized for rendering, their geometries are clipped at or near\n * tile boundaries and simplified for a view resolution. See\n * {@link module:ol/source/Vector~VectorSource} for vector sources that are suitable for feature\n * editing.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass VectorTile extends UrlTile {\n  /**\n   * @param {!Options} options Vector tile options.\n   */\n  constructor(options) {\n    const projection = options.projection || 'EPSG:3857';\n    const extent = options.extent || extentFromProjection(projection);\n    const tileGrid = options.tileGrid || createXYZ({\n      extent: extent,\n      maxResolution: options.maxResolution,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 22,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize || 512\n    });\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      interpolate: true,\n      opaque: false,\n      projection: projection,\n      state: options.state,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultLoadFunction,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX === undefined ? true : options.wrapX,\n      transition: options.transition,\n      zDirection: options.zDirection === undefined ? 1 : options.zDirection\n    });\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|null}\n     */\n    this.format_ = options.format ? options.format : null;\n\n    /**\n     * @private\n     * @type {TileCache}\n     */\n    this.sourceTileCache = new TileCache(this.tileCache.highWaterMark);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;\n\n    /**\n     * @protected\n     * @type {typeof import(\"../VectorTile.js\").default}\n     */\n    this.tileClass = options.tileClass ? options.tileClass : Tile;\n\n    /**\n     * @private\n     * @type {Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGrids_ = {};\n  }\n\n  /**\n   * Get features whose bounding box intersects the provided extent. Only features for cached\n   * tiles for the last rendered zoom level are available in the source. So this method is only\n   * suitable for requesting tiles for extents that are currently rendered.\n   *\n   * Features are returned in random tile order and as they are included in the tiles. This means\n   * they can be clipped, duplicated across tiles, and simplified to the render resolution.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   * @api\n   */\n  getFeaturesInExtent(extent) {\n    const features = [];\n    const tileCache = this.tileCache;\n    if (tileCache.getCount() === 0) {\n      return features;\n    }\n    const z = fromKey(tileCache.peekFirstKey())[0];\n    const tileGrid = this.tileGrid;\n    tileCache.forEach(function (tile) {\n      if (tile.tileCoord[0] !== z || tile.getState() !== TileState.LOADED) {\n        return;\n      }\n      const sourceTiles = tile.getSourceTiles();\n      for (let i = 0, ii = sourceTiles.length; i < ii; ++i) {\n        const sourceTile = sourceTiles[i];\n        const tileCoord = sourceTile.tileCoord;\n        if (intersects(extent, tileGrid.getTileCoordExtent(tileCoord))) {\n          const tileFeatures = sourceTile.getFeatures();\n          if (tileFeatures) {\n            for (let j = 0, jj = tileFeatures.length; j < jj; ++j) {\n              const candidate = tileFeatures[j];\n              const geometry = candidate.getGeometry();\n              if (intersects(extent, geometry.getExtent())) {\n                features.push(candidate);\n              }\n            }\n          }\n        }\n      }\n    });\n    return features;\n  }\n\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  getOverlaps() {\n    return this.overlaps_;\n  }\n\n  /**\n   * clear {@link module:ol/TileCache~TileCache} and delete all source tiles\n   * @api\n   */\n  clear() {\n    this.tileCache.clear();\n    this.sourceTileCache.clear();\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    const usedSourceTiles = Object.keys(usedTiles).reduce((acc, key) => {\n      const cacheKey = getCacheKeyForTileKey(key);\n      const tile = tileCache.peek(cacheKey);\n      if (tile) {\n        const sourceTiles = tile.sourceTiles;\n        for (let i = 0, ii = sourceTiles.length; i < ii; ++i) {\n          acc[sourceTiles[i].getKey()] = true;\n        }\n      }\n      return acc;\n    }, {});\n    super.expireCache(projection, usedTiles);\n    this.sourceTileCache.expireCache(usedSourceTiles);\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection\").default} projection Projection.\n   * @param {VectorRenderTile} tile Vector image tile.\n   * @return {Array<import(\"../VectorTile\").default>} Tile keys.\n   */\n  getSourceTiles(pixelRatio, projection, tile) {\n    if (tile.getState() === TileState.IDLE) {\n      tile.setState(TileState.LOADING);\n      const urlTileCoord = tile.wrappedTileCoord;\n      const tileGrid = this.getTileGridForProjection(projection);\n      const extent = tileGrid.getTileCoordExtent(urlTileCoord);\n      const z = urlTileCoord[0];\n      const resolution = tileGrid.getResolution(z);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      bufferExtent(extent, -resolution, extent);\n      const sourceTileGrid = this.tileGrid;\n      const sourceExtent = sourceTileGrid.getExtent();\n      if (sourceExtent) {\n        getIntersection(extent, sourceExtent, extent);\n      }\n      const sourceZ = sourceTileGrid.getZForResolution(resolution, this.zDirection);\n      sourceTileGrid.forEachTileCoord(extent, sourceZ, sourceTileCoord => {\n        const tileUrl = this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);\n        const sourceTile = this.sourceTileCache.containsKey(tileUrl) ? this.sourceTileCache.get(tileUrl) : new this.tileClass(sourceTileCoord, tileUrl ? TileState.IDLE : TileState.EMPTY, tileUrl, this.format_, this.tileLoadFunction);\n        tile.sourceTiles.push(sourceTile);\n        const sourceTileState = sourceTile.getState();\n        if (sourceTileState < TileState.LOADED) {\n          const listenChange = event => {\n            this.handleTileChange(event);\n            const state = sourceTile.getState();\n            if (state === TileState.LOADED || state === TileState.ERROR) {\n              const sourceTileKey = sourceTile.getKey();\n              if (sourceTileKey in tile.errorTileKeys) {\n                if (sourceTile.getState() === TileState.LOADED) {\n                  delete tile.errorTileKeys[sourceTileKey];\n                }\n              } else {\n                tile.loadingSourceTiles--;\n              }\n              if (state === TileState.ERROR) {\n                tile.errorTileKeys[sourceTileKey] = true;\n              } else {\n                sourceTile.removeEventListener(EventType.CHANGE, listenChange);\n              }\n              if (tile.loadingSourceTiles === 0) {\n                tile.setState(isEmpty(tile.errorTileKeys) ? TileState.LOADED : TileState.ERROR);\n              }\n            }\n          };\n          sourceTile.addEventListener(EventType.CHANGE, listenChange);\n          tile.loadingSourceTiles++;\n        }\n        if (sourceTileState === TileState.IDLE) {\n          sourceTile.extent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);\n          sourceTile.projection = projection;\n          sourceTile.resolution = sourceTileGrid.getResolution(sourceTileCoord[0]);\n          this.sourceTileCache.set(tileUrl, sourceTile);\n          sourceTile.load();\n        }\n      });\n      if (!tile.loadingSourceTiles) {\n        tile.setState(tile.sourceTiles.some(sourceTile => sourceTile.getState() === TileState.ERROR) ? TileState.ERROR : TileState.LOADED);\n      }\n    }\n    return tile.sourceTiles;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!VectorRenderTile} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const coordKey = getKeyZXY(z, x, y);\n    const key = this.getKey();\n    let tile;\n    if (this.tileCache.containsKey(coordKey)) {\n      tile = this.tileCache.get(coordKey);\n      if (tile.key === key) {\n        return tile;\n      }\n    }\n    const tileCoord = [z, x, y];\n    let urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    const sourceExtent = this.getTileGrid().getExtent();\n    const tileGrid = this.getTileGridForProjection(projection);\n    if (urlTileCoord && sourceExtent) {\n      const tileExtent = tileGrid.getTileCoordExtent(urlTileCoord);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      bufferExtent(tileExtent, -tileGrid.getResolution(z), tileExtent);\n      if (!intersects(sourceExtent, tileExtent)) {\n        urlTileCoord = null;\n      }\n    }\n    let empty = true;\n    if (urlTileCoord !== null) {\n      const sourceTileGrid = this.tileGrid;\n      const resolution = tileGrid.getResolution(z);\n      const sourceZ = sourceTileGrid.getZForResolution(resolution, 1);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      const extent = tileGrid.getTileCoordExtent(urlTileCoord);\n      bufferExtent(extent, -resolution, extent);\n      sourceTileGrid.forEachTileCoord(extent, sourceZ, sourceTileCoord => {\n        empty = empty && !this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);\n      });\n    }\n    const newTile = new VectorRenderTile(tileCoord, empty ? TileState.EMPTY : TileState.IDLE, urlTileCoord, this.getSourceTiles.bind(this, pixelRatio, projection));\n    newTile.key = key;\n    if (tile) {\n      newTile.interimTile = tile;\n      newTile.refreshInterimChain();\n      this.tileCache.replace(coordKey, newTile);\n    } else {\n      this.tileCache.set(coordKey, newTile);\n    }\n    return newTile;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    const code = projection.getCode();\n    let tileGrid = this.tileGrids_[code];\n    if (!tileGrid) {\n      // A tile grid that matches the tile size of the source tile grid is more\n      // likely to have 1:1 relationships between source tiles and rendered tiles.\n      const sourceTileGrid = this.tileGrid;\n      const resolutions = sourceTileGrid.getResolutions().slice();\n      const origins = resolutions.map(function (resolution, z) {\n        return sourceTileGrid.getOrigin(z);\n      });\n      const tileSizes = resolutions.map(function (resolution, z) {\n        return sourceTileGrid.getTileSize(z);\n      });\n      const length = DEFAULT_MAX_ZOOM + 1;\n      for (let z = resolutions.length; z < length; ++z) {\n        resolutions.push(resolutions[z - 1] / 2);\n        origins.push(origins[z - 1]);\n        tileSizes.push(tileSizes[z - 1]);\n      }\n      tileGrid = new TileGrid({\n        extent: sourceTileGrid.getExtent(),\n        origins: origins,\n        resolutions: resolutions,\n        tileSizes: tileSizes\n      });\n      this.tileGrids_[code] = tileGrid;\n    }\n    return tileGrid;\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return pixelRatio;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    return [Math.round(tileSize[0] * pixelRatio), Math.round(tileSize[1] * pixelRatio)];\n  }\n\n  /**\n   * Increases the cache size if needed\n   * @param {number} tileCount Minimum number of tiles needed.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  updateCacheSize(tileCount, projection) {\n    super.updateCacheSize(tileCount * 2, projection);\n    this.sourceTileCache.highWaterMark = this.getTileCacheForProjection(projection).highWaterMark;\n  }\n}\nexport default VectorTile;\n\n/**\n * Sets the loader for a tile.\n * @param {import(\"../VectorTile.js\").default} tile Vector tile.\n * @param {string} url URL.\n */\nexport function defaultLoadFunction(tile, url) {\n  tile.setLoader(\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  function (extent, resolution, projection) {\n    loadFeaturesXhr(url, tile.getFormat(), extent, resolution, projection, tile.onLoad.bind(tile), tile.onError.bind(tile));\n  });\n}","map":{"version":3,"names":["EventType","Tile","TileCache","TileGrid","TileState","UrlTile","VectorRenderTile","DEFAULT_MAX_ZOOM","buffer","bufferExtent","getIntersection","intersects","createXYZ","extentFromProjection","fromKey","getCacheKeyForTileKey","getKeyZXY","isEmpty","loadFeaturesXhr","toSize","VectorTile","constructor","options","projection","extent","tileGrid","maxResolution","maxZoom","undefined","minZoom","tileSize","attributions","attributionsCollapsible","cacheSize","interpolate","opaque","state","tileLoadFunction","defaultLoadFunction","tileUrlFunction","url","urls","wrapX","transition","zDirection","format_","format","sourceTileCache","tileCache","highWaterMark","overlaps_","overlaps","tileClass","tileGrids_","getFeaturesInExtent","features","getCount","z","peekFirstKey","forEach","tile","tileCoord","getState","LOADED","sourceTiles","getSourceTiles","i","ii","length","sourceTile","getTileCoordExtent","tileFeatures","getFeatures","j","jj","candidate","geometry","getGeometry","getExtent","push","getOverlaps","clear","expireCache","usedTiles","getTileCacheForProjection","usedSourceTiles","Object","keys","reduce","acc","key","cacheKey","peek","getKey","pixelRatio","IDLE","setState","LOADING","urlTileCoord","wrappedTileCoord","getTileGridForProjection","resolution","getResolution","sourceTileGrid","sourceExtent","sourceZ","getZForResolution","forEachTileCoord","sourceTileCoord","tileUrl","containsKey","get","EMPTY","sourceTileState","listenChange","event","handleTileChange","ERROR","sourceTileKey","errorTileKeys","loadingSourceTiles","removeEventListener","CHANGE","addEventListener","set","load","some","getTile","x","y","coordKey","getTileCoordForTileUrlFunction","getTileGrid","tileExtent","empty","newTile","bind","interimTile","refreshInterimChain","replace","code","getCode","resolutions","getResolutions","slice","origins","map","getOrigin","tileSizes","getTileSize","getTilePixelRatio","getTilePixelSize","tmpSize","Math","round","updateCacheSize","tileCount","setLoader","getFormat","onLoad","onError"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/source/VectorTile.js"],"sourcesContent":["/**\n * @module ol/source/VectorTile\n */\n\nimport EventType from '../events/EventType.js';\nimport Tile from '../VectorTile.js';\nimport TileCache from '../TileCache.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport VectorRenderTile from '../VectorRenderTile.js';\nimport {DEFAULT_MAX_ZOOM} from '../tilegrid/common.js';\nimport {\n  buffer as bufferExtent,\n  getIntersection,\n  intersects,\n} from '../extent.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {fromKey, getCacheKeyForTileKey, getKeyZXY} from '../tilecoord.js';\nimport {isEmpty} from '../obj.js';\nimport {loadFeaturesXhr} from '../featureloader.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least twice the number of tiles in the viewport.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {import(\"../format/Feature.js\").default} [format] Feature format for tiles. Used and required by the default.\n * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this\n * to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection of the tile grid.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../VectorTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/VectorTile~VectorTile}.\n * @property {number} [maxZoom=22] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number|import(\"../size.js\").Size} [tileSize=512] Optional tile size. Not used if `tileGrid` is provided.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction]\n * Optional function to load a tile given a URL. Could look like this for pbf tiles:\n * ```js\n * function(tile, url) {\n *   tile.setLoader(function(extent, resolution, projection) {\n *     fetch(url).then(function(response) {\n *       response.arrayBuffer().then(function(data) {\n *         const format = tile.getFormat() // ol/format/MVT configured as source format\n *         const features = format.readFeatures(data, {\n *           extent: extent,\n *           featureProjection: projection\n *         });\n *         tile.setFeatures(features);\n *       });\n *     });\n *   });\n * }\n * ```\n * If you do not need extent, resolution and projection to get the features for a tile (e.g.\n * for GeoJSON tiles), your `tileLoadFunction` does not need a `setLoader()` call. Only make sure\n * to call `setFeatures()` on the tile:\n * ```js\n * const format = new GeoJSON({featureProjection: map.getView().getProjection()});\n * async function tileLoadFunction(tile, url) {\n *   const response = await fetch(url);\n *   const data = await response.json();\n *   tile.setFeatures(format.readFeatures(data));\n * }\n * ```\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {number} [transition] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When set to `true`, tiles will be wrapped horizontally to\n * render multiple worlds.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=1]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Class for layer sources providing vector data divided into a tile grid, to be\n * used with {@link module:ol/layer/VectorTile~VectorTileLayer}. Although this source receives tiles\n * with vector features from the server, it is not meant for feature editing.\n * Features are optimized for rendering, their geometries are clipped at or near\n * tile boundaries and simplified for a view resolution. See\n * {@link module:ol/source/Vector~VectorSource} for vector sources that are suitable for feature\n * editing.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass VectorTile extends UrlTile {\n  /**\n   * @param {!Options} options Vector tile options.\n   */\n  constructor(options) {\n    const projection = options.projection || 'EPSG:3857';\n\n    const extent = options.extent || extentFromProjection(projection);\n\n    const tileGrid =\n      options.tileGrid ||\n      createXYZ({\n        extent: extent,\n        maxResolution: options.maxResolution,\n        maxZoom: options.maxZoom !== undefined ? options.maxZoom : 22,\n        minZoom: options.minZoom,\n        tileSize: options.tileSize || 512,\n      });\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      interpolate: true,\n      opaque: false,\n      projection: projection,\n      state: options.state,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultLoadFunction,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX === undefined ? true : options.wrapX,\n      transition: options.transition,\n      zDirection: options.zDirection === undefined ? 1 : options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|null}\n     */\n    this.format_ = options.format ? options.format : null;\n\n    /**\n     * @private\n     * @type {TileCache}\n     */\n    this.sourceTileCache = new TileCache(this.tileCache.highWaterMark);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;\n\n    /**\n     * @protected\n     * @type {typeof import(\"../VectorTile.js\").default}\n     */\n    this.tileClass = options.tileClass ? options.tileClass : Tile;\n\n    /**\n     * @private\n     * @type {Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGrids_ = {};\n  }\n\n  /**\n   * Get features whose bounding box intersects the provided extent. Only features for cached\n   * tiles for the last rendered zoom level are available in the source. So this method is only\n   * suitable for requesting tiles for extents that are currently rendered.\n   *\n   * Features are returned in random tile order and as they are included in the tiles. This means\n   * they can be clipped, duplicated across tiles, and simplified to the render resolution.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   * @api\n   */\n  getFeaturesInExtent(extent) {\n    const features = [];\n    const tileCache = this.tileCache;\n    if (tileCache.getCount() === 0) {\n      return features;\n    }\n    const z = fromKey(tileCache.peekFirstKey())[0];\n    const tileGrid = this.tileGrid;\n    tileCache.forEach(function (tile) {\n      if (tile.tileCoord[0] !== z || tile.getState() !== TileState.LOADED) {\n        return;\n      }\n      const sourceTiles = tile.getSourceTiles();\n      for (let i = 0, ii = sourceTiles.length; i < ii; ++i) {\n        const sourceTile = sourceTiles[i];\n        const tileCoord = sourceTile.tileCoord;\n        if (intersects(extent, tileGrid.getTileCoordExtent(tileCoord))) {\n          const tileFeatures = sourceTile.getFeatures();\n          if (tileFeatures) {\n            for (let j = 0, jj = tileFeatures.length; j < jj; ++j) {\n              const candidate = tileFeatures[j];\n              const geometry = candidate.getGeometry();\n              if (intersects(extent, geometry.getExtent())) {\n                features.push(candidate);\n              }\n            }\n          }\n        }\n      }\n    });\n    return features;\n  }\n\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  getOverlaps() {\n    return this.overlaps_;\n  }\n\n  /**\n   * clear {@link module:ol/TileCache~TileCache} and delete all source tiles\n   * @api\n   */\n  clear() {\n    this.tileCache.clear();\n    this.sourceTileCache.clear();\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    const usedSourceTiles = Object.keys(usedTiles).reduce((acc, key) => {\n      const cacheKey = getCacheKeyForTileKey(key);\n      const tile = tileCache.peek(cacheKey);\n      if (tile) {\n        const sourceTiles = tile.sourceTiles;\n        for (let i = 0, ii = sourceTiles.length; i < ii; ++i) {\n          acc[sourceTiles[i].getKey()] = true;\n        }\n      }\n      return acc;\n    }, {});\n    super.expireCache(projection, usedTiles);\n    this.sourceTileCache.expireCache(usedSourceTiles);\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection\").default} projection Projection.\n   * @param {VectorRenderTile} tile Vector image tile.\n   * @return {Array<import(\"../VectorTile\").default>} Tile keys.\n   */\n  getSourceTiles(pixelRatio, projection, tile) {\n    if (tile.getState() === TileState.IDLE) {\n      tile.setState(TileState.LOADING);\n      const urlTileCoord = tile.wrappedTileCoord;\n      const tileGrid = this.getTileGridForProjection(projection);\n      const extent = tileGrid.getTileCoordExtent(urlTileCoord);\n      const z = urlTileCoord[0];\n      const resolution = tileGrid.getResolution(z);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      bufferExtent(extent, -resolution, extent);\n      const sourceTileGrid = this.tileGrid;\n      const sourceExtent = sourceTileGrid.getExtent();\n      if (sourceExtent) {\n        getIntersection(extent, sourceExtent, extent);\n      }\n      const sourceZ = sourceTileGrid.getZForResolution(\n        resolution,\n        this.zDirection\n      );\n\n      sourceTileGrid.forEachTileCoord(extent, sourceZ, (sourceTileCoord) => {\n        const tileUrl = this.tileUrlFunction(\n          sourceTileCoord,\n          pixelRatio,\n          projection\n        );\n        const sourceTile = this.sourceTileCache.containsKey(tileUrl)\n          ? this.sourceTileCache.get(tileUrl)\n          : new this.tileClass(\n              sourceTileCoord,\n              tileUrl ? TileState.IDLE : TileState.EMPTY,\n              tileUrl,\n              this.format_,\n              this.tileLoadFunction\n            );\n        tile.sourceTiles.push(sourceTile);\n        const sourceTileState = sourceTile.getState();\n        if (sourceTileState < TileState.LOADED) {\n          const listenChange = (event) => {\n            this.handleTileChange(event);\n            const state = sourceTile.getState();\n            if (state === TileState.LOADED || state === TileState.ERROR) {\n              const sourceTileKey = sourceTile.getKey();\n              if (sourceTileKey in tile.errorTileKeys) {\n                if (sourceTile.getState() === TileState.LOADED) {\n                  delete tile.errorTileKeys[sourceTileKey];\n                }\n              } else {\n                tile.loadingSourceTiles--;\n              }\n              if (state === TileState.ERROR) {\n                tile.errorTileKeys[sourceTileKey] = true;\n              } else {\n                sourceTile.removeEventListener(EventType.CHANGE, listenChange);\n              }\n              if (tile.loadingSourceTiles === 0) {\n                tile.setState(\n                  isEmpty(tile.errorTileKeys)\n                    ? TileState.LOADED\n                    : TileState.ERROR\n                );\n              }\n            }\n          };\n          sourceTile.addEventListener(EventType.CHANGE, listenChange);\n          tile.loadingSourceTiles++;\n        }\n        if (sourceTileState === TileState.IDLE) {\n          sourceTile.extent =\n            sourceTileGrid.getTileCoordExtent(sourceTileCoord);\n          sourceTile.projection = projection;\n          sourceTile.resolution = sourceTileGrid.getResolution(\n            sourceTileCoord[0]\n          );\n          this.sourceTileCache.set(tileUrl, sourceTile);\n          sourceTile.load();\n        }\n      });\n      if (!tile.loadingSourceTiles) {\n        tile.setState(\n          tile.sourceTiles.some(\n            (sourceTile) => sourceTile.getState() === TileState.ERROR\n          )\n            ? TileState.ERROR\n            : TileState.LOADED\n        );\n      }\n    }\n\n    return tile.sourceTiles;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!VectorRenderTile} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const coordKey = getKeyZXY(z, x, y);\n    const key = this.getKey();\n    let tile;\n    if (this.tileCache.containsKey(coordKey)) {\n      tile = this.tileCache.get(coordKey);\n      if (tile.key === key) {\n        return tile;\n      }\n    }\n    const tileCoord = [z, x, y];\n    let urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection\n    );\n    const sourceExtent = this.getTileGrid().getExtent();\n    const tileGrid = this.getTileGridForProjection(projection);\n    if (urlTileCoord && sourceExtent) {\n      const tileExtent = tileGrid.getTileCoordExtent(urlTileCoord);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      bufferExtent(tileExtent, -tileGrid.getResolution(z), tileExtent);\n      if (!intersects(sourceExtent, tileExtent)) {\n        urlTileCoord = null;\n      }\n    }\n    let empty = true;\n    if (urlTileCoord !== null) {\n      const sourceTileGrid = this.tileGrid;\n      const resolution = tileGrid.getResolution(z);\n      const sourceZ = sourceTileGrid.getZForResolution(resolution, 1);\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\n      const extent = tileGrid.getTileCoordExtent(urlTileCoord);\n      bufferExtent(extent, -resolution, extent);\n      sourceTileGrid.forEachTileCoord(extent, sourceZ, (sourceTileCoord) => {\n        empty =\n          empty &&\n          !this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);\n      });\n    }\n    const newTile = new VectorRenderTile(\n      tileCoord,\n      empty ? TileState.EMPTY : TileState.IDLE,\n      urlTileCoord,\n      this.getSourceTiles.bind(this, pixelRatio, projection)\n    );\n\n    newTile.key = key;\n    if (tile) {\n      newTile.interimTile = tile;\n      newTile.refreshInterimChain();\n      this.tileCache.replace(coordKey, newTile);\n    } else {\n      this.tileCache.set(coordKey, newTile);\n    }\n    return newTile;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    const code = projection.getCode();\n    let tileGrid = this.tileGrids_[code];\n    if (!tileGrid) {\n      // A tile grid that matches the tile size of the source tile grid is more\n      // likely to have 1:1 relationships between source tiles and rendered tiles.\n      const sourceTileGrid = this.tileGrid;\n      const resolutions = sourceTileGrid.getResolutions().slice();\n      const origins = resolutions.map(function (resolution, z) {\n        return sourceTileGrid.getOrigin(z);\n      });\n      const tileSizes = resolutions.map(function (resolution, z) {\n        return sourceTileGrid.getTileSize(z);\n      });\n      const length = DEFAULT_MAX_ZOOM + 1;\n      for (let z = resolutions.length; z < length; ++z) {\n        resolutions.push(resolutions[z - 1] / 2);\n        origins.push(origins[z - 1]);\n        tileSizes.push(tileSizes[z - 1]);\n      }\n      tileGrid = new TileGrid({\n        extent: sourceTileGrid.getExtent(),\n        origins: origins,\n        resolutions: resolutions,\n        tileSizes: tileSizes,\n      });\n      this.tileGrids_[code] = tileGrid;\n    }\n    return tileGrid;\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return pixelRatio;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    return [\n      Math.round(tileSize[0] * pixelRatio),\n      Math.round(tileSize[1] * pixelRatio),\n    ];\n  }\n\n  /**\n   * Increases the cache size if needed\n   * @param {number} tileCount Minimum number of tiles needed.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  updateCacheSize(tileCount, projection) {\n    super.updateCacheSize(tileCount * 2, projection);\n    this.sourceTileCache.highWaterMark =\n      this.getTileCacheForProjection(projection).highWaterMark;\n  }\n}\n\nexport default VectorTile;\n\n/**\n * Sets the loader for a tile.\n * @param {import(\"../VectorTile.js\").default} tile Vector tile.\n * @param {string} url URL.\n */\nexport function defaultLoadFunction(tile, url) {\n  tile.setLoader(\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     */\n    function (extent, resolution, projection) {\n      loadFeaturesXhr(\n        url,\n        tile.getFormat(),\n        extent,\n        resolution,\n        projection,\n        tile.onLoad.bind(tile),\n        tile.onError.bind(tile)\n      );\n    }\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}