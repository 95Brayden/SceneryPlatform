{"ast":null,"code":"/**\n * @module ol/source/static\n */\n\nimport { decode } from '../Image.js';\nimport { getHeight, getWidth } from '../extent.js';\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../extent.js\").Extent} [imageExtent] Extent of the image in map coordinates.\n * This is the [left, bottom, right, top] map coordinates of your image. When using this loader with an\n * `ol/source/Image`, the same extent must be set as `extent` of the `ol/layer/Image`.\n * @property {string} url Image URL.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * Creates a loader for static images.\n * @param {LoaderOptions} options Loader options.\n * @return {import(\"../Image.js\").ImageObjectPromiseLoader} Loader.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load || decode;\n  const extent = options.imageExtent;\n  const image = new Image();\n  if (options.crossOrigin !== null) {\n    image.crossOrigin = options.crossOrigin;\n  }\n  return () => load(image, options.url).then(image => {\n    const resolutionX = getWidth(extent) / image.width;\n    const resolutionY = getHeight(extent) / image.height;\n    const resolution = resolutionX !== resolutionY ? [resolutionX, resolutionY] : resolutionY;\n    return {\n      image,\n      extent,\n      resolution,\n      pixelRatio: 1\n    };\n  });\n}","map":{"version":3,"names":["decode","getHeight","getWidth","createLoader","options","load","extent","imageExtent","image","Image","crossOrigin","url","then","resolutionX","width","resolutionY","height","resolution","pixelRatio"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/source/static.js"],"sourcesContent":["/**\n * @module ol/source/static\n */\n\nimport {decode} from '../Image.js';\nimport {getHeight, getWidth} from '../extent.js';\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {import(\"../extent.js\").Extent} [imageExtent] Extent of the image in map coordinates.\n * This is the [left, bottom, right, top] map coordinates of your image. When using this loader with an\n * `ol/source/Image`, the same extent must be set as `extent` of the `ol/layer/Image`.\n * @property {string} url Image URL.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * Creates a loader for static images.\n * @param {LoaderOptions} options Loader options.\n * @return {import(\"../Image.js\").ImageObjectPromiseLoader} Loader.\n * @api\n */\nexport function createLoader(options) {\n  const load = options.load || decode;\n  const extent = options.imageExtent;\n  const image = new Image();\n  if (options.crossOrigin !== null) {\n    image.crossOrigin = options.crossOrigin;\n  }\n\n  return () =>\n    load(image, options.url).then((image) => {\n      const resolutionX = getWidth(extent) / image.width;\n      const resolutionY = getHeight(extent) / image.height;\n      const resolution =\n        resolutionX !== resolutionY ? [resolutionX, resolutionY] : resolutionY;\n      return {image, extent, resolution, pixelRatio: 1};\n    });\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAAQA,MAAM,QAAO,aAAa;AAClC,SAAQC,SAAS,EAAEC,QAAQ,QAAO,cAAc;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,OAAO,EAAE;EACpC,MAAMC,IAAI,GAAGD,OAAO,CAACC,IAAI,IAAIL,MAAM;EACnC,MAAMM,MAAM,GAAGF,OAAO,CAACG,WAAW;EAClC,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC;EACzB,IAAIL,OAAO,CAACM,WAAW,KAAK,IAAI,EAAE;IAChCF,KAAK,CAACE,WAAW,GAAGN,OAAO,CAACM,WAAW;EACzC;EAEA,OAAO,MACLL,IAAI,CAACG,KAAK,EAAEJ,OAAO,CAACO,GAAG,CAAC,CAACC,IAAI,CAAEJ,KAAK,IAAK;IACvC,MAAMK,WAAW,GAAGX,QAAQ,CAACI,MAAM,CAAC,GAAGE,KAAK,CAACM,KAAK;IAClD,MAAMC,WAAW,GAAGd,SAAS,CAACK,MAAM,CAAC,GAAGE,KAAK,CAACQ,MAAM;IACpD,MAAMC,UAAU,GACdJ,WAAW,KAAKE,WAAW,GAAG,CAACF,WAAW,EAAEE,WAAW,CAAC,GAAGA,WAAW;IACxE,OAAO;MAACP,KAAK;MAAEF,MAAM;MAAEW,UAAU;MAAEC,UAAU,EAAE;IAAC,CAAC;EACnD,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}