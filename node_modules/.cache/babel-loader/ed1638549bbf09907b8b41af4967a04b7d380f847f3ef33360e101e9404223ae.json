{"ast":null,"code":"/**\n * @module ol/proj/transforms\n */\nimport { isEmpty } from '../obj.js';\n\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\nlet transforms = {};\n\n/**\n * Clear the transform cache.\n */\nexport function clear() {\n  transforms = {};\n}\n\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\nexport function add(source, destination, transformFn) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  if (!(sourceCode in transforms)) {\n    transforms[sourceCode] = {};\n  }\n  transforms[sourceCode][destinationCode] = transformFn;\n}\n\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\nexport function remove(source, destination) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  const transform = transforms[sourceCode][destinationCode];\n  delete transforms[sourceCode][destinationCode];\n  if (isEmpty(transforms[sourceCode])) {\n    delete transforms[sourceCode];\n  }\n  return transform;\n}\n\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\n */\nexport function get(sourceCode, destinationCode) {\n  let transform;\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n    transform = transforms[sourceCode][destinationCode];\n  }\n  return transform;\n}","map":{"version":3,"names":["isEmpty","transforms","clear","add","source","destination","transformFn","sourceCode","getCode","destinationCode","remove","transform","get"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/proj/transforms.js"],"sourcesContent":["/**\n * @module ol/proj/transforms\n */\nimport {isEmpty} from '../obj.js';\n\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\nlet transforms = {};\n\n/**\n * Clear the transform cache.\n */\nexport function clear() {\n  transforms = {};\n}\n\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\nexport function add(source, destination, transformFn) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  if (!(sourceCode in transforms)) {\n    transforms[sourceCode] = {};\n  }\n  transforms[sourceCode][destinationCode] = transformFn;\n}\n\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\nexport function remove(source, destination) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  const transform = transforms[sourceCode][destinationCode];\n  delete transforms[sourceCode][destinationCode];\n  if (isEmpty(transforms[sourceCode])) {\n    delete transforms[sourceCode];\n  }\n  return transform;\n}\n\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\n */\nexport function get(sourceCode, destinationCode) {\n  let transform;\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n    transform = transforms[sourceCode][destinationCode];\n  }\n  return transform;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAAQA,OAAO,QAAO,WAAW;;AAEjC;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAG,CAAC,CAAC;;AAEnB;AACA;AACA;AACA,OAAO,SAASC,KAAKA,CAAA,EAAG;EACtBD,UAAU,GAAG,CAAC,CAAC;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,GAAGA,CAACC,MAAM,EAAEC,WAAW,EAAEC,WAAW,EAAE;EACpD,MAAMC,UAAU,GAAGH,MAAM,CAACI,OAAO,CAAC,CAAC;EACnC,MAAMC,eAAe,GAAGJ,WAAW,CAACG,OAAO,CAAC,CAAC;EAC7C,IAAI,EAAED,UAAU,IAAIN,UAAU,CAAC,EAAE;IAC/BA,UAAU,CAACM,UAAU,CAAC,GAAG,CAAC,CAAC;EAC7B;EACAN,UAAU,CAACM,UAAU,CAAC,CAACE,eAAe,CAAC,GAAGH,WAAW;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,MAAMA,CAACN,MAAM,EAAEC,WAAW,EAAE;EAC1C,MAAME,UAAU,GAAGH,MAAM,CAACI,OAAO,CAAC,CAAC;EACnC,MAAMC,eAAe,GAAGJ,WAAW,CAACG,OAAO,CAAC,CAAC;EAC7C,MAAMG,SAAS,GAAGV,UAAU,CAACM,UAAU,CAAC,CAACE,eAAe,CAAC;EACzD,OAAOR,UAAU,CAACM,UAAU,CAAC,CAACE,eAAe,CAAC;EAC9C,IAAIT,OAAO,CAACC,UAAU,CAACM,UAAU,CAAC,CAAC,EAAE;IACnC,OAAON,UAAU,CAACM,UAAU,CAAC;EAC/B;EACA,OAAOI,SAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,GAAGA,CAACL,UAAU,EAAEE,eAAe,EAAE;EAC/C,IAAIE,SAAS;EACb,IAAIJ,UAAU,IAAIN,UAAU,IAAIQ,eAAe,IAAIR,UAAU,CAACM,UAAU,CAAC,EAAE;IACzEI,SAAS,GAAGV,UAAU,CAACM,UAAU,CAAC,CAACE,eAAe,CAAC;EACrD;EACA,OAAOE,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}