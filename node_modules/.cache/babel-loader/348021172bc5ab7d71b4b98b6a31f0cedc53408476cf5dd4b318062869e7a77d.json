{"ast":null,"code":"/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, { zoomByDelta } from './Interaction.js';\nimport { platformModifierKey, targetNotEditable } from '../events/condition.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. The default condition is\n * that {@link module:ol/events/condition.targetNotEditable} is fulfilled and that\n * the platform modifier key isn't pressed\n * (!{@link module:ol/events/condition.platformModifierKey}).\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\nclass KeyboardZoom extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : function (mapBrowserEvent) {\n      return !platformModifierKey(mapBrowserEvent) && targetNotEditable(mapBrowserEvent);\n    };\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delta_ = options.delta ? options.delta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n   * key pressed was '+' or '-').\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n    if (mapBrowserEvent.type == EventType.KEYDOWN || mapBrowserEvent.type == EventType.KEYPRESS) {\n      const keyEvent = /** @type {KeyboardEvent} */\n      mapBrowserEvent.originalEvent;\n      const key = keyEvent.key;\n      if (this.condition_(mapBrowserEvent) && (key === '+' || key === '-')) {\n        const map = mapBrowserEvent.map;\n        const delta = key === '+' ? this.delta_ : -this.delta_;\n        const view = map.getView();\n        zoomByDelta(view, delta, undefined, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n    return !stopEvent;\n  }\n}\nexport default KeyboardZoom;","map":{"version":3,"names":["EventType","Interaction","zoomByDelta","platformModifierKey","targetNotEditable","KeyboardZoom","constructor","options","condition_","condition","mapBrowserEvent","delta_","delta","duration_","duration","undefined","handleEvent","stopEvent","type","KEYDOWN","KEYPRESS","keyEvent","originalEvent","key","map","view","getView","preventDefault"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/interaction/KeyboardZoom.js"],"sourcesContent":["/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, {zoomByDelta} from './Interaction.js';\nimport {platformModifierKey, targetNotEditable} from '../events/condition.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. The default condition is\n * that {@link module:ol/events/condition.targetNotEditable} is fulfilled and that\n * the platform modifier key isn't pressed\n * (!{@link module:ol/events/condition.platformModifierKey}).\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\nclass KeyboardZoom extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition\n      ? options.condition\n      : function (mapBrowserEvent) {\n          return (\n            !platformModifierKey(mapBrowserEvent) &&\n            targetNotEditable(mapBrowserEvent)\n          );\n        };\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delta_ = options.delta ? options.delta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n   * key pressed was '+' or '-').\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n    if (\n      mapBrowserEvent.type == EventType.KEYDOWN ||\n      mapBrowserEvent.type == EventType.KEYPRESS\n    ) {\n      const keyEvent = /** @type {KeyboardEvent} */ (\n        mapBrowserEvent.originalEvent\n      );\n      const key = keyEvent.key;\n      if (this.condition_(mapBrowserEvent) && (key === '+' || key === '-')) {\n        const map = mapBrowserEvent.map;\n        const delta = key === '+' ? this.delta_ : -this.delta_;\n        const view = map.getView();\n        zoomByDelta(view, delta, undefined, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n    return !stopEvent;\n  }\n}\n\nexport default KeyboardZoom;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,WAAW,IAAGC,WAAW,QAAO,kBAAkB;AACzD,SAAQC,mBAAmB,EAAEC,iBAAiB,QAAO,wBAAwB;;AAE7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,SAASJ,WAAW,CAAC;EACrC;AACF;AACA;EACEK,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAAC,CAAC;IAEPA,OAAO,GAAGA,OAAO,GAAGA,OAAO,GAAG,CAAC,CAAC;;IAEhC;AACJ;AACA;AACA;IACI,IAAI,CAACC,UAAU,GAAGD,OAAO,CAACE,SAAS,GAC/BF,OAAO,CAACE,SAAS,GACjB,UAAUC,eAAe,EAAE;MACzB,OACE,CAACP,mBAAmB,CAACO,eAAe,CAAC,IACrCN,iBAAiB,CAACM,eAAe,CAAC;IAEtC,CAAC;;IAEL;AACJ;AACA;AACA;IACI,IAAI,CAACC,MAAM,GAAGJ,OAAO,CAACK,KAAK,GAAGL,OAAO,CAACK,KAAK,GAAG,CAAC;;IAE/C;AACJ;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAGN,OAAO,CAACO,QAAQ,KAAKC,SAAS,GAAGR,OAAO,CAACO,QAAQ,GAAG,GAAG;EAC1E;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,WAAWA,CAACN,eAAe,EAAE;IAC3B,IAAIO,SAAS,GAAG,KAAK;IACrB,IACEP,eAAe,CAACQ,IAAI,IAAIlB,SAAS,CAACmB,OAAO,IACzCT,eAAe,CAACQ,IAAI,IAAIlB,SAAS,CAACoB,QAAQ,EAC1C;MACA,MAAMC,QAAQ,GAAG;MACfX,eAAe,CAACY,aACjB;MACD,MAAMC,GAAG,GAAGF,QAAQ,CAACE,GAAG;MACxB,IAAI,IAAI,CAACf,UAAU,CAACE,eAAe,CAAC,KAAKa,GAAG,KAAK,GAAG,IAAIA,GAAG,KAAK,GAAG,CAAC,EAAE;QACpE,MAAMC,GAAG,GAAGd,eAAe,CAACc,GAAG;QAC/B,MAAMZ,KAAK,GAAGW,GAAG,KAAK,GAAG,GAAG,IAAI,CAACZ,MAAM,GAAG,CAAC,IAAI,CAACA,MAAM;QACtD,MAAMc,IAAI,GAAGD,GAAG,CAACE,OAAO,CAAC,CAAC;QAC1BxB,WAAW,CAACuB,IAAI,EAAEb,KAAK,EAAEG,SAAS,EAAE,IAAI,CAACF,SAAS,CAAC;QACnDQ,QAAQ,CAACM,cAAc,CAAC,CAAC;QACzBV,SAAS,GAAG,IAAI;MAClB;IACF;IACA,OAAO,CAACA,SAAS;EACnB;AACF;AAEA,eAAeZ,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}