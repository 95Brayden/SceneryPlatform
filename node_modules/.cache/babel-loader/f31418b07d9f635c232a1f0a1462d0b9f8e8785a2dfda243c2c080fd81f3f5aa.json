{"ast":null,"code":"/**\n * @module ol/interaction/PinchZoom\n */\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\nimport { FALSE } from '../functions.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=400] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map by pinching with two fingers\n * on a touch screen.\n * @api\n */\nclass PinchZoom extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */\n    options;\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n    super(pointerOptions);\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 400;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastDistance_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.lastScaleDelta_ = 1;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    let scaleDelta = 1.0;\n    const touch0 = this.targetPointers[0];\n    const touch1 = this.targetPointers[1];\n    const dx = touch0.clientX - touch1.clientX;\n    const dy = touch0.clientY - touch1.clientY;\n\n    // distance between touches\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    if (this.lastDistance_ !== undefined) {\n      scaleDelta = this.lastDistance_ / distance;\n    }\n    this.lastDistance_ = distance;\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (scaleDelta != 1.0) {\n      this.lastScaleDelta_ = scaleDelta;\n    }\n\n    // scale anchor point.\n    this.anchor_ = map.getCoordinateFromPixelInternal(map.getEventPixel(centroidFromPointers(this.targetPointers)));\n\n    // scale, bypass the resolution constraint\n    map.render();\n    view.adjustResolutionInternal(scaleDelta, this.anchor_);\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      const direction = this.lastScaleDelta_ > 1 ? 1 : -1;\n      view.endInteraction(this.duration_, direction);\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      const map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastDistance_ = undefined;\n      this.lastScaleDelta_ = 1;\n      if (!this.handlingDownUpSequence) {\n        map.getView().beginInteraction();\n      }\n      return true;\n    }\n    return false;\n  }\n}\nexport default PinchZoom;","map":{"version":3,"names":["PointerInteraction","centroid","centroidFromPointers","FALSE","PinchZoom","constructor","options","pointerOptions","stopDown","anchor_","duration_","duration","undefined","lastDistance_","lastScaleDelta_","handleDragEvent","mapBrowserEvent","scaleDelta","touch0","targetPointers","touch1","dx","clientX","dy","clientY","distance","Math","sqrt","map","view","getView","getCoordinateFromPixelInternal","getEventPixel","render","adjustResolutionInternal","handleUpEvent","length","direction","endInteraction","handleDownEvent","handlingDownUpSequence","beginInteraction"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/interaction/PinchZoom.js"],"sourcesContent":["/**\n * @module ol/interaction/PinchZoom\n */\nimport PointerInteraction, {\n  centroid as centroidFromPointers,\n} from './Pointer.js';\nimport {FALSE} from '../functions.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=400] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map by pinching with two fingers\n * on a touch screen.\n * @api\n */\nclass PinchZoom extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (\n      options\n    );\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 400;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastDistance_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.lastScaleDelta_ = 1;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    let scaleDelta = 1.0;\n\n    const touch0 = this.targetPointers[0];\n    const touch1 = this.targetPointers[1];\n    const dx = touch0.clientX - touch1.clientX;\n    const dy = touch0.clientY - touch1.clientY;\n\n    // distance between touches\n    const distance = Math.sqrt(dx * dx + dy * dy);\n\n    if (this.lastDistance_ !== undefined) {\n      scaleDelta = this.lastDistance_ / distance;\n    }\n    this.lastDistance_ = distance;\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n\n    if (scaleDelta != 1.0) {\n      this.lastScaleDelta_ = scaleDelta;\n    }\n\n    // scale anchor point.\n    this.anchor_ = map.getCoordinateFromPixelInternal(\n      map.getEventPixel(centroidFromPointers(this.targetPointers))\n    );\n\n    // scale, bypass the resolution constraint\n    map.render();\n    view.adjustResolutionInternal(scaleDelta, this.anchor_);\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      const direction = this.lastScaleDelta_ > 1 ? 1 : -1;\n      view.endInteraction(this.duration_, direction);\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      const map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastDistance_ = undefined;\n      this.lastScaleDelta_ = 1;\n      if (!this.handlingDownUpSequence) {\n        map.getView().beginInteraction();\n      }\n      return true;\n    }\n    return false;\n  }\n}\n\nexport default PinchZoom;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}