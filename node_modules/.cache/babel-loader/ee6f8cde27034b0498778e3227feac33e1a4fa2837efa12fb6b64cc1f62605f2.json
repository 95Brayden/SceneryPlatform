{"ast":null,"code":"/**\n * @module ol/source/Image\n */\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageWrapper from '../Image.js';\nimport ReprojImage from '../reproj/Image.js';\nimport Source from './Source.js';\nimport { DECIMALS } from './common.js';\nimport { ceil } from '../math.js';\nimport { containsExtent, equals, getCenter, getForViewAndSize, getHeight, getWidth } from '../extent.js';\nimport { equivalent } from '../proj.js';\nimport { fromResolutionLike } from '../resolution.js';\nimport { linearFindNearest } from '../array.js';\n\n/**\n * @enum {string}\n */\nexport const ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror'\n};\n\n/**\n * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nexport class ImageSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n  constructor(type, image) {\n    super(type);\n\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n    this.image = image;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../Image.js\").Loader} [loader] Loader. Can either be a custom loader, or one of the\n * loaders created with a `createLoader()` function ({@link module:ol/source/wms.createLoader wms},\n * {@link module:ol/source/arcgisRest.createLoader arcgisRest}, {@link module:ol/source/mapguide.createLoader mapguide},\n * {@link module:ol/source/static.createLoader static}).\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {Array<number>} [resolutions] Resolutions.\n * @property {import(\"./Source.js\").State} [state] State.\n */\n\n/**\n * @classdesc\n * Base class for sources providing a single image.\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageSource extends Source {\n  /**\n   * @param {Options} options Single image source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state,\n      interpolate: options.interpolate !== undefined ? options.interpolate : true\n    });\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ImageSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").Loader}\n     */\n    this.loader = options.loader || null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.resolutions_ = options.resolutions !== undefined ? options.resolutions : null;\n\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n    this.reprojectedImage_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.reprojectedRevision_ = 0;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image = null;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.wantedExtent_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.wantedResolution_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.static_ = options.loader ? options.loader.length === 0 : false;\n  }\n\n  /**\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {Array<number>|null} resolutions Resolutions.\n   */\n  setResolutions(resolutions) {\n    this.resolutions_ = resolutions;\n  }\n\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  findNearestResolution(resolution) {\n    const resolutions = this.getResolutions();\n    if (resolutions) {\n      const idx = linearFindNearest(resolutions, resolution, 0);\n      resolution = resolutions[idx];\n    }\n    return resolution;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (!sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    }\n    if (this.reprojectedImage_) {\n      if (this.reprojectedRevision_ == this.getRevision() && equivalent(this.reprojectedImage_.getProjection(), projection) && this.reprojectedImage_.getResolution() == resolution && equals(this.reprojectedImage_.getExtent(), extent)) {\n        return this.reprojectedImage_;\n      }\n      this.reprojectedImage_.dispose();\n      this.reprojectedImage_ = null;\n    }\n    this.reprojectedImage_ = new ReprojImage(sourceProjection, projection, extent, resolution, pixelRatio, (extent, resolution, pixelRatio) => this.getImageInternal(extent, resolution, pixelRatio, sourceProjection), this.getInterpolate());\n    this.reprojectedRevision_ = this.getRevision();\n    return this.reprojectedImage_;\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @protected\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.loader) {\n      const requestExtent = getRequestExtent(extent, resolution, pixelRatio, 1);\n      const requestResolution = this.findNearestResolution(resolution);\n      if (this.image && (this.static_ || (this.wantedExtent_ && containsExtent(this.wantedExtent_, requestExtent) || containsExtent(this.image.getExtent(), requestExtent)) && (this.wantedResolution_ && fromResolutionLike(this.wantedResolution_) === requestResolution || fromResolutionLike(this.image.getResolution()) === requestResolution))) {\n        return this.image;\n      }\n      this.wantedExtent_ = requestExtent;\n      this.wantedResolution_ = requestResolution;\n      this.image = new ImageWrapper(requestExtent, requestResolution, pixelRatio, this.loader);\n      this.image.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n    }\n    return this.image;\n  }\n\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleImageChange(event) {\n    const image = /** @type {import(\"../Image.js\").default} */event.target;\n    let type;\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        type = ImageSourceEventType.IMAGELOADSTART;\n        break;\n      case ImageState.LOADED:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADEND;\n        break;\n      case ImageState.ERROR:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADERROR;\n        break;\n      default:\n        return;\n    }\n    if (this.hasListener(type)) {\n      this.dispatchEvent(new ImageSourceEvent(type, image));\n    }\n  }\n}\n\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */image.getImage().src = src;\n}\n\n/**\n * Adjusts the extent so it aligns with pixel boundaries.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {number} resolution Reolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} ratio Ratio between request size and view size.\n * @return {import(\"../extent.js\").Extent} Request extent.\n */\nexport function getRequestExtent(extent, resolution, pixelRatio, ratio) {\n  const imageResolution = resolution / pixelRatio;\n  const center = getCenter(extent);\n  const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n  const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n  const marginWidth = ceil((ratio - 1) * viewWidth / 2, DECIMALS);\n  const requestWidth = viewWidth + 2 * marginWidth;\n  const marginHeight = ceil((ratio - 1) * viewHeight / 2, DECIMALS);\n  const requestHeight = viewHeight + 2 * marginHeight;\n  return getForViewAndSize(center, imageResolution, 0, [requestWidth, requestHeight]);\n}\nexport default ImageSource;","map":{"version":3,"names":["Event","EventType","ImageState","ImageWrapper","ReprojImage","Source","DECIMALS","ceil","containsExtent","equals","getCenter","getForViewAndSize","getHeight","getWidth","equivalent","fromResolutionLike","linearFindNearest","ImageSourceEventType","IMAGELOADSTART","IMAGELOADEND","IMAGELOADERROR","ImageSourceEvent","constructor","type","image","ImageSource","options","attributions","projection","state","interpolate","undefined","on","once","un","loader","resolutions_","resolutions","reprojectedImage_","reprojectedRevision_","wantedExtent_","wantedResolution_","static_","length","getResolutions","setResolutions","findNearestResolution","resolution","idx","getImage","extent","pixelRatio","sourceProjection","getProjection","getImageInternal","getRevision","getResolution","getExtent","dispose","getInterpolate","requestExtent","getRequestExtent","requestResolution","addEventListener","CHANGE","handleImageChange","bind","event","target","getState","LOADING","loading","LOADED","ERROR","hasListener","dispatchEvent","defaultImageLoadFunction","src","ratio","imageResolution","center","viewWidth","viewHeight","marginWidth","requestWidth","marginHeight","requestHeight"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/source/Image.js"],"sourcesContent":["/**\n * @module ol/source/Image\n */\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageWrapper from '../Image.js';\nimport ReprojImage from '../reproj/Image.js';\nimport Source from './Source.js';\nimport {DECIMALS} from './common.js';\nimport {ceil} from '../math.js';\nimport {\n  containsExtent,\n  equals,\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n} from '../extent.js';\nimport {equivalent} from '../proj.js';\nimport {fromResolutionLike} from '../resolution.js';\nimport {linearFindNearest} from '../array.js';\n\n/**\n * @enum {string}\n */\nexport const ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror',\n};\n\n/**\n * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nexport class ImageSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n  constructor(type, image) {\n    super(type);\n\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n    this.image = image;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\n *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../Image.js\").Loader} [loader] Loader. Can either be a custom loader, or one of the\n * loaders created with a `createLoader()` function ({@link module:ol/source/wms.createLoader wms},\n * {@link module:ol/source/arcgisRest.createLoader arcgisRest}, {@link module:ol/source/mapguide.createLoader mapguide},\n * {@link module:ol/source/static.createLoader static}).\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {Array<number>} [resolutions] Resolutions.\n * @property {import(\"./Source.js\").State} [state] State.\n */\n\n/**\n * @classdesc\n * Base class for sources providing a single image.\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageSource extends Source {\n  /**\n   * @param {Options} options Single image source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n    });\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ImageSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").Loader}\n     */\n    this.loader = options.loader || null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.resolutions_ =\n      options.resolutions !== undefined ? options.resolutions : null;\n\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n    this.reprojectedImage_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.reprojectedRevision_ = 0;\n\n    /**\n     * @protected\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image = null;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.wantedExtent_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.wantedResolution_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.static_ = options.loader ? options.loader.length === 0 : false;\n  }\n\n  /**\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {Array<number>|null} resolutions Resolutions.\n   */\n  setResolutions(resolutions) {\n    this.resolutions_ = resolutions;\n  }\n\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  findNearestResolution(resolution) {\n    const resolutions = this.getResolutions();\n    if (resolutions) {\n      const idx = linearFindNearest(resolutions, resolution, 0);\n      resolution = resolutions[idx];\n    }\n    return resolution;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    }\n    if (this.reprojectedImage_) {\n      if (\n        this.reprojectedRevision_ == this.getRevision() &&\n        equivalent(this.reprojectedImage_.getProjection(), projection) &&\n        this.reprojectedImage_.getResolution() == resolution &&\n        equals(this.reprojectedImage_.getExtent(), extent)\n      ) {\n        return this.reprojectedImage_;\n      }\n      this.reprojectedImage_.dispose();\n      this.reprojectedImage_ = null;\n    }\n\n    this.reprojectedImage_ = new ReprojImage(\n      sourceProjection,\n      projection,\n      extent,\n      resolution,\n      pixelRatio,\n      (extent, resolution, pixelRatio) =>\n        this.getImageInternal(extent, resolution, pixelRatio, sourceProjection),\n      this.getInterpolate()\n    );\n    this.reprojectedRevision_ = this.getRevision();\n\n    return this.reprojectedImage_;\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   * @protected\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.loader) {\n      const requestExtent = getRequestExtent(extent, resolution, pixelRatio, 1);\n      const requestResolution = this.findNearestResolution(resolution);\n      if (\n        this.image &&\n        (this.static_ ||\n          (((this.wantedExtent_ &&\n            containsExtent(this.wantedExtent_, requestExtent)) ||\n            containsExtent(this.image.getExtent(), requestExtent)) &&\n            ((this.wantedResolution_ &&\n              fromResolutionLike(this.wantedResolution_) ===\n                requestResolution) ||\n              fromResolutionLike(this.image.getResolution()) ===\n                requestResolution)))\n      ) {\n        return this.image;\n      }\n      this.wantedExtent_ = requestExtent;\n      this.wantedResolution_ = requestResolution;\n      this.image = new ImageWrapper(\n        requestExtent,\n        requestResolution,\n        pixelRatio,\n        this.loader\n      );\n      this.image.addEventListener(\n        EventType.CHANGE,\n        this.handleImageChange.bind(this)\n      );\n    }\n    return this.image;\n  }\n\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleImageChange(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    let type;\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        type = ImageSourceEventType.IMAGELOADSTART;\n        break;\n      case ImageState.LOADED:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADEND;\n        break;\n      case ImageState.ERROR:\n        this.loading = false;\n        type = ImageSourceEventType.IMAGELOADERROR;\n        break;\n      default:\n        return;\n    }\n    if (this.hasListener(type)) {\n      this.dispatchEvent(new ImageSourceEvent(type, image));\n    }\n  }\n}\n\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;\n}\n\n/**\n * Adjusts the extent so it aligns with pixel boundaries.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {number} resolution Reolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} ratio Ratio between request size and view size.\n * @return {import(\"../extent.js\").Extent} Request extent.\n */\nexport function getRequestExtent(extent, resolution, pixelRatio, ratio) {\n  const imageResolution = resolution / pixelRatio;\n  const center = getCenter(extent);\n  const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\n  const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\n  const marginWidth = ceil(((ratio - 1) * viewWidth) / 2, DECIMALS);\n  const requestWidth = viewWidth + 2 * marginWidth;\n  const marginHeight = ceil(((ratio - 1) * viewHeight) / 2, DECIMALS);\n  const requestHeight = viewHeight + 2 * marginHeight;\n  return getForViewAndSize(center, imageResolution, 0, [\n    requestWidth,\n    requestHeight,\n  ]);\n}\n\nexport default ImageSource;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}