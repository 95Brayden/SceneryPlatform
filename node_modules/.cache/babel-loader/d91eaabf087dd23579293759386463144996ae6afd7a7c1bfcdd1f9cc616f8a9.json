{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/geom/Polygon\n */\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { arrayMaxSquaredDelta, assignClosestArrayPoint } from './flat/closest.js';\nimport { closestSquaredDistanceXY, getCenter, isEmpty } from '../extent.js';\nimport { deflateCoordinatesArray } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { getInteriorPointOfArray } from './flat/interiorpoint.js';\nimport { inflateCoordinatesArray } from './flat/inflate.js';\nimport { intersectsLinearRingArray } from './flat/intersectsextent.js';\nimport { linearRingsAreOriented, orientLinearRings } from './flat/orient.js';\nimport { linearRings as linearRingsArea } from './flat/area.js';\nimport { linearRingsContainsXY } from './flat/contains.js';\nimport { modulo } from '../math.js';\nimport { quantizeArray } from './flat/simplify.js';\nimport { offset as sphereOffset } from '../sphere.js';\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nclass Polygon extends SimpleGeometry {\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).\n   */\n  constructor(coordinates, layout, ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatInteriorPoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.orientedFlatCoordinates_ = null;\n    if (layout !== undefined && ends) {\n      this.setFlatCoordinates(layout, /** @type {Array<number>} */coordinates);\n      this.ends_ = ends;\n    } else {\n      this.setCoordinates( /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */\n      coordinates, layout);\n    }\n  }\n\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n  appendLinearRing(linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @api\n   */\n  clone() {\n    const polygon = new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n    polygon.applyProperties(this);\n    return polygon;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);\n  }\n\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingsArea(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean} [right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  getCoordinates(right) {\n    let flatCoordinates;\n    if (right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * @return {Array<number>} Interior point.\n   */\n  getFlatInteriorPoint() {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n    return this.flatInteriorPoint_;\n  }\n\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoint() {\n    return new Point(this.getFlatInteriorPoint(), 'XYM');\n  }\n\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n  getLinearRingCount() {\n    return this.ends_.length;\n  }\n\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing|null} Linear ring.\n   * @api\n   */\n  getLinearRing(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LinearRing(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n  }\n\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n  getLinearRings() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const linearRings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const linearRing = new LinearRing(flatCoordinates.slice(offset, end), layout);\n      linearRings.push(linearRing);\n      offset = end;\n    }\n    return linearRings;\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRings(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return this.orientedFlatCoordinates_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Polygon} Simplified Polygon.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);\n    return new Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Polygon';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);\n  }\n\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\nexport default Polygon;\n\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices in meters.\n * @param {number} [n] Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number} [sphereRadius] Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, n, sphereRadius) {\n  n = n ? n : 32;\n  /** @type {Array<number>} */\n  const flatCoordinates = [];\n  for (let i = 0; i < n; ++i) {\n    extend(flatCoordinates, sphereOffset(center, radius, 2 * Math.PI * i / n, sphereRadius));\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n  if (isEmpty(extent)) {\n    throw new Error('Cannot create polygon from empty extent');\n  }\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const flatCoordinates = [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number} [sides] Number of sides of the polygon. Default is 32.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, sides, angle) {\n  sides = sides ? sides : 32;\n  const stride = circle.getStride();\n  const layout = circle.getLayout();\n  const center = circle.getCenter();\n  const arrayLength = stride * (sides + 1);\n  const flatCoordinates = new Array(arrayLength);\n  for (let i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (let j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  const ends = [flatCoordinates.length];\n  const polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), angle);\n  return polygon;\n}\n\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, angle) {\n  const flatCoordinates = polygon.getFlatCoordinates();\n  const stride = polygon.getStride();\n  const sides = flatCoordinates.length / stride - 1;\n  const startAngle = angle ? angle : 0;\n  for (let i = 0; i <= sides; ++i) {\n    const offset = i * stride;\n    const angle = startAngle + modulo(i, sides) * 2 * Math.PI / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n  polygon.changed();\n}","map":{"version":3,"names":["LinearRing","Point","SimpleGeometry","arrayMaxSquaredDelta","assignClosestArrayPoint","closestSquaredDistanceXY","getCenter","isEmpty","deflateCoordinatesArray","extend","getInteriorPointOfArray","inflateCoordinatesArray","intersectsLinearRingArray","linearRingsAreOriented","orientLinearRings","linearRings","linearRingsArea","linearRingsContainsXY","modulo","quantizeArray","offset","sphereOffset","Polygon","constructor","coordinates","layout","ends","ends_","flatInteriorPointRevision_","flatInteriorPoint_","maxDelta_","maxDeltaRevision_","orientedRevision_","orientedFlatCoordinates_","undefined","setFlatCoordinates","setCoordinates","appendLinearRing","linearRing","flatCoordinates","getFlatCoordinates","slice","push","length","changed","clone","polygon","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","stride","containsXY","getOrientedFlatCoordinates","getArea","getCoordinates","right","getEnds","getFlatInteriorPoint","flatCenter","getInteriorPoint","getLinearRingCount","getLinearRing","index","getLinearRings","i","ii","end","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEnds","getType","intersectsExtent","extent","setLayout","circular","center","radius","n","sphereRadius","PI","fromExtent","Error","minX","minY","maxX","maxY","fromCircle","circle","sides","angle","getStride","getLayout","arrayLength","Array","j","makeRegular","getRadius","startAngle","cos","sin"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/geom/Polygon.js"],"sourcesContent":["/**\n * @module ol/geom/Polygon\n */\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\nimport {closestSquaredDistanceXY, getCenter, isEmpty} from '../extent.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {getInteriorPointOfArray} from './flat/interiorpoint.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {intersectsLinearRingArray} from './flat/intersectsextent.js';\nimport {linearRingsAreOriented, orientLinearRings} from './flat/orient.js';\nimport {linearRings as linearRingsArea} from './flat/area.js';\nimport {linearRingsContainsXY} from './flat/contains.js';\nimport {modulo} from '../math.js';\nimport {quantizeArray} from './flat/simplify.js';\nimport {offset as sphereOffset} from '../sphere.js';\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nclass Polygon extends SimpleGeometry {\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).\n   */\n  constructor(coordinates, layout, ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatInteriorPoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (layout !== undefined && ends) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n      this.ends_ = ends;\n    } else {\n      this.setCoordinates(\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n  appendLinearRing(linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @api\n   */\n  clone() {\n    const polygon = new Polygon(\n      this.flatCoordinates.slice(),\n      this.layout,\n      this.ends_.slice()\n    );\n    polygon.applyProperties(this);\n    return polygon;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        arrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.ends_,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    return linearRingsContainsXY(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingsArea(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride\n    );\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean} [right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  getCoordinates(right) {\n    let flatCoordinates;\n    if (right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * @return {Array<number>} Interior point.\n   */\n  getFlatInteriorPoint() {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(\n        this.getOrientedFlatCoordinates(),\n        0,\n        this.ends_,\n        this.stride,\n        flatCenter,\n        0\n      );\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n    return this.flatInteriorPoint_;\n  }\n\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoint() {\n    return new Point(this.getFlatInteriorPoint(), 'XYM');\n  }\n\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n  getLinearRingCount() {\n    return this.ends_.length;\n  }\n\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing|null} Linear ring.\n   * @api\n   */\n  getLinearRing(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LinearRing(\n      this.flatCoordinates.slice(\n        index === 0 ? 0 : this.ends_[index - 1],\n        this.ends_[index]\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n  getLinearRings() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const linearRings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const linearRing = new LinearRing(\n        flatCoordinates.slice(offset, end),\n        layout\n      );\n      linearRings.push(linearRing);\n      offset = end;\n    }\n    return linearRings;\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRings(\n          this.orientedFlatCoordinates_,\n          0,\n          this.ends_,\n          this.stride\n        );\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return this.orientedFlatCoordinates_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Polygon} Simplified Polygon.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEnds\n    );\n    return new Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Polygon';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingArray(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.ends_\n    );\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\nexport default Polygon;\n\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices in meters.\n * @param {number} [n] Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number} [sphereRadius] Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, n, sphereRadius) {\n  n = n ? n : 32;\n  /** @type {Array<number>} */\n  const flatCoordinates = [];\n  for (let i = 0; i < n; ++i) {\n    extend(\n      flatCoordinates,\n      sphereOffset(center, radius, (2 * Math.PI * i) / n, sphereRadius)\n    );\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n  if (isEmpty(extent)) {\n    throw new Error('Cannot create polygon from empty extent');\n  }\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const flatCoordinates = [\n    minX,\n    minY,\n    minX,\n    maxY,\n    maxX,\n    maxY,\n    maxX,\n    minY,\n    minX,\n    minY,\n  ];\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number} [sides] Number of sides of the polygon. Default is 32.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, sides, angle) {\n  sides = sides ? sides : 32;\n  const stride = circle.getStride();\n  const layout = circle.getLayout();\n  const center = circle.getCenter();\n  const arrayLength = stride * (sides + 1);\n  const flatCoordinates = new Array(arrayLength);\n  for (let i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (let j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  const ends = [flatCoordinates.length];\n  const polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), angle);\n  return polygon;\n}\n\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, angle) {\n  const flatCoordinates = polygon.getFlatCoordinates();\n  const stride = polygon.getStride();\n  const sides = flatCoordinates.length / stride - 1;\n  const startAngle = angle ? angle : 0;\n  for (let i = 0; i <= sides; ++i) {\n    const offset = i * stride;\n    const angle = startAngle + (modulo(i, sides) * 2 * Math.PI) / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n  polygon.changed();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}