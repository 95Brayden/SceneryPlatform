{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/reproj\n */\nimport { containsCoordinate, createEmpty, extend, forEachCorner, getCenter, getHeight, getTopLeft, getWidth } from './extent.js';\nimport { createCanvasContext2D, releaseCanvas } from './dom.js';\nimport { getPointResolution, transform } from './proj.js';\nimport { solveLinearSystem } from './math.js';\nlet brokenDiagonalRendering_;\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport const canvasPool = [];\n\n/**\n * This draws a small triangle into a canvas by setting the triangle as the clip region\n * and then drawing a (too large) rectangle\n *\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\n * @param {number} v1 The y-coordinate of the second point.\n * @param {number} u2 The x-coordinate of the third point.\n * @param {number} v2 The y-coordinate of the third point.\n */\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\n  ctx.beginPath();\n  ctx.moveTo(0, 0);\n  ctx.lineTo(u1, v1);\n  ctx.lineTo(u2, v2);\n  ctx.closePath();\n  ctx.save();\n  ctx.clip();\n  ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n  ctx.restore();\n}\n\n/**\n * Given the data from getImageData, see if the right values appear at the provided offset.\n * Returns true if either the color or transparency is off\n *\n * @param {Uint8ClampedArray} data The data returned from getImageData\n * @param {number} offset The pixel offset from the start of data.\n * @return {boolean} true if the diagonal rendering is broken\n */\nfunction verifyBrokenDiagonalRendering(data, offset) {\n  // the values ought to be close to the rgba(210, 0, 0, 0.75)\n  return Math.abs(data[offset * 4] - 210) > 2 || Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2;\n}\n\n/**\n * Determines if the current browser configuration can render triangular clip regions correctly.\n * This value is cached so the function is only expensive the first time called.\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\n * Chrome works, and everything seems to work on OSX and Android. This function caches the\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\n * running, but lets hope not.\n *\n * @return {boolean} true if the Diagonal Rendering is broken.\n */\nfunction isBrokenDiagonalRendering() {\n  if (brokenDiagonalRendering_ === undefined) {\n    const ctx = createCanvasContext2D(6, 6, canvasPool);\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\n    drawTestTriangle(ctx, 4, 5, 4, 0);\n    drawTestTriangle(ctx, 4, 5, 0, 5);\n    const data = ctx.getImageData(0, 0, 3, 3).data;\n    brokenDiagonalRendering_ = verifyBrokenDiagonalRendering(data, 0) || verifyBrokenDiagonalRendering(data, 4) || verifyBrokenDiagonalRendering(data, 8);\n    releaseCanvas(ctx);\n    canvasPool.push(ctx.canvas);\n  }\n  return brokenDiagonalRendering_;\n}\n\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution) {\n  const sourceCenter = transform(targetCenter, targetProj, sourceProj);\n\n  // calculate the ideal resolution of the source data\n  let sourceResolution = getPointResolution(targetProj, targetResolution, targetCenter);\n  const targetMetersPerUnit = targetProj.getMetersPerUnit();\n  if (targetMetersPerUnit !== undefined) {\n    sourceResolution *= targetMetersPerUnit;\n  }\n  const sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n  if (sourceMetersPerUnit !== undefined) {\n    sourceResolution /= sourceMetersPerUnit;\n  }\n\n  // Based on the projection properties, the point resolution at the specified\n  // coordinates may be slightly different. We need to reverse-compensate this\n  // in order to achieve optimal results.\n\n  const sourceExtent = sourceProj.getExtent();\n  if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\n    const compensationFactor = getPointResolution(sourceProj, sourceResolution, sourceCenter) / sourceResolution;\n    if (isFinite(compensationFactor) && compensationFactor > 0) {\n      sourceResolution /= compensationFactor;\n    }\n  }\n  return sourceResolution;\n}\n\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceExtentResolution(sourceProj, targetProj, targetExtent, targetResolution) {\n  const targetCenter = getCenter(targetExtent);\n  let sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n    forEachCorner(targetExtent, function (corner) {\n      sourceResolution = calculateSourceResolution(sourceProj, targetProj, corner, targetResolution);\n      return isFinite(sourceResolution) && sourceResolution > 0;\n    });\n  }\n  return sourceResolution;\n}\n\n/**\n * @typedef {Object} ImageExtent\n * @property {import(\"./extent.js\").Extent} extent Extent.\n * @property {import('./DataTile.js').ImageLike} image Image.\n */\n\n/**\n * Renders the source data into new canvas based on the triangulation.\n *\n * @param {number} width Width of the canvas.\n * @param {number} height Height of the canvas.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} sourceResolution Source resolution.\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\n * @param {number} targetResolution Target resolution.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation Calculated triangulation.\n * @param {Array<ImageExtent>} sources Array of sources.\n * @param {number} gutter Gutter of the sources.\n * @param {boolean} [renderEdges] Render reprojection edges.\n * @param {boolean} [interpolate] Use linear interpolation when resampling.\n * @return {HTMLCanvasElement} Canvas with reprojected data.\n */\nexport function render(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, renderEdges, interpolate) {\n  const context = createCanvasContext2D(Math.round(pixelRatio * width), Math.round(pixelRatio * height), canvasPool);\n  if (!interpolate) {\n    context.imageSmoothingEnabled = false;\n  }\n  if (sources.length === 0) {\n    return context.canvas;\n  }\n  context.scale(pixelRatio, pixelRatio);\n  function pixelRound(value) {\n    return Math.round(value * pixelRatio) / pixelRatio;\n  }\n  context.globalCompositeOperation = 'lighter';\n  const sourceDataExtent = createEmpty();\n  sources.forEach(function (src, i, arr) {\n    extend(sourceDataExtent, src.extent);\n  });\n  const canvasWidthInUnits = getWidth(sourceDataExtent);\n  const canvasHeightInUnits = getHeight(sourceDataExtent);\n  const stitchContext = createCanvasContext2D(Math.round(pixelRatio * canvasWidthInUnits / sourceResolution), Math.round(pixelRatio * canvasHeightInUnits / sourceResolution), canvasPool);\n  if (!interpolate) {\n    stitchContext.imageSmoothingEnabled = false;\n  }\n  const stitchScale = pixelRatio / sourceResolution;\n  sources.forEach(function (src, i, arr) {\n    const xPos = src.extent[0] - sourceDataExtent[0];\n    const yPos = -(src.extent[3] - sourceDataExtent[3]);\n    const srcWidth = getWidth(src.extent);\n    const srcHeight = getHeight(src.extent);\n\n    // This test should never fail -- but it does. Need to find a fix the upstream condition\n    if (src.image.width > 0 && src.image.height > 0) {\n      stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, xPos * stitchScale, yPos * stitchScale, srcWidth * stitchScale, srcHeight * stitchScale);\n    }\n  });\n  const targetTopLeft = getTopLeft(targetExtent);\n  triangulation.getTriangles().forEach(function (triangle, i, arr) {\n    /* Calculate affine transform (src -> dst)\n     * Resulting matrix can be used to transform coordinate\n     * from `sourceProjection` to destination pixels.\n     *\n     * To optimize number of context calls and increase numerical stability,\n     * we also do the following operations:\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\n     *\n     * Src points: xi, yi\n     * Dst points: ui, vi\n     * Affine coefficients: aij\n     *\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\n     */\n    const source = triangle.source;\n    const target = triangle.target;\n    let x0 = source[0][0],\n      y0 = source[0][1];\n    let x1 = source[1][0],\n      y1 = source[1][1];\n    let x2 = source[2][0],\n      y2 = source[2][1];\n    // Make sure that everything is on pixel boundaries\n    const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n    const v0 = pixelRound(-(target[0][1] - targetTopLeft[1]) / targetResolution);\n    const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n    const v1 = pixelRound(-(target[1][1] - targetTopLeft[1]) / targetResolution);\n    const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n    const v2 = pixelRound(-(target[2][1] - targetTopLeft[1]) / targetResolution);\n\n    // Shift all the source points to improve numerical stability\n    // of all the subsequent calculations. The [x0, y0] is used here.\n    // This is also used to simplify the linear system.\n    const sourceNumericalShiftX = x0;\n    const sourceNumericalShiftY = y0;\n    x0 = 0;\n    y0 = 0;\n    x1 -= sourceNumericalShiftX;\n    y1 -= sourceNumericalShiftY;\n    x2 -= sourceNumericalShiftX;\n    y2 -= sourceNumericalShiftY;\n    const augmentedMatrix = [[x1, y1, 0, 0, u1 - u0], [x2, y2, 0, 0, u2 - u0], [0, 0, x1, y1, v1 - v0], [0, 0, x2, y2, v2 - v0]];\n    const affineCoefs = solveLinearSystem(augmentedMatrix);\n    if (!affineCoefs) {\n      return;\n    }\n    context.save();\n    context.beginPath();\n    if (isBrokenDiagonalRendering() || !interpolate) {\n      // Make sure that all lines are horizontal or vertical\n      context.moveTo(u1, v1);\n      // This is the diagonal line. Do it in 4 steps\n      const steps = 4;\n      const ud = u0 - u1;\n      const vd = v0 - v1;\n      for (let step = 0; step < steps; step++) {\n        // Go horizontally\n        context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound(step * vd / (steps - 1)));\n        // Go vertically\n        if (step != steps - 1) {\n          context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound((step + 1) * vd / (steps - 1)));\n        }\n      }\n      // We are almost at u0r, v0r\n      context.lineTo(u2, v2);\n    } else {\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n    }\n    context.clip();\n    context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);\n    context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);\n    context.scale(sourceResolution / pixelRatio, -sourceResolution / pixelRatio);\n    context.drawImage(stitchContext.canvas, 0, 0);\n    context.restore();\n  });\n  releaseCanvas(stitchContext);\n  canvasPool.push(stitchContext.canvas);\n  if (renderEdges) {\n    context.save();\n    context.globalCompositeOperation = 'source-over';\n    context.strokeStyle = 'black';\n    context.lineWidth = 1;\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\n      const target = triangle.target;\n      const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n      const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n      const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n      const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n      const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n      const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n      context.beginPath();\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n      context.closePath();\n      context.stroke();\n    });\n    context.restore();\n  }\n  return context.canvas;\n}","map":{"version":3,"names":["containsCoordinate","createEmpty","extend","forEachCorner","getCenter","getHeight","getTopLeft","getWidth","createCanvasContext2D","releaseCanvas","getPointResolution","transform","solveLinearSystem","brokenDiagonalRendering_","canvasPool","drawTestTriangle","ctx","u1","v1","u2","v2","beginPath","moveTo","lineTo","closePath","save","clip","fillRect","Math","max","restore","verifyBrokenDiagonalRendering","data","offset","abs","isBrokenDiagonalRendering","undefined","globalCompositeOperation","fillStyle","getImageData","push","canvas","calculateSourceResolution","sourceProj","targetProj","targetCenter","targetResolution","sourceCenter","sourceResolution","targetMetersPerUnit","getMetersPerUnit","sourceMetersPerUnit","sourceExtent","getExtent","compensationFactor","isFinite","calculateSourceExtentResolution","targetExtent","corner","render","width","height","pixelRatio","triangulation","sources","gutter","renderEdges","interpolate","context","round","imageSmoothingEnabled","length","scale","pixelRound","value","sourceDataExtent","forEach","src","i","arr","extent","canvasWidthInUnits","canvasHeightInUnits","stitchContext","stitchScale","xPos","yPos","srcWidth","srcHeight","image","drawImage","targetTopLeft","getTriangles","triangle","source","target","x0","y0","x1","y1","x2","y2","u0","v0","sourceNumericalShiftX","sourceNumericalShiftY","augmentedMatrix","affineCoefs","steps","ud","vd","step","translate","strokeStyle","lineWidth","stroke"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/reproj.js"],"sourcesContent":["/**\n * @module ol/reproj\n */\nimport {\n  containsCoordinate,\n  createEmpty,\n  extend,\n  forEachCorner,\n  getCenter,\n  getHeight,\n  getTopLeft,\n  getWidth,\n} from './extent.js';\nimport {createCanvasContext2D, releaseCanvas} from './dom.js';\nimport {getPointResolution, transform} from './proj.js';\nimport {solveLinearSystem} from './math.js';\n\nlet brokenDiagonalRendering_;\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport const canvasPool = [];\n\n/**\n * This draws a small triangle into a canvas by setting the triangle as the clip region\n * and then drawing a (too large) rectangle\n *\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\n * @param {number} v1 The y-coordinate of the second point.\n * @param {number} u2 The x-coordinate of the third point.\n * @param {number} v2 The y-coordinate of the third point.\n */\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\n  ctx.beginPath();\n  ctx.moveTo(0, 0);\n  ctx.lineTo(u1, v1);\n  ctx.lineTo(u2, v2);\n  ctx.closePath();\n  ctx.save();\n  ctx.clip();\n  ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n  ctx.restore();\n}\n\n/**\n * Given the data from getImageData, see if the right values appear at the provided offset.\n * Returns true if either the color or transparency is off\n *\n * @param {Uint8ClampedArray} data The data returned from getImageData\n * @param {number} offset The pixel offset from the start of data.\n * @return {boolean} true if the diagonal rendering is broken\n */\nfunction verifyBrokenDiagonalRendering(data, offset) {\n  // the values ought to be close to the rgba(210, 0, 0, 0.75)\n  return (\n    Math.abs(data[offset * 4] - 210) > 2 ||\n    Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2\n  );\n}\n\n/**\n * Determines if the current browser configuration can render triangular clip regions correctly.\n * This value is cached so the function is only expensive the first time called.\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\n * Chrome works, and everything seems to work on OSX and Android. This function caches the\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\n * running, but lets hope not.\n *\n * @return {boolean} true if the Diagonal Rendering is broken.\n */\nfunction isBrokenDiagonalRendering() {\n  if (brokenDiagonalRendering_ === undefined) {\n    const ctx = createCanvasContext2D(6, 6, canvasPool);\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\n    drawTestTriangle(ctx, 4, 5, 4, 0);\n    drawTestTriangle(ctx, 4, 5, 0, 5);\n    const data = ctx.getImageData(0, 0, 3, 3).data;\n    brokenDiagonalRendering_ =\n      verifyBrokenDiagonalRendering(data, 0) ||\n      verifyBrokenDiagonalRendering(data, 4) ||\n      verifyBrokenDiagonalRendering(data, 8);\n    releaseCanvas(ctx);\n    canvasPool.push(ctx.canvas);\n  }\n\n  return brokenDiagonalRendering_;\n}\n\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceResolution(\n  sourceProj,\n  targetProj,\n  targetCenter,\n  targetResolution\n) {\n  const sourceCenter = transform(targetCenter, targetProj, sourceProj);\n\n  // calculate the ideal resolution of the source data\n  let sourceResolution = getPointResolution(\n    targetProj,\n    targetResolution,\n    targetCenter\n  );\n\n  const targetMetersPerUnit = targetProj.getMetersPerUnit();\n  if (targetMetersPerUnit !== undefined) {\n    sourceResolution *= targetMetersPerUnit;\n  }\n  const sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n  if (sourceMetersPerUnit !== undefined) {\n    sourceResolution /= sourceMetersPerUnit;\n  }\n\n  // Based on the projection properties, the point resolution at the specified\n  // coordinates may be slightly different. We need to reverse-compensate this\n  // in order to achieve optimal results.\n\n  const sourceExtent = sourceProj.getExtent();\n  if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\n    const compensationFactor =\n      getPointResolution(sourceProj, sourceResolution, sourceCenter) /\n      sourceResolution;\n    if (isFinite(compensationFactor) && compensationFactor > 0) {\n      sourceResolution /= compensationFactor;\n    }\n  }\n\n  return sourceResolution;\n}\n\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceExtentResolution(\n  sourceProj,\n  targetProj,\n  targetExtent,\n  targetResolution\n) {\n  const targetCenter = getCenter(targetExtent);\n  let sourceResolution = calculateSourceResolution(\n    sourceProj,\n    targetProj,\n    targetCenter,\n    targetResolution\n  );\n\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n    forEachCorner(targetExtent, function (corner) {\n      sourceResolution = calculateSourceResolution(\n        sourceProj,\n        targetProj,\n        corner,\n        targetResolution\n      );\n      return isFinite(sourceResolution) && sourceResolution > 0;\n    });\n  }\n\n  return sourceResolution;\n}\n\n/**\n * @typedef {Object} ImageExtent\n * @property {import(\"./extent.js\").Extent} extent Extent.\n * @property {import('./DataTile.js').ImageLike} image Image.\n */\n\n/**\n * Renders the source data into new canvas based on the triangulation.\n *\n * @param {number} width Width of the canvas.\n * @param {number} height Height of the canvas.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} sourceResolution Source resolution.\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\n * @param {number} targetResolution Target resolution.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation Calculated triangulation.\n * @param {Array<ImageExtent>} sources Array of sources.\n * @param {number} gutter Gutter of the sources.\n * @param {boolean} [renderEdges] Render reprojection edges.\n * @param {boolean} [interpolate] Use linear interpolation when resampling.\n * @return {HTMLCanvasElement} Canvas with reprojected data.\n */\nexport function render(\n  width,\n  height,\n  pixelRatio,\n  sourceResolution,\n  sourceExtent,\n  targetResolution,\n  targetExtent,\n  triangulation,\n  sources,\n  gutter,\n  renderEdges,\n  interpolate\n) {\n  const context = createCanvasContext2D(\n    Math.round(pixelRatio * width),\n    Math.round(pixelRatio * height),\n    canvasPool\n  );\n\n  if (!interpolate) {\n    context.imageSmoothingEnabled = false;\n  }\n\n  if (sources.length === 0) {\n    return context.canvas;\n  }\n\n  context.scale(pixelRatio, pixelRatio);\n\n  function pixelRound(value) {\n    return Math.round(value * pixelRatio) / pixelRatio;\n  }\n\n  context.globalCompositeOperation = 'lighter';\n\n  const sourceDataExtent = createEmpty();\n  sources.forEach(function (src, i, arr) {\n    extend(sourceDataExtent, src.extent);\n  });\n\n  const canvasWidthInUnits = getWidth(sourceDataExtent);\n  const canvasHeightInUnits = getHeight(sourceDataExtent);\n  const stitchContext = createCanvasContext2D(\n    Math.round((pixelRatio * canvasWidthInUnits) / sourceResolution),\n    Math.round((pixelRatio * canvasHeightInUnits) / sourceResolution),\n    canvasPool\n  );\n\n  if (!interpolate) {\n    stitchContext.imageSmoothingEnabled = false;\n  }\n\n  const stitchScale = pixelRatio / sourceResolution;\n\n  sources.forEach(function (src, i, arr) {\n    const xPos = src.extent[0] - sourceDataExtent[0];\n    const yPos = -(src.extent[3] - sourceDataExtent[3]);\n    const srcWidth = getWidth(src.extent);\n    const srcHeight = getHeight(src.extent);\n\n    // This test should never fail -- but it does. Need to find a fix the upstream condition\n    if (src.image.width > 0 && src.image.height > 0) {\n      stitchContext.drawImage(\n        src.image,\n        gutter,\n        gutter,\n        src.image.width - 2 * gutter,\n        src.image.height - 2 * gutter,\n        xPos * stitchScale,\n        yPos * stitchScale,\n        srcWidth * stitchScale,\n        srcHeight * stitchScale\n      );\n    }\n  });\n\n  const targetTopLeft = getTopLeft(targetExtent);\n\n  triangulation.getTriangles().forEach(function (triangle, i, arr) {\n    /* Calculate affine transform (src -> dst)\n     * Resulting matrix can be used to transform coordinate\n     * from `sourceProjection` to destination pixels.\n     *\n     * To optimize number of context calls and increase numerical stability,\n     * we also do the following operations:\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\n     *\n     * Src points: xi, yi\n     * Dst points: ui, vi\n     * Affine coefficients: aij\n     *\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\n     */\n    const source = triangle.source;\n    const target = triangle.target;\n    let x0 = source[0][0],\n      y0 = source[0][1];\n    let x1 = source[1][0],\n      y1 = source[1][1];\n    let x2 = source[2][0],\n      y2 = source[2][1];\n    // Make sure that everything is on pixel boundaries\n    const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n    const v0 = pixelRound(\n      -(target[0][1] - targetTopLeft[1]) / targetResolution\n    );\n    const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n    const v1 = pixelRound(\n      -(target[1][1] - targetTopLeft[1]) / targetResolution\n    );\n    const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n    const v2 = pixelRound(\n      -(target[2][1] - targetTopLeft[1]) / targetResolution\n    );\n\n    // Shift all the source points to improve numerical stability\n    // of all the subsequent calculations. The [x0, y0] is used here.\n    // This is also used to simplify the linear system.\n    const sourceNumericalShiftX = x0;\n    const sourceNumericalShiftY = y0;\n    x0 = 0;\n    y0 = 0;\n    x1 -= sourceNumericalShiftX;\n    y1 -= sourceNumericalShiftY;\n    x2 -= sourceNumericalShiftX;\n    y2 -= sourceNumericalShiftY;\n\n    const augmentedMatrix = [\n      [x1, y1, 0, 0, u1 - u0],\n      [x2, y2, 0, 0, u2 - u0],\n      [0, 0, x1, y1, v1 - v0],\n      [0, 0, x2, y2, v2 - v0],\n    ];\n    const affineCoefs = solveLinearSystem(augmentedMatrix);\n    if (!affineCoefs) {\n      return;\n    }\n\n    context.save();\n    context.beginPath();\n\n    if (isBrokenDiagonalRendering() || !interpolate) {\n      // Make sure that all lines are horizontal or vertical\n      context.moveTo(u1, v1);\n      // This is the diagonal line. Do it in 4 steps\n      const steps = 4;\n      const ud = u0 - u1;\n      const vd = v0 - v1;\n      for (let step = 0; step < steps; step++) {\n        // Go horizontally\n        context.lineTo(\n          u1 + pixelRound(((step + 1) * ud) / steps),\n          v1 + pixelRound((step * vd) / (steps - 1))\n        );\n        // Go vertically\n        if (step != steps - 1) {\n          context.lineTo(\n            u1 + pixelRound(((step + 1) * ud) / steps),\n            v1 + pixelRound(((step + 1) * vd) / (steps - 1))\n          );\n        }\n      }\n      // We are almost at u0r, v0r\n      context.lineTo(u2, v2);\n    } else {\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n    }\n\n    context.clip();\n\n    context.transform(\n      affineCoefs[0],\n      affineCoefs[2],\n      affineCoefs[1],\n      affineCoefs[3],\n      u0,\n      v0\n    );\n\n    context.translate(\n      sourceDataExtent[0] - sourceNumericalShiftX,\n      sourceDataExtent[3] - sourceNumericalShiftY\n    );\n\n    context.scale(\n      sourceResolution / pixelRatio,\n      -sourceResolution / pixelRatio\n    );\n\n    context.drawImage(stitchContext.canvas, 0, 0);\n    context.restore();\n  });\n\n  releaseCanvas(stitchContext);\n  canvasPool.push(stitchContext.canvas);\n\n  if (renderEdges) {\n    context.save();\n\n    context.globalCompositeOperation = 'source-over';\n    context.strokeStyle = 'black';\n    context.lineWidth = 1;\n\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\n      const target = triangle.target;\n      const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n      const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n      const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n      const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n      const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n      const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n\n      context.beginPath();\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n      context.closePath();\n      context.stroke();\n    });\n\n    context.restore();\n  }\n  return context.canvas;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}