{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/Image\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport ImageState from './ImageState.js';\nimport { CREATE_IMAGE_BITMAP, IMAGE_DECODE } from './has.js';\nimport { listenOnce, unlistenByKey } from './events.js';\nimport { toPromise } from './functions.js';\n\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(import(\"./Image.js\").default, string): void} LoadFunction\n * @api\n */\n\n/**\n * @typedef {Object} ImageObject\n * @property {import(\"./extent.js\").Extent} [extent] Extent, if different from the requested one.\n * @property {import(\"./resolution.js\").ResolutionLike} [resolution] Resolution, if different from the requested one.\n * When x and y resolution are different, use the array type (`[xResolution, yResolution]`).\n * @property {number} [pixelRatio] Pixel ratio, if different from the requested one.\n * @property {import('./DataTile.js').ImageLike} image Image.\n */\n\n/**\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\n * For images that cover any extent and resolution (static images), the loader function should not accept\n * any arguments. The function returns an {@link import(\"./DataTile.js\").ImageLike image}, an\n * {@link import(\"./Image.js\").ImageObject image object}, or a promise for the same.\n * For loaders that generate images, the promise should not resolve until the image is loaded.\n * If the returned image does not match the extent, resolution or pixel ratio passed to the loader,\n * it has to return an {@link import(\"./Image.js\").ImageObject image object} with the `image` and the\n * correct `extent`, `resolution` and `pixelRatio`.\n *\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} Loader\n * @api\n */\n\n/**\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\n * The function returns a promise for an  {@link import(\"./Image.js\").ImageObject image object}.\n *\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} ImageObjectPromiseLoader\n */\n\nclass ImageWrapper extends EventTarget {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|Array<number>|undefined} resolution Resolution. If provided as array, x and y\n   * resolution will be assumed.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"./ImageState.js\").default|import(\"./Image.js\").Loader} stateOrLoader State.\n   */\n  constructor(extent, resolution, pixelRatio, stateOrLoader) {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.extent = extent;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @protected\n     * @type {number|Array<number>|undefined}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    this.state = typeof stateOrLoader === 'function' ? ImageState.IDLE : stateOrLoader;\n\n    /**\n     * @private\n     * @type {import('./DataTile.js').ImageLike|null}\n     */\n    this.image_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"./Image.js\").Loader}\n     */\n    this.loader = typeof stateOrLoader === 'function' ? stateOrLoader : null;\n  }\n\n  /**\n   * @protected\n   */\n  changed() {\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n  getExtent() {\n    return this.extent;\n  }\n\n  /**\n   * @return {import('./DataTile.js').ImageLike} Image.\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * @return {number} PixelRatio.\n   */\n  getPixelRatio() {\n    return this.pixelRatio_;\n  }\n\n  /**\n   * @return {number|Array<number>} Resolution.\n   */\n  getResolution() {\n    return (/** @type {number} */this.resolution\n    );\n  }\n\n  /**\n   * @return {import(\"./ImageState.js\").default} State.\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      if (this.loader) {\n        this.state = ImageState.LOADING;\n        this.changed();\n        const resolution = this.getResolution();\n        const requestResolution = Array.isArray(resolution) ? resolution[0] : resolution;\n        toPromise(() => this.loader(this.getExtent(), requestResolution, this.getPixelRatio())).then(image => {\n          if ('image' in image) {\n            this.image_ = image.image;\n          }\n          if ('extent' in image) {\n            this.extent = image.extent;\n          }\n          if ('resolution' in image) {\n            this.resolution = image.resolution;\n          }\n          if ('pixelRatio' in image) {\n            this.pixelRatio_ = image.pixelRatio;\n          }\n          if (image instanceof HTMLImageElement || image instanceof ImageBitmap || image instanceof HTMLCanvasElement || image instanceof HTMLVideoElement) {\n            this.image_ = image;\n          }\n          this.state = ImageState.LOADED;\n        }).catch(error => {\n          this.state = ImageState.ERROR;\n          console.error(error); // eslint-disable-line no-console\n        }).finally(() => this.changed());\n      }\n    }\n  }\n\n  /**\n   * @param {import('./DataTile.js').ImageLike} image The image.\n   */\n  setImage(image) {\n    this.image_ = image;\n  }\n\n  /**\n   * @param {number|Array<number>} resolution Resolution.\n   */\n  setResolution(resolution) {\n    this.resolution = resolution;\n  }\n}\n\n/**\n * @param {import('./DataTile.js').ImageLike} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n  const img = /** @type {HTMLImageElement} */image;\n  let listening = true;\n  let decoding = false;\n  let loaded = false;\n  const listenerKeys = [listenOnce(img, EventType.LOAD, function () {\n    loaded = true;\n    if (!decoding) {\n      loadHandler();\n    }\n  })];\n  if (img.src && IMAGE_DECODE) {\n    decoding = true;\n    img.decode().then(function () {\n      if (listening) {\n        loadHandler();\n      }\n    }).catch(function (error) {\n      if (listening) {\n        if (loaded) {\n          loadHandler();\n        } else {\n          errorHandler();\n        }\n      }\n    });\n  } else {\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\n  }\n  return function unlisten() {\n    listening = false;\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\n\n/**\n * Loads an image.\n * @param {HTMLImageElement} image Image, not yet loaded.\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\n * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.\n * @api\n */\nexport function load(image, src) {\n  return new Promise((resolve, reject) => {\n    function handleLoad() {\n      unlisten();\n      resolve(image);\n    }\n    function handleError() {\n      unlisten();\n      reject(new Error('Image load error'));\n    }\n    function unlisten() {\n      image.removeEventListener('load', handleLoad);\n      image.removeEventListener('error', handleError);\n    }\n    image.addEventListener('load', handleLoad);\n    image.addEventListener('error', handleError);\n    if (src) {\n      image.src = src;\n    }\n  });\n}\n\n/**\n * @param {HTMLImageElement} image Image, not yet loaded.\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\n * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.\n */\nexport function decodeFallback(image, src) {\n  if (src) {\n    image.src = src;\n  }\n  return IMAGE_DECODE ? new Promise((resolve, reject) => image.decode().then(() => resolve(image), reject)) : load(image);\n}\n\n/**\n * Loads an image and decodes it to an `ImageBitmap` if `createImageBitmap()` is supported. Returns\n * the loaded image otherwise.\n * @param {HTMLImageElement} image Image, not yet loaded.\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\n * @return {Promise<ImageBitmap|HTMLImageElement>} Promise resolving to an `ImageBitmap` or an\n * `HTMLImageElement` if `createImageBitmap()` is not supported.\n * @api\n */\nexport function decode(image, src) {\n  if (src) {\n    image.src = src;\n  }\n  return IMAGE_DECODE && CREATE_IMAGE_BITMAP ? image.decode().then(() => createImageBitmap(image)) : decodeFallback(image);\n}\nexport default ImageWrapper;","map":{"version":3,"names":["EventTarget","EventType","ImageState","CREATE_IMAGE_BITMAP","IMAGE_DECODE","listenOnce","unlistenByKey","toPromise","ImageWrapper","constructor","extent","resolution","pixelRatio","stateOrLoader","pixelRatio_","state","IDLE","image_","loader","changed","dispatchEvent","CHANGE","getExtent","getImage","getPixelRatio","getResolution","getState","load","LOADING","requestResolution","Array","isArray","then","image","HTMLImageElement","ImageBitmap","HTMLCanvasElement","HTMLVideoElement","LOADED","catch","error","ERROR","console","finally","setImage","setResolution","listenImage","loadHandler","errorHandler","img","listening","decoding","loaded","listenerKeys","LOAD","src","decode","push","unlisten","forEach","Promise","resolve","reject","handleLoad","handleError","Error","removeEventListener","addEventListener","decodeFallback","createImageBitmap"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/Image.js"],"sourcesContent":["/**\n * @module ol/Image\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport ImageState from './ImageState.js';\nimport {CREATE_IMAGE_BITMAP, IMAGE_DECODE} from './has.js';\nimport {listenOnce, unlistenByKey} from './events.js';\nimport {toPromise} from './functions.js';\n\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(import(\"./Image.js\").default, string): void} LoadFunction\n * @api\n */\n\n/**\n * @typedef {Object} ImageObject\n * @property {import(\"./extent.js\").Extent} [extent] Extent, if different from the requested one.\n * @property {import(\"./resolution.js\").ResolutionLike} [resolution] Resolution, if different from the requested one.\n * When x and y resolution are different, use the array type (`[xResolution, yResolution]`).\n * @property {number} [pixelRatio] Pixel ratio, if different from the requested one.\n * @property {import('./DataTile.js').ImageLike} image Image.\n */\n\n/**\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\n * For images that cover any extent and resolution (static images), the loader function should not accept\n * any arguments. The function returns an {@link import(\"./DataTile.js\").ImageLike image}, an\n * {@link import(\"./Image.js\").ImageObject image object}, or a promise for the same.\n * For loaders that generate images, the promise should not resolve until the image is loaded.\n * If the returned image does not match the extent, resolution or pixel ratio passed to the loader,\n * it has to return an {@link import(\"./Image.js\").ImageObject image object} with the `image` and the\n * correct `extent`, `resolution` and `pixelRatio`.\n *\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} Loader\n * @api\n */\n\n/**\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\n * The function returns a promise for an  {@link import(\"./Image.js\").ImageObject image object}.\n *\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} ImageObjectPromiseLoader\n */\n\nclass ImageWrapper extends EventTarget {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|Array<number>|undefined} resolution Resolution. If provided as array, x and y\n   * resolution will be assumed.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"./ImageState.js\").default|import(\"./Image.js\").Loader} stateOrLoader State.\n   */\n  constructor(extent, resolution, pixelRatio, stateOrLoader) {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.extent = extent;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @protected\n     * @type {number|Array<number>|undefined}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    this.state =\n      typeof stateOrLoader === 'function' ? ImageState.IDLE : stateOrLoader;\n\n    /**\n     * @private\n     * @type {import('./DataTile.js').ImageLike|null}\n     */\n    this.image_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"./Image.js\").Loader}\n     */\n    this.loader = typeof stateOrLoader === 'function' ? stateOrLoader : null;\n  }\n\n  /**\n   * @protected\n   */\n  changed() {\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n  getExtent() {\n    return this.extent;\n  }\n\n  /**\n   * @return {import('./DataTile.js').ImageLike} Image.\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * @return {number} PixelRatio.\n   */\n  getPixelRatio() {\n    return this.pixelRatio_;\n  }\n\n  /**\n   * @return {number|Array<number>} Resolution.\n   */\n  getResolution() {\n    return /** @type {number} */ (this.resolution);\n  }\n\n  /**\n   * @return {import(\"./ImageState.js\").default} State.\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      if (this.loader) {\n        this.state = ImageState.LOADING;\n        this.changed();\n        const resolution = this.getResolution();\n        const requestResolution = Array.isArray(resolution)\n          ? resolution[0]\n          : resolution;\n        toPromise(() =>\n          this.loader(this.getExtent(), requestResolution, this.getPixelRatio())\n        )\n          .then((image) => {\n            if ('image' in image) {\n              this.image_ = image.image;\n            }\n            if ('extent' in image) {\n              this.extent = image.extent;\n            }\n            if ('resolution' in image) {\n              this.resolution = image.resolution;\n            }\n            if ('pixelRatio' in image) {\n              this.pixelRatio_ = image.pixelRatio;\n            }\n            if (\n              image instanceof HTMLImageElement ||\n              image instanceof ImageBitmap ||\n              image instanceof HTMLCanvasElement ||\n              image instanceof HTMLVideoElement\n            ) {\n              this.image_ = image;\n            }\n            this.state = ImageState.LOADED;\n          })\n          .catch((error) => {\n            this.state = ImageState.ERROR;\n            console.error(error); // eslint-disable-line no-console\n          })\n          .finally(() => this.changed());\n      }\n    }\n  }\n\n  /**\n   * @param {import('./DataTile.js').ImageLike} image The image.\n   */\n  setImage(image) {\n    this.image_ = image;\n  }\n\n  /**\n   * @param {number|Array<number>} resolution Resolution.\n   */\n  setResolution(resolution) {\n    this.resolution = resolution;\n  }\n}\n\n/**\n * @param {import('./DataTile.js').ImageLike} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n  const img = /** @type {HTMLImageElement} */ (image);\n  let listening = true;\n  let decoding = false;\n  let loaded = false;\n\n  const listenerKeys = [\n    listenOnce(img, EventType.LOAD, function () {\n      loaded = true;\n      if (!decoding) {\n        loadHandler();\n      }\n    }),\n  ];\n\n  if (img.src && IMAGE_DECODE) {\n    decoding = true;\n    img\n      .decode()\n      .then(function () {\n        if (listening) {\n          loadHandler();\n        }\n      })\n      .catch(function (error) {\n        if (listening) {\n          if (loaded) {\n            loadHandler();\n          } else {\n            errorHandler();\n          }\n        }\n      });\n  } else {\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\n  }\n\n  return function unlisten() {\n    listening = false;\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\n\n/**\n * Loads an image.\n * @param {HTMLImageElement} image Image, not yet loaded.\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\n * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.\n * @api\n */\nexport function load(image, src) {\n  return new Promise((resolve, reject) => {\n    function handleLoad() {\n      unlisten();\n      resolve(image);\n    }\n    function handleError() {\n      unlisten();\n      reject(new Error('Image load error'));\n    }\n    function unlisten() {\n      image.removeEventListener('load', handleLoad);\n      image.removeEventListener('error', handleError);\n    }\n    image.addEventListener('load', handleLoad);\n    image.addEventListener('error', handleError);\n    if (src) {\n      image.src = src;\n    }\n  });\n}\n\n/**\n * @param {HTMLImageElement} image Image, not yet loaded.\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\n * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.\n */\nexport function decodeFallback(image, src) {\n  if (src) {\n    image.src = src;\n  }\n  return IMAGE_DECODE\n    ? new Promise((resolve, reject) =>\n        image.decode().then(() => resolve(image), reject)\n      )\n    : load(image);\n}\n\n/**\n * Loads an image and decodes it to an `ImageBitmap` if `createImageBitmap()` is supported. Returns\n * the loaded image otherwise.\n * @param {HTMLImageElement} image Image, not yet loaded.\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\n * @return {Promise<ImageBitmap|HTMLImageElement>} Promise resolving to an `ImageBitmap` or an\n * `HTMLImageElement` if `createImageBitmap()` is not supported.\n * @api\n */\nexport function decode(image, src) {\n  if (src) {\n    image.src = src;\n  }\n  return IMAGE_DECODE && CREATE_IMAGE_BITMAP\n    ? image.decode().then(() => createImageBitmap(image))\n    : decodeFallback(image);\n}\n\nexport default ImageWrapper;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}