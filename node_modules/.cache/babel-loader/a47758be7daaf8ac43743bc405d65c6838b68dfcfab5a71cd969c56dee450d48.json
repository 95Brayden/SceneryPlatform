{"ast":null,"code":"/**\n * @module ol/source/UTFGrid\n */\n\nimport EventType from '../events/EventType.js';\nimport Tile from '../Tile.js';\nimport TileSource from './Tile.js';\nimport TileState from '../TileState.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { createFromTemplates, nullTileUrlFunction } from '../tileurlfunction.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { getKeyZXY } from '../tilecoord.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\nimport { listenOnce } from '../events.js';\nimport { jsonp as requestJSONP } from '../net.js';\n\n/**\n * @typedef {Object} UTFGridJSON\n * @property {Array<string>} grid The grid.\n * @property {Array<string>} keys The keys.\n * @property {Object<string, Object>} [data] Optional data.\n */\n\nexport class CustomTile extends Tile {\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {import(\"../extent.js\").Extent} extent Extent of the tile.\n   * @param {boolean} preemptive Load the tile when visible (before it's needed).\n   * @param {boolean} jsonp Load the tile as a script.\n   */\n  constructor(tileCoord, state, src, extent, preemptive, jsonp) {\n    super(tileCoord, state);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ = preemptive;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.grid_ = null;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.keys_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, Object>|undefined}\n     */\n    this.data_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = jsonp;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLImageElement} Image.\n   */\n  getImage() {\n    return null;\n  }\n\n  /**\n   * Synchronously returns data at given coordinate (if available).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {*} The data.\n   */\n  getData(coordinate) {\n    if (!this.grid_ || !this.keys_) {\n      return null;\n    }\n    const xRelative = (coordinate[0] - this.extent_[0]) / (this.extent_[2] - this.extent_[0]);\n    const yRelative = (coordinate[1] - this.extent_[1]) / (this.extent_[3] - this.extent_[1]);\n    const row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];\n    if (typeof row !== 'string') {\n      return null;\n    }\n    let code = row.charCodeAt(Math.floor(xRelative * row.length));\n    if (code >= 93) {\n      code--;\n    }\n    if (code >= 35) {\n      code--;\n    }\n    code -= 32;\n    let data = null;\n    if (code in this.keys_) {\n      const id = this.keys_[code];\n      if (this.data_ && id in this.data_) {\n        data = this.data_[id];\n      } else {\n        data = id;\n      }\n    }\n    return data;\n  }\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate (or `null` if not yet loaded).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   */\n  forDataAtCoordinate(coordinate, callback, request) {\n    if (this.state == TileState.EMPTY && request === true) {\n      this.state = TileState.IDLE;\n      listenOnce(this, EventType.CHANGE, function (e) {\n        callback(this.getData(coordinate));\n      }, this);\n      this.loadInternal_();\n    } else {\n      if (request === true) {\n        setTimeout(() => {\n          callback(this.getData(coordinate));\n        }, 0);\n      } else {\n        callback(this.getData(coordinate));\n      }\n    }\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    return this.src_;\n  }\n\n  /**\n   * @private\n   */\n  handleError_() {\n    this.state = TileState.ERROR;\n    this.changed();\n  }\n\n  /**\n   * @param {!UTFGridJSON} json UTFGrid data.\n   * @private\n   */\n  handleLoad_(json) {\n    this.grid_ = json['grid'];\n    this.keys_ = json['keys'];\n    this.data_ = json['data'];\n    this.state = TileState.LOADED;\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  loadInternal_() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      if (this.jsonp_) {\n        requestJSONP(this.src_, this.handleLoad_.bind(this), this.handleError_.bind(this));\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', this.src_);\n        client.send();\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */event.target;\n    // status will be 0 for file:// urls\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      let response;\n      try {\n        response = /** @type {!UTFGridJSON} */\n        JSON.parse(client.responseText);\n      } catch (err) {\n        this.handleError_();\n        return;\n      }\n      this.handleLoad_(response);\n    } else {\n      this.handleError_();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleError_();\n  }\n\n  /**\n   */\n  load() {\n    if (this.preemptive_) {\n      this.loadInternal_();\n    } else {\n      this.setState(TileState.EMPTY);\n    }\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [preemptive=true]\n * If `true` the UTFGrid source loads the tiles based on their \"visibility\".\n * This improves the speed of response, but increases traffic.\n * Note that if set to `false` (lazy loading), you need to pass `true` as\n * `request` to the `forDataAtCoordinateAndResolution` method otherwise no\n * data will ever be loaded.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {import(\"./TileJSON.js\").Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {string} [url] TileJSON endpoint that provides the configuration for this source.\n * Request will be made through JSONP. If not provided, `tileJSON` must be configured.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for UTFGrid interaction data loaded from TileJSON format.\n * @api\n */\nclass UTFGrid extends TileSource {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super({\n      projection: getProjection('EPSG:3857'),\n      state: 'loading',\n      zDirection: options.zDirection\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ = options.preemptive !== undefined ? options.preemptive : true;\n\n    /**\n     * @private\n     * @type {!import(\"../Tile.js\").UrlFunction}\n     */\n    this.tileUrlFunction_ = nullTileUrlFunction;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.template_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = options.jsonp || false;\n    if (options.url) {\n      if (this.jsonp_) {\n        requestJSONP(options.url, this.handleTileJSONResponse.bind(this), this.handleTileJSONError.bind(this));\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      throw new Error('Either `url` or `tileJSON` options must be provided');\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */event.target;\n    // status will be 0 for file:// urls\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      let response;\n      try {\n        response = /** @type {import(\"./TileJSON.js\").Config} */\n        JSON.parse(client.responseText);\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n\n  /**\n   * Return the template from TileJSON.\n   * @return {string|undefined} The template from TileJSON.\n   * @api\n   */\n  getTemplate() {\n    return this.template_;\n  }\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate and resolution (or `null` if not yet loaded or\n   * in case of an error).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   * @api\n   */\n  forDataAtCoordinateAndResolution(coordinate, resolution, callback, request) {\n    if (this.tileGrid) {\n      const z = this.tileGrid.getZForResolution(resolution, this.zDirection);\n      const tileCoord = this.tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const tile = /** @type {!CustomTile} */\n      this.getTile(tileCoord[0], tileCoord[1], tileCoord[2], 1, this.getProjection());\n      tile.forDataAtCoordinate(coordinate, callback, request);\n    } else {\n      if (request === true) {\n        setTimeout(function () {\n          callback(null);\n        }, 0);\n      } else {\n        callback(null);\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handleTileJSONError() {\n    this.setState('error');\n  }\n\n  /**\n   * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse\n   * @protected\n   * @param {import(\"./TileJSON.js\").Config} tileJSON Tile JSON.\n   */\n  handleTileJSONResponse(tileJSON) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n    const sourceProjection = this.getProjection();\n    let extent;\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(epsg4326Projection, sourceProjection);\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n    const gridExtent = extentFromProjection(sourceProjection);\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: gridExtent,\n      maxZoom: maxZoom,\n      minZoom: minZoom\n    });\n    this.tileGrid = tileGrid;\n    this.template_ = tileJSON['template'];\n    const grids = tileJSON['grids'];\n    if (!grids) {\n      this.setState('error');\n      return;\n    }\n    this.tileUrlFunction_ = createFromTemplates(grids, tileGrid);\n    if (tileJSON['attribution'] !== undefined) {\n      const attributionExtent = extent !== undefined ? extent : gridExtent;\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n    }\n    this.setState('ready');\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!CustomTile} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return this.tileCache.get(tileCoordKey);\n    }\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    const tileUrl = this.tileUrlFunction_(urlTileCoord, pixelRatio, projection);\n    const tile = new CustomTile(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.tileGrid.getTileCoordExtent(tileCoord), this.preemptive_, this.jsonp_);\n    this.tileCache.set(tileCoordKey, tile);\n    return tile;\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\nexport default UTFGrid;","map":{"version":3,"names":["EventType","Tile","TileSource","TileState","applyTransform","intersects","createFromTemplates","nullTileUrlFunction","createXYZ","extentFromProjection","getKeyZXY","get","getProjection","getTransformFromProjections","listenOnce","jsonp","requestJSONP","CustomTile","constructor","tileCoord","state","src","extent","preemptive","src_","extent_","preemptive_","grid_","keys_","data_","jsonp_","getImage","getData","coordinate","xRelative","yRelative","row","Math","floor","length","code","charCodeAt","data","id","forDataAtCoordinate","callback","request","EMPTY","IDLE","CHANGE","e","loadInternal_","setTimeout","getKey","handleError_","ERROR","changed","handleLoad_","json","LOADED","LOADING","bind","client","XMLHttpRequest","addEventListener","onXHRLoad_","onXHRError_","open","send","event","target","status","response","JSON","parse","responseText","err","load","setState","UTFGrid","options","projection","zDirection","undefined","tileUrlFunction_","template_","url","handleTileJSONResponse","handleTileJSONError","tileJSON","Error","getTemplate","forDataAtCoordinateAndResolution","resolution","tileGrid","z","getZForResolution","getTileCoordForCoordAndZ","tile","getTile","epsg4326Projection","sourceProjection","transform","gridExtent","minZoom","maxZoom","grids","attributionExtent","setAttributions","frameState","x","y","pixelRatio","tileCoordKey","tileCache","containsKey","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","getTileCoordExtent","set","useTile"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/source/UTFGrid.js"],"sourcesContent":["/**\n * @module ol/source/UTFGrid\n */\n\nimport EventType from '../events/EventType.js';\nimport Tile from '../Tile.js';\nimport TileSource from './Tile.js';\nimport TileState from '../TileState.js';\nimport {applyTransform, intersects} from '../extent.js';\nimport {createFromTemplates, nullTileUrlFunction} from '../tileurlfunction.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport {listenOnce} from '../events.js';\nimport {jsonp as requestJSONP} from '../net.js';\n\n/**\n * @typedef {Object} UTFGridJSON\n * @property {Array<string>} grid The grid.\n * @property {Array<string>} keys The keys.\n * @property {Object<string, Object>} [data] Optional data.\n */\n\nexport class CustomTile extends Tile {\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {import(\"../extent.js\").Extent} extent Extent of the tile.\n   * @param {boolean} preemptive Load the tile when visible (before it's needed).\n   * @param {boolean} jsonp Load the tile as a script.\n   */\n  constructor(tileCoord, state, src, extent, preemptive, jsonp) {\n    super(tileCoord, state);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ = preemptive;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.grid_ = null;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.keys_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, Object>|undefined}\n     */\n    this.data_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = jsonp;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLImageElement} Image.\n   */\n  getImage() {\n    return null;\n  }\n\n  /**\n   * Synchronously returns data at given coordinate (if available).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {*} The data.\n   */\n  getData(coordinate) {\n    if (!this.grid_ || !this.keys_) {\n      return null;\n    }\n    const xRelative =\n      (coordinate[0] - this.extent_[0]) / (this.extent_[2] - this.extent_[0]);\n    const yRelative =\n      (coordinate[1] - this.extent_[1]) / (this.extent_[3] - this.extent_[1]);\n\n    const row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];\n\n    if (typeof row !== 'string') {\n      return null;\n    }\n\n    let code = row.charCodeAt(Math.floor(xRelative * row.length));\n    if (code >= 93) {\n      code--;\n    }\n    if (code >= 35) {\n      code--;\n    }\n    code -= 32;\n\n    let data = null;\n    if (code in this.keys_) {\n      const id = this.keys_[code];\n      if (this.data_ && id in this.data_) {\n        data = this.data_[id];\n      } else {\n        data = id;\n      }\n    }\n    return data;\n  }\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate (or `null` if not yet loaded).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   */\n  forDataAtCoordinate(coordinate, callback, request) {\n    if (this.state == TileState.EMPTY && request === true) {\n      this.state = TileState.IDLE;\n      listenOnce(\n        this,\n        EventType.CHANGE,\n        function (e) {\n          callback(this.getData(coordinate));\n        },\n        this\n      );\n      this.loadInternal_();\n    } else {\n      if (request === true) {\n        setTimeout(() => {\n          callback(this.getData(coordinate));\n        }, 0);\n      } else {\n        callback(this.getData(coordinate));\n      }\n    }\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    return this.src_;\n  }\n\n  /**\n   * @private\n   */\n  handleError_() {\n    this.state = TileState.ERROR;\n    this.changed();\n  }\n\n  /**\n   * @param {!UTFGridJSON} json UTFGrid data.\n   * @private\n   */\n  handleLoad_(json) {\n    this.grid_ = json['grid'];\n    this.keys_ = json['keys'];\n    this.data_ = json['data'];\n\n    this.state = TileState.LOADED;\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  loadInternal_() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      if (this.jsonp_) {\n        requestJSONP(\n          this.src_,\n          this.handleLoad_.bind(this),\n          this.handleError_.bind(this)\n        );\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', this.src_);\n        client.send();\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {!UTFGridJSON} */ (\n          JSON.parse(client.responseText)\n        );\n      } catch (err) {\n        this.handleError_();\n        return;\n      }\n      this.handleLoad_(response);\n    } else {\n      this.handleError_();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleError_();\n  }\n\n  /**\n   */\n  load() {\n    if (this.preemptive_) {\n      this.loadInternal_();\n    } else {\n      this.setState(TileState.EMPTY);\n    }\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [preemptive=true]\n * If `true` the UTFGrid source loads the tiles based on their \"visibility\".\n * This improves the speed of response, but increases traffic.\n * Note that if set to `false` (lazy loading), you need to pass `true` as\n * `request` to the `forDataAtCoordinateAndResolution` method otherwise no\n * data will ever be loaded.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {import(\"./TileJSON.js\").Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {string} [url] TileJSON endpoint that provides the configuration for this source.\n * Request will be made through JSONP. If not provided, `tileJSON` must be configured.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for UTFGrid interaction data loaded from TileJSON format.\n * @api\n */\nclass UTFGrid extends TileSource {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super({\n      projection: getProjection('EPSG:3857'),\n      state: 'loading',\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ =\n      options.preemptive !== undefined ? options.preemptive : true;\n\n    /**\n     * @private\n     * @type {!import(\"../Tile.js\").UrlFunction}\n     */\n    this.tileUrlFunction_ = nullTileUrlFunction;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.template_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = options.jsonp || false;\n\n    if (options.url) {\n      if (this.jsonp_) {\n        requestJSONP(\n          options.url,\n          this.handleTileJSONResponse.bind(this),\n          this.handleTileJSONError.bind(this)\n        );\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      throw new Error('Either `url` or `tileJSON` options must be provided');\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {import(\"./TileJSON.js\").Config} */ (\n          JSON.parse(client.responseText)\n        );\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n\n  /**\n   * Return the template from TileJSON.\n   * @return {string|undefined} The template from TileJSON.\n   * @api\n   */\n  getTemplate() {\n    return this.template_;\n  }\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate and resolution (or `null` if not yet loaded or\n   * in case of an error).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean} [request] If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   * @api\n   */\n  forDataAtCoordinateAndResolution(coordinate, resolution, callback, request) {\n    if (this.tileGrid) {\n      const z = this.tileGrid.getZForResolution(resolution, this.zDirection);\n      const tileCoord = this.tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const tile = /** @type {!CustomTile} */ (\n        this.getTile(\n          tileCoord[0],\n          tileCoord[1],\n          tileCoord[2],\n          1,\n          this.getProjection()\n        )\n      );\n      tile.forDataAtCoordinate(coordinate, callback, request);\n    } else {\n      if (request === true) {\n        setTimeout(function () {\n          callback(null);\n        }, 0);\n      } else {\n        callback(null);\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handleTileJSONError() {\n    this.setState('error');\n  }\n\n  /**\n   * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse\n   * @protected\n   * @param {import(\"./TileJSON.js\").Config} tileJSON Tile JSON.\n   */\n  handleTileJSONResponse(tileJSON) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n\n    const sourceProjection = this.getProjection();\n    let extent;\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(\n        epsg4326Projection,\n        sourceProjection\n      );\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    const gridExtent = extentFromProjection(sourceProjection);\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: gridExtent,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n    });\n    this.tileGrid = tileGrid;\n\n    this.template_ = tileJSON['template'];\n\n    const grids = tileJSON['grids'];\n    if (!grids) {\n      this.setState('error');\n      return;\n    }\n\n    this.tileUrlFunction_ = createFromTemplates(grids, tileGrid);\n\n    if (tileJSON['attribution'] !== undefined) {\n      const attributionExtent = extent !== undefined ? extent : gridExtent;\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n    }\n\n    this.setState('ready');\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!CustomTile} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return this.tileCache.get(tileCoordKey);\n    }\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection\n    );\n    const tileUrl = this.tileUrlFunction_(urlTileCoord, pixelRatio, projection);\n    const tile = new CustomTile(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.tileGrid.getTileCoordExtent(tileCoord),\n      this.preemptive_,\n      this.jsonp_\n    );\n    this.tileCache.set(tileCoordKey, tile);\n    return tile;\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\n\nexport default UTFGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}