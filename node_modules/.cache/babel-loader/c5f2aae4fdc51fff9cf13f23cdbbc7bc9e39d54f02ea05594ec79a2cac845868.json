{"ast":null,"code":"/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { assert } from '../asserts.js';\nimport { get as getIconImage } from './IconImage.js';\nimport { getUid } from '../util.js';\n\n/**\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\n * Anchor unit can be either a fraction of the icon size or in pixels.\n */\n\n/**\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement|ImageBitmap} [img] Image object for the icon.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\n * Positive values will shift the icon right and up.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\n * sub-rectangle to use from the original (sprite) image.\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\n * sub-rectangle to use from the original (sprite) image.\n * @property {string} [src] Image source URI.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */\n\n/**\n * @param {number} width The width.\n * @param {number} height The height.\n * @param {number|undefined} wantedWidth The wanted width.\n * @param {number|undefined} wantedHeight The wanted height.\n * @return {number|Array<number>} The scale.\n */\nfunction calculateScale(width, height, wantedWidth, wantedHeight) {\n  if (wantedWidth !== undefined && wantedHeight !== undefined) {\n    return [wantedWidth / width, wantedHeight / height];\n  }\n  if (wantedWidth !== undefined) {\n    return wantedWidth / width;\n  }\n  if (wantedHeight !== undefined) {\n    return wantedHeight / height;\n  }\n  return 1;\n}\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nclass Icon extends ImageStyle {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @type {number}\n     */\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n    const scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    super({\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView,\n      declutterMode: options.declutterMode\n    });\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.anchorOrigin_ = options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorXUnits_ = options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorYUnits_ = options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    const image = options.img !== undefined ? options.img : null;\n    let cacheKey = options.src;\n    assert(!(cacheKey !== undefined && image), '`image` and `src` cannot be provided at the same time');\n    if ((cacheKey === undefined || cacheKey.length === 0) && image) {\n      cacheKey = /** @type {HTMLImageElement} */image.src || getUid(image);\n    }\n    assert(cacheKey !== undefined && cacheKey.length > 0, 'A defined and non-empty `src` or `image` must be provided');\n    assert(!((options.width !== undefined || options.height !== undefined) && options.scale !== undefined), '`width` or `height` cannot be provided together with `scale`');\n    let imageState;\n    if (options.src !== undefined) {\n      imageState = ImageState.IDLE;\n    } else if (image !== undefined) {\n      if (image instanceof HTMLImageElement) {\n        if (image.complete) {\n          imageState = image.src ? ImageState.LOADED : ImageState.IDLE;\n        } else {\n          imageState = ImageState.LOADING;\n        }\n      } else {\n        imageState = ImageState.LOADED;\n      }\n    }\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    this.iconImage_ = getIconImage(image, /** @type {string} */cacheKey, this.crossOrigin_, imageState, this.color_);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.offsetOrigin_ = options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = options.size !== undefined ? options.size : null;\n\n    /**\n     * Calculate the scale if width or height were given.\n     */\n    if (options.width !== undefined || options.height !== undefined) {\n      let width, height;\n      if (options.size) {\n        [width, height] = options.size;\n      } else {\n        const image = this.getImage(1);\n        if (image.width && image.height) {\n          width = image.width;\n          height = image.height;\n        } else if (image instanceof HTMLImageElement) {\n          this.initialOptions_ = options;\n          const onload = () => {\n            this.unlistenImageChange(onload);\n            if (!this.initialOptions_) {\n              return;\n            }\n            const imageSize = this.iconImage_.getSize();\n            this.setScale(calculateScale(imageSize[0], imageSize[1], options.width, options.height));\n          };\n          this.listenImageChange(onload);\n          return;\n        }\n      }\n      if (width !== undefined) {\n        this.setScale(calculateScale(width, height, options.width, options.height));\n      }\n    }\n  }\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  clone() {\n    let scale, width, height;\n    if (this.initialOptions_) {\n      width = this.initialOptions_.width;\n      height = this.initialOptions_.height;\n    } else {\n      scale = this.getScale();\n      scale = Array.isArray(scale) ? scale.slice() : scale;\n    }\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || undefined,\n      crossOrigin: this.crossOrigin_,\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      opacity: this.getOpacity(),\n      rotateWithView: this.getRotateWithView(),\n      rotation: this.getRotation(),\n      scale,\n      width,\n      height,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      src: this.getSrc(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode()\n    });\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    let anchor = this.normalizedAnchor_;\n    if (!anchor) {\n      anchor = this.anchor_;\n      const size = this.getSize();\n      if (this.anchorXUnits_ == 'fraction' || this.anchorYUnits_ == 'fraction') {\n        if (!size) {\n          return null;\n        }\n        anchor = this.anchor_.slice();\n        if (this.anchorXUnits_ == 'fraction') {\n          anchor[0] *= size[0];\n        }\n        if (this.anchorYUnits_ == 'fraction') {\n          anchor[1] *= size[1];\n        }\n      }\n      if (this.anchorOrigin_ != 'top-left') {\n        if (!size) {\n          return null;\n        }\n        if (anchor === this.anchor_) {\n          anchor = this.anchor_.slice();\n        }\n        if (this.anchorOrigin_ == 'top-right' || this.anchorOrigin_ == 'bottom-right') {\n          anchor[0] = -anchor[0] + size[0];\n        }\n        if (this.anchorOrigin_ == 'bottom-left' || this.anchorOrigin_ == 'bottom-right') {\n          anchor[1] = -anchor[1] + size[1];\n        }\n      }\n      this.normalizedAnchor_ = anchor;\n    }\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray();\n    // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n    return [anchor[0] - displacement[0] / scale[0], anchor[1] + displacement[1] / scale[1]];\n  }\n\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n  setAnchor(anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  }\n\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element. If the Icon\n   * style was configured with `src` or with a not let loaded `img`, an `ImageBitmap` will be returned.\n   * @api\n   */\n  getImage(pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  }\n\n  /**\n   * Get the pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} The pixel ratio of the image.\n   * @api\n   */\n  getPixelRatio(pixelRatio) {\n    return this.iconImage_.getPixelRatio(pixelRatio);\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.iconImage_.getSize();\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.iconImage_.getImageState();\n  }\n\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\n   */\n  getHitDetectionImage() {\n    return this.iconImage_.getHitDetectionImage();\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    let offset = this.offset_;\n    if (this.offsetOrigin_ != 'top-left') {\n      const size = this.getSize();\n      const iconImageSize = this.iconImage_.getSize();\n      if (!size || !iconImageSize) {\n        return null;\n      }\n      offset = offset.slice();\n      if (this.offsetOrigin_ == 'top-right' || this.offsetOrigin_ == 'bottom-right') {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n      if (this.offsetOrigin_ == 'bottom-left' || this.offsetOrigin_ == 'bottom-right') {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n    this.origin_ = offset;\n    return this.origin_;\n  }\n\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n  getSrc() {\n    return this.iconImage_.getSrc();\n  }\n\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   * @api\n   */\n  getSize() {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  }\n\n  /**\n   * Get the width of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\n   * @return {number} Icon width (in pixels).\n   * @api\n   */\n  getWidth() {\n    const scale = this.getScaleArray();\n    if (this.size_) {\n      return this.size_[0] * scale[0];\n    }\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\n      return this.iconImage_.getSize()[0] * scale[0];\n    }\n    return undefined;\n  }\n\n  /**\n   * Get the height of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\n   * @return {number} Icon height (in pixels).\n   * @api\n   */\n  getHeight() {\n    const scale = this.getScaleArray();\n    if (this.size_) {\n      return this.size_[1] * scale[1];\n    }\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\n      return this.iconImage_.getSize()[1] * scale[1];\n    }\n    return undefined;\n  }\n\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @api\n   */\n  setScale(scale) {\n    delete this.initialOptions_;\n    super.setScale(scale);\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @api\n   */\n  load() {\n    this.iconImage_.load();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n  }\n}\nexport default Icon;","map":{"version":3,"names":["EventType","ImageState","ImageStyle","asArray","assert","get","getIconImage","getUid","calculateScale","width","height","wantedWidth","wantedHeight","undefined","Icon","constructor","options","opacity","rotation","scale","rotateWithView","displacement","declutterMode","anchor_","anchor","normalizedAnchor_","anchorOrigin_","anchorOrigin","anchorXUnits_","anchorXUnits","anchorYUnits_","anchorYUnits","crossOrigin_","crossOrigin","image","img","cacheKey","src","length","imageState","IDLE","HTMLImageElement","complete","LOADED","LOADING","color_","color","iconImage_","offset_","offset","offsetOrigin_","offsetOrigin","origin_","size_","size","getImage","initialOptions_","onload","unlistenImageChange","imageSize","getSize","setScale","listenImageChange","clone","getScale","Array","isArray","slice","getOpacity","getRotateWithView","getRotation","getSrc","getDisplacement","getDeclutterMode","getAnchor","getScaleArray","setAnchor","getColor","pixelRatio","getPixelRatio","getImageSize","getImageState","getHitDetectionImage","getOrigin","iconImageSize","getWidth","getHeight","listener","addEventListener","CHANGE","load","removeEventListener"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/style/Icon.js"],"sourcesContent":["/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport {asArray} from '../color.js';\nimport {assert} from '../asserts.js';\nimport {get as getIconImage} from './IconImage.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\n * Anchor unit can be either a fraction of the icon size or in pixels.\n */\n\n/**\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement|ImageBitmap} [img] Image object for the icon.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\n * Positive values will shift the icon right and up.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\n * sub-rectangle to use from the original (sprite) image.\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\n * sub-rectangle to use from the original (sprite) image.\n * @property {string} [src] Image source URI.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */\n\n/**\n * @param {number} width The width.\n * @param {number} height The height.\n * @param {number|undefined} wantedWidth The wanted width.\n * @param {number|undefined} wantedHeight The wanted height.\n * @return {number|Array<number>} The scale.\n */\nfunction calculateScale(width, height, wantedWidth, wantedHeight) {\n  if (wantedWidth !== undefined && wantedHeight !== undefined) {\n    return [wantedWidth / width, wantedHeight / height];\n  }\n  if (wantedWidth !== undefined) {\n    return wantedWidth / width;\n  }\n  if (wantedHeight !== undefined) {\n    return wantedHeight / height;\n  }\n  return 1;\n}\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nclass Icon extends ImageStyle {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @type {number}\n     */\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n    const scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    super({\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView,\n      declutterMode: options.declutterMode,\n    });\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.anchorOrigin_ =\n      options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorXUnits_ =\n      options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorYUnits_ =\n      options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    const image = options.img !== undefined ? options.img : null;\n\n    let cacheKey = options.src;\n\n    assert(\n      !(cacheKey !== undefined && image),\n      '`image` and `src` cannot be provided at the same time'\n    );\n\n    if ((cacheKey === undefined || cacheKey.length === 0) && image) {\n      cacheKey = /** @type {HTMLImageElement} */ (image).src || getUid(image);\n    }\n    assert(\n      cacheKey !== undefined && cacheKey.length > 0,\n      'A defined and non-empty `src` or `image` must be provided'\n    );\n\n    assert(\n      !(\n        (options.width !== undefined || options.height !== undefined) &&\n        options.scale !== undefined\n      ),\n      '`width` or `height` cannot be provided together with `scale`'\n    );\n\n    let imageState;\n    if (options.src !== undefined) {\n      imageState = ImageState.IDLE;\n    } else if (image !== undefined) {\n      if (image instanceof HTMLImageElement) {\n        if (image.complete) {\n          imageState = image.src ? ImageState.LOADED : ImageState.IDLE;\n        } else {\n          imageState = ImageState.LOADING;\n        }\n      } else {\n        imageState = ImageState.LOADED;\n      }\n    }\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    this.iconImage_ = getIconImage(\n      image,\n      /** @type {string} */ (cacheKey),\n      this.crossOrigin_,\n      imageState,\n      this.color_\n    );\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.offsetOrigin_ =\n      options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = options.size !== undefined ? options.size : null;\n\n    /**\n     * Calculate the scale if width or height were given.\n     */\n    if (options.width !== undefined || options.height !== undefined) {\n      let width, height;\n      if (options.size) {\n        [width, height] = options.size;\n      } else {\n        const image = this.getImage(1);\n        if (image.width && image.height) {\n          width = image.width;\n          height = image.height;\n        } else if (image instanceof HTMLImageElement) {\n          this.initialOptions_ = options;\n          const onload = () => {\n            this.unlistenImageChange(onload);\n            if (!this.initialOptions_) {\n              return;\n            }\n            const imageSize = this.iconImage_.getSize();\n            this.setScale(\n              calculateScale(\n                imageSize[0],\n                imageSize[1],\n                options.width,\n                options.height\n              )\n            );\n          };\n          this.listenImageChange(onload);\n          return;\n        }\n      }\n      if (width !== undefined) {\n        this.setScale(\n          calculateScale(width, height, options.width, options.height)\n        );\n      }\n    }\n  }\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  clone() {\n    let scale, width, height;\n    if (this.initialOptions_) {\n      width = this.initialOptions_.width;\n      height = this.initialOptions_.height;\n    } else {\n      scale = this.getScale();\n      scale = Array.isArray(scale) ? scale.slice() : scale;\n    }\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      color:\n        this.color_ && this.color_.slice\n          ? this.color_.slice()\n          : this.color_ || undefined,\n      crossOrigin: this.crossOrigin_,\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      opacity: this.getOpacity(),\n      rotateWithView: this.getRotateWithView(),\n      rotation: this.getRotation(),\n      scale,\n      width,\n      height,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      src: this.getSrc(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n    });\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    let anchor = this.normalizedAnchor_;\n    if (!anchor) {\n      anchor = this.anchor_;\n      const size = this.getSize();\n      if (\n        this.anchorXUnits_ == 'fraction' ||\n        this.anchorYUnits_ == 'fraction'\n      ) {\n        if (!size) {\n          return null;\n        }\n        anchor = this.anchor_.slice();\n        if (this.anchorXUnits_ == 'fraction') {\n          anchor[0] *= size[0];\n        }\n        if (this.anchorYUnits_ == 'fraction') {\n          anchor[1] *= size[1];\n        }\n      }\n\n      if (this.anchorOrigin_ != 'top-left') {\n        if (!size) {\n          return null;\n        }\n        if (anchor === this.anchor_) {\n          anchor = this.anchor_.slice();\n        }\n        if (\n          this.anchorOrigin_ == 'top-right' ||\n          this.anchorOrigin_ == 'bottom-right'\n        ) {\n          anchor[0] = -anchor[0] + size[0];\n        }\n        if (\n          this.anchorOrigin_ == 'bottom-left' ||\n          this.anchorOrigin_ == 'bottom-right'\n        ) {\n          anchor[1] = -anchor[1] + size[1];\n        }\n      }\n      this.normalizedAnchor_ = anchor;\n    }\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray();\n    // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n    return [\n      anchor[0] - displacement[0] / scale[0],\n      anchor[1] + displacement[1] / scale[1],\n    ];\n  }\n\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n  setAnchor(anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  }\n\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element. If the Icon\n   * style was configured with `src` or with a not let loaded `img`, an `ImageBitmap` will be returned.\n   * @api\n   */\n  getImage(pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  }\n\n  /**\n   * Get the pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} The pixel ratio of the image.\n   * @api\n   */\n  getPixelRatio(pixelRatio) {\n    return this.iconImage_.getPixelRatio(pixelRatio);\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.iconImage_.getSize();\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.iconImage_.getImageState();\n  }\n\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\n   */\n  getHitDetectionImage() {\n    return this.iconImage_.getHitDetectionImage();\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    let offset = this.offset_;\n\n    if (this.offsetOrigin_ != 'top-left') {\n      const size = this.getSize();\n      const iconImageSize = this.iconImage_.getSize();\n      if (!size || !iconImageSize) {\n        return null;\n      }\n      offset = offset.slice();\n      if (\n        this.offsetOrigin_ == 'top-right' ||\n        this.offsetOrigin_ == 'bottom-right'\n      ) {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n      if (\n        this.offsetOrigin_ == 'bottom-left' ||\n        this.offsetOrigin_ == 'bottom-right'\n      ) {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n    this.origin_ = offset;\n    return this.origin_;\n  }\n\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n  getSrc() {\n    return this.iconImage_.getSrc();\n  }\n\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   * @api\n   */\n  getSize() {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  }\n\n  /**\n   * Get the width of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\n   * @return {number} Icon width (in pixels).\n   * @api\n   */\n  getWidth() {\n    const scale = this.getScaleArray();\n    if (this.size_) {\n      return this.size_[0] * scale[0];\n    }\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\n      return this.iconImage_.getSize()[0] * scale[0];\n    }\n    return undefined;\n  }\n\n  /**\n   * Get the height of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\n   * @return {number} Icon height (in pixels).\n   * @api\n   */\n  getHeight() {\n    const scale = this.getScaleArray();\n    if (this.size_) {\n      return this.size_[1] * scale[1];\n    }\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\n      return this.iconImage_.getSize()[1] * scale[1];\n    }\n    return undefined;\n  }\n\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @api\n   */\n  setScale(scale) {\n    delete this.initialOptions_;\n    super.setScale(scale);\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @api\n   */\n  load() {\n    this.iconImage_.load();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n  }\n}\n\nexport default Icon;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}