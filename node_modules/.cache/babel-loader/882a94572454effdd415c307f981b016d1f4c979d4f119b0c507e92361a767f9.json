{"ast":null,"code":"/**\n * @module ol/geom/flat/segments\n */\n\n/**\n * This function calls `callback` for each segment of the flat coordinates\n * array. If the callback returns a truthy value the function returns that\n * value immediately. Otherwise the function returns `false`.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\n *     called for each segment.\n * @return {T|boolean} Value.\n * @template T\n */\nexport function forEach(flatCoordinates, offset, end, stride, callback) {\n  let ret;\n  offset += stride;\n  for (; offset < end; offset += stride) {\n    ret = callback(flatCoordinates.slice(offset - stride, offset), flatCoordinates.slice(offset, offset + stride));\n    if (ret) {\n      return ret;\n    }\n  }\n  return false;\n}","map":{"version":3,"names":["forEach","flatCoordinates","offset","end","stride","callback","ret","slice"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/geom/flat/segments.js"],"sourcesContent":["/**\n * @module ol/geom/flat/segments\n */\n\n/**\n * This function calls `callback` for each segment of the flat coordinates\n * array. If the callback returns a truthy value the function returns that\n * value immediately. Otherwise the function returns `false`.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\n *     called for each segment.\n * @return {T|boolean} Value.\n * @template T\n */\nexport function forEach(flatCoordinates, offset, end, stride, callback) {\n  let ret;\n  offset += stride;\n  for (; offset < end; offset += stride) {\n    ret = callback(\n      flatCoordinates.slice(offset - stride, offset),\n      flatCoordinates.slice(offset, offset + stride)\n    );\n    if (ret) {\n      return ret;\n    }\n  }\n  return false;\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,OAAOA,CAACC,eAAe,EAAEC,MAAM,EAAEC,GAAG,EAAEC,MAAM,EAAEC,QAAQ,EAAE;EACtE,IAAIC,GAAG;EACPJ,MAAM,IAAIE,MAAM;EAChB,OAAOF,MAAM,GAAGC,GAAG,EAAED,MAAM,IAAIE,MAAM,EAAE;IACrCE,GAAG,GAAGD,QAAQ,CACZJ,eAAe,CAACM,KAAK,CAACL,MAAM,GAAGE,MAAM,EAAEF,MAAM,CAAC,EAC9CD,eAAe,CAACM,KAAK,CAACL,MAAM,EAAEA,MAAM,GAAGE,MAAM,CAC/C,CAAC;IACD,IAAIE,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;EACF;EACA,OAAO,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}