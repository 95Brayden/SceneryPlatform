{"ast":null,"code":"/**\n * @module ol/control/ZoomToExtent\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoom-extent'] Class name.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string|HTMLElement} [label='E'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.\n * @property {import(\"../extent.js\").Extent} [extent] The extent to zoom to. If undefined the validity\n * extent of the view projection is used.\n */\n\n/**\n * @classdesc\n * A button control which, when pressed, changes the map view to a specific\n * extent. To style this control use the css selector `.ol-zoom-extent`.\n *\n * @api\n */\nclass ZoomToExtent extends Control {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super({\n      element: document.createElement('div'),\n      target: options.target\n    });\n\n    /**\n     * @type {?import(\"../extent.js\").Extent|null}\n     * @protected\n     */\n    this.extent = options.extent ? options.extent : null;\n    const className = options.className !== undefined ? options.className : 'ol-zoom-extent';\n    const label = options.label !== undefined ? options.label : 'E';\n    const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(typeof label === 'string' ? document.createTextNode(label) : label);\n    button.addEventListener(EventType.CLICK, this.handleClick_.bind(this), false);\n    const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(button);\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleZoomToExtent();\n  }\n\n  /**\n   * @protected\n   */\n  handleZoomToExtent() {\n    const map = this.getMap();\n    const view = map.getView();\n    const extent = !this.extent ? view.getProjection().getExtent() : this.extent;\n    view.fitInternal(polygonFromExtent(extent));\n  }\n}\nexport default ZoomToExtent;","map":{"version":3,"names":["Control","EventType","CLASS_CONTROL","CLASS_UNSELECTABLE","fromExtent","polygonFromExtent","ZoomToExtent","constructor","options","element","document","createElement","target","extent","className","undefined","label","tipLabel","button","setAttribute","title","appendChild","createTextNode","addEventListener","CLICK","handleClick_","bind","cssClasses","event","preventDefault","handleZoomToExtent","map","getMap","view","getView","getProjection","getExtent","fitInternal"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/control/ZoomToExtent.js"],"sourcesContent":["/**\n * @module ol/control/ZoomToExtent\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoom-extent'] Class name.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string|HTMLElement} [label='E'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.\n * @property {import(\"../extent.js\").Extent} [extent] The extent to zoom to. If undefined the validity\n * extent of the view projection is used.\n */\n\n/**\n * @classdesc\n * A button control which, when pressed, changes the map view to a specific\n * extent. To style this control use the css selector `.ol-zoom-extent`.\n *\n * @api\n */\nclass ZoomToExtent extends Control {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      target: options.target,\n    });\n\n    /**\n     * @type {?import(\"../extent.js\").Extent|null}\n     * @protected\n     */\n    this.extent = options.extent ? options.extent : null;\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-zoom-extent';\n\n    const label = options.label !== undefined ? options.label : 'E';\n    const tipLabel =\n      options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(\n      typeof label === 'string' ? document.createTextNode(label) : label\n    );\n\n    button.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n\n    const cssClasses =\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(button);\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleZoomToExtent();\n  }\n\n  /**\n   * @protected\n   */\n  handleZoomToExtent() {\n    const map = this.getMap();\n    const view = map.getView();\n    const extent = !this.extent\n      ? view.getProjection().getExtent()\n      : this.extent;\n    view.fitInternal(polygonFromExtent(extent));\n  }\n}\n\nexport default ZoomToExtent;\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,OAAO,MAAM,cAAc;AAClC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,SAAQC,aAAa,EAAEC,kBAAkB,QAAO,WAAW;AAC3D,SAAQC,UAAU,IAAIC,iBAAiB,QAAO,oBAAoB;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,SAASN,OAAO,CAAC;EACjC;AACF;AACA;EACEO,WAAWA,CAACC,OAAO,EAAE;IACnBA,OAAO,GAAGA,OAAO,GAAGA,OAAO,GAAG,CAAC,CAAC;IAEhC,KAAK,CAAC;MACJC,OAAO,EAAEC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MACtCC,MAAM,EAAEJ,OAAO,CAACI;IAClB,CAAC,CAAC;;IAEF;AACJ;AACA;AACA;IACI,IAAI,CAACC,MAAM,GAAGL,OAAO,CAACK,MAAM,GAAGL,OAAO,CAACK,MAAM,GAAG,IAAI;IAEpD,MAAMC,SAAS,GACbN,OAAO,CAACM,SAAS,KAAKC,SAAS,GAAGP,OAAO,CAACM,SAAS,GAAG,gBAAgB;IAExE,MAAME,KAAK,GAAGR,OAAO,CAACQ,KAAK,KAAKD,SAAS,GAAGP,OAAO,CAACQ,KAAK,GAAG,GAAG;IAC/D,MAAMC,QAAQ,GACZT,OAAO,CAACS,QAAQ,KAAKF,SAAS,GAAGP,OAAO,CAACS,QAAQ,GAAG,eAAe;IACrE,MAAMC,MAAM,GAAGR,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC/CO,MAAM,CAACC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC;IACrCD,MAAM,CAACE,KAAK,GAAGH,QAAQ;IACvBC,MAAM,CAACG,WAAW,CAChB,OAAOL,KAAK,KAAK,QAAQ,GAAGN,QAAQ,CAACY,cAAc,CAACN,KAAK,CAAC,GAAGA,KAC/D,CAAC;IAEDE,MAAM,CAACK,gBAAgB,CACrBtB,SAAS,CAACuB,KAAK,EACf,IAAI,CAACC,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,EAC5B,KACF,CAAC;IAED,MAAMC,UAAU,GACdb,SAAS,GAAG,GAAG,GAAGX,kBAAkB,GAAG,GAAG,GAAGD,aAAa;IAC5D,MAAMO,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5BA,OAAO,CAACK,SAAS,GAAGa,UAAU;IAC9BlB,OAAO,CAACY,WAAW,CAACH,MAAM,CAAC;EAC7B;;EAEA;AACF;AACA;AACA;EACEO,YAAYA,CAACG,KAAK,EAAE;IAClBA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,IAAI,CAACC,kBAAkB,CAAC,CAAC;EAC3B;;EAEA;AACF;AACA;EACEA,kBAAkBA,CAAA,EAAG;IACnB,MAAMC,GAAG,GAAG,IAAI,CAACC,MAAM,CAAC,CAAC;IACzB,MAAMC,IAAI,GAAGF,GAAG,CAACG,OAAO,CAAC,CAAC;IAC1B,MAAMrB,MAAM,GAAG,CAAC,IAAI,CAACA,MAAM,GACvBoB,IAAI,CAACE,aAAa,CAAC,CAAC,CAACC,SAAS,CAAC,CAAC,GAChC,IAAI,CAACvB,MAAM;IACfoB,IAAI,CAACI,WAAW,CAAChC,iBAAiB,CAACQ,MAAM,CAAC,CAAC;EAC7C;AACF;AAEA,eAAeP,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}