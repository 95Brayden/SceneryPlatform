{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @module ol/geom/GeometryCollection\n */\nimport EventType from '../events/EventType.js';\nimport Geometry from './Geometry.js';\nimport { closestSquaredDistanceXY, createOrUpdateEmpty, extend, getCenter } from '../extent.js';\nimport { listen, unlistenByKey } from '../events.js';\n\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */\nclass GeometryCollection extends Geometry {\n  /**\n   * @param {Array<Geometry>} [geometries] Geometries.\n   */\n  constructor(geometries) {\n    super();\n\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n    this.geometries_ = geometries ? geometries : null;\n\n    /**\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.changeEventsKeys_ = [];\n    this.listenGeometriesChange_();\n  }\n\n  /**\n   * @private\n   */\n  unlistenGeometriesChange_() {\n    this.changeEventsKeys_.forEach(unlistenByKey);\n    this.changeEventsKeys_.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  listenGeometriesChange_() {\n    if (!this.geometries_) {\n      return;\n    }\n    for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      this.changeEventsKeys_.push(listen(this.geometries_[i], EventType.CHANGE, this.changed, this));\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @api\n   */\n  clone() {\n    const geometryCollection = new GeometryCollection(null);\n    geometryCollection.setGeometries(this.geometries_);\n    geometryCollection.applyProperties(this);\n    return geometryCollection;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    createOrUpdateEmpty(extent);\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n    return extent;\n  }\n\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n  getGeometries() {\n    return cloneGeometries(this.geometries_);\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArray() {\n    return this.geometries_;\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArrayRecursive() {\n    /** @type {Array<Geometry>} */\n    let geometriesArray = [];\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].getType() === this.getType()) {\n        geometriesArray = geometriesArray.concat( /** @type {GeometryCollection} */geometries[i].getGeometriesArrayRecursive());\n      } else {\n        geometriesArray.push(geometries[i]);\n      }\n    }\n    return geometriesArray;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {GeometryCollection} Simplified GeometryCollection.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance) {\n      return this;\n    }\n    const simplifiedGeometries = [];\n    const geometries = this.geometries_;\n    let simplified = false;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      const geometry = geometries[i];\n      const simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n      simplifiedGeometries.push(simplifiedGeometry);\n      if (simplifiedGeometry !== geometry) {\n        simplified = true;\n      }\n    }\n    if (simplified) {\n      const simplifiedGeometryCollection = new GeometryCollection(null);\n      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n      return simplifiedGeometryCollection;\n    }\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n    return this;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'GeometryCollection';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.geometries_.length === 0;\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, sy, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n  setGeometries(geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  }\n\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n  setGeometriesArray(geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  applyTransform(transformFn) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n    this.changed();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n    this.changed();\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.unlistenGeometriesChange_();\n    super.disposeInternal();\n  }\n}\n\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n  const clonedGeometries = [];\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n  return clonedGeometries;\n}\nexport default GeometryCollection;","map":{"version":3,"names":["EventType","Geometry","closestSquaredDistanceXY","createOrUpdateEmpty","extend","getCenter","listen","unlistenByKey","GeometryCollection","constructor","geometries","geometries_","changeEventsKeys_","listenGeometriesChange_","unlistenGeometriesChange_","forEach","length","i","ii","push","CHANGE","changed","clone","geometryCollection","setGeometries","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","containsXY","computeExtent","extent","getGeometries","cloneGeometries","getGeometriesArray","getGeometriesArrayRecursive","geometriesArray","getType","concat","getSimplifiedGeometry","squaredTolerance","simplifiedGeometryRevision","getRevision","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometries","simplified","geometry","simplifiedGeometry","simplifiedGeometryCollection","setGeometriesArray","intersectsExtent","isEmpty","rotate","angle","anchor","scale","sx","sy","applyTransform","transformFn","translate","deltaX","deltaY","disposeInternal","clonedGeometries"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/geom/GeometryCollection.js"],"sourcesContent":["/**\n * @module ol/geom/GeometryCollection\n */\nimport EventType from '../events/EventType.js';\nimport Geometry from './Geometry.js';\nimport {\n  closestSquaredDistanceXY,\n  createOrUpdateEmpty,\n  extend,\n  getCenter,\n} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */\nclass GeometryCollection extends Geometry {\n  /**\n   * @param {Array<Geometry>} [geometries] Geometries.\n   */\n  constructor(geometries) {\n    super();\n\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n    this.geometries_ = geometries ? geometries : null;\n\n    /**\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.changeEventsKeys_ = [];\n\n    this.listenGeometriesChange_();\n  }\n\n  /**\n   * @private\n   */\n  unlistenGeometriesChange_() {\n    this.changeEventsKeys_.forEach(unlistenByKey);\n    this.changeEventsKeys_.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  listenGeometriesChange_() {\n    if (!this.geometries_) {\n      return;\n    }\n    for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      this.changeEventsKeys_.push(\n        listen(this.geometries_[i], EventType.CHANGE, this.changed, this)\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @api\n   */\n  clone() {\n    const geometryCollection = new GeometryCollection(null);\n    geometryCollection.setGeometries(this.geometries_);\n    geometryCollection.applyProperties(this);\n    return geometryCollection;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(\n        x,\n        y,\n        closestPoint,\n        minSquaredDistance\n      );\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    createOrUpdateEmpty(extent);\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n    return extent;\n  }\n\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n  getGeometries() {\n    return cloneGeometries(this.geometries_);\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArray() {\n    return this.geometries_;\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArrayRecursive() {\n    /** @type {Array<Geometry>} */\n    let geometriesArray = [];\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].getType() === this.getType()) {\n        geometriesArray = geometriesArray.concat(\n          /** @type {GeometryCollection} */ (\n            geometries[i]\n          ).getGeometriesArrayRecursive()\n        );\n      } else {\n        geometriesArray.push(geometries[i]);\n      }\n    }\n    return geometriesArray;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {GeometryCollection} Simplified GeometryCollection.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometries = [];\n    const geometries = this.geometries_;\n    let simplified = false;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      const geometry = geometries[i];\n      const simplifiedGeometry =\n        geometry.getSimplifiedGeometry(squaredTolerance);\n      simplifiedGeometries.push(simplifiedGeometry);\n      if (simplifiedGeometry !== geometry) {\n        simplified = true;\n      }\n    }\n    if (simplified) {\n      const simplifiedGeometryCollection = new GeometryCollection(null);\n      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n      return simplifiedGeometryCollection;\n    }\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n    return this;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'GeometryCollection';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.geometries_.length === 0;\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, sy, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n  setGeometries(geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  }\n\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n  setGeometriesArray(geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  applyTransform(transformFn) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n    this.changed();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n    this.changed();\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.unlistenGeometriesChange_();\n    super.disposeInternal();\n  }\n}\n\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n  const clonedGeometries = [];\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n  return clonedGeometries;\n}\n\nexport default GeometryCollection;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}