{"ast":null,"code":"/**\n * @module ol/Geolocation\n */\nimport BaseEvent from './events/Event.js';\nimport BaseObject from './Object.js';\nimport { circular as circularPolygon } from './geom/Polygon.js';\nimport { get as getProjection, getTransformFromProjections, identityTransform } from './proj.js';\nimport { toRadians } from './math.js';\n\n/**\n * @enum {string}\n */\nconst Property = {\n  ACCURACY: 'accuracy',\n  ACCURACY_GEOMETRY: 'accuracyGeometry',\n  ALTITUDE: 'altitude',\n  ALTITUDE_ACCURACY: 'altitudeAccuracy',\n  HEADING: 'heading',\n  POSITION: 'position',\n  PROJECTION: 'projection',\n  SPEED: 'speed',\n  TRACKING: 'tracking',\n  TRACKING_OPTIONS: 'trackingOptions'\n};\n\n/**\n * @enum string\n */\nconst GeolocationErrorType = {\n  /**\n   * Triggered when a `GeolocationPositionError` occurs.\n   * @event module:ol/Geolocation.GeolocationError#error\n   * @api\n   */\n  ERROR: 'error'\n};\n\n/**\n * @classdesc\n * Events emitted on [GeolocationPositionError](https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError).\n */\nexport class GeolocationError extends BaseEvent {\n  /**\n   * @param {GeolocationPositionError} error error object.\n   */\n  constructor(error) {\n    super(GeolocationErrorType.ERROR);\n\n    /**\n     * Code of the underlying `GeolocationPositionError`.\n     * @type {number}\n     * @api\n     */\n    this.code = error.code;\n\n    /**\n     * Message of the underlying `GeolocationPositionError`.\n     * @type {string}\n     * @api\n     */\n    this.message = error.message;\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [tracking=false] Start Tracking right after\n * instantiation.\n * @property {PositionOptions} [trackingOptions] Tracking options.\n * See https://www.w3.org/TR/geolocation-API/#position_options_interface.\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\n * is reported in.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|\n *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|\n *    'change:trackingOptions'} GeolocationObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<GeolocationObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'error', GeolocationError, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|GeolocationObjectEventTypes, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return>} GeolocationOnSignature\n */\n\n/**\n * @classdesc\n * Helper class for providing HTML5 Geolocation capabilities.\n * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)\n * is used to locate a user's position.\n *\n * To get notified of position changes and errors, register listeners for the generic\n * `change` event and the `error` event on your instance of {@link module:ol/Geolocation~Geolocation}.\n *\n * Example:\n *\n *     const geolocation = new Geolocation({\n *       // take the projection to use from the map's view\n *       projection: view.getProjection()\n *     });\n *     // listen to changes in position\n *     geolocation.on('change', function(evt) {\n *       console.log(geolocation.getPosition());\n *     });\n *     // listen to error\n *     geolocation.on('error', function(evt) {\n *       window.console.log(evt.message);\n *     });\n *\n * @fires GeolocationError\n * @api\n */\nclass Geolocation extends BaseObject {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {GeolocationOnSignature<void>}\n     */\n    this.un;\n    options = options || {};\n\n    /**\n     * The unprojected (EPSG:4326) device position.\n     * @private\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n    this.position_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./proj.js\").TransformFunction}\n     */\n    this.transform_ = identityTransform;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.watchId_ = undefined;\n    this.addChangeListener(Property.PROJECTION, this.handleProjectionChanged_);\n    this.addChangeListener(Property.TRACKING, this.handleTrackingChanged_);\n    if (options.projection !== undefined) {\n      this.setProjection(options.projection);\n    }\n    if (options.trackingOptions !== undefined) {\n      this.setTrackingOptions(options.trackingOptions);\n    }\n    this.setTracking(options.tracking !== undefined ? options.tracking : false);\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.setTracking(false);\n    super.disposeInternal();\n  }\n\n  /**\n   * @private\n   */\n  handleProjectionChanged_() {\n    const projection = this.getProjection();\n    if (projection) {\n      this.transform_ = getTransformFromProjections(getProjection('EPSG:4326'), projection);\n      if (this.position_) {\n        this.set(Property.POSITION, this.transform_(this.position_));\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleTrackingChanged_() {\n    if ('geolocation' in navigator) {\n      const tracking = this.getTracking();\n      if (tracking && this.watchId_ === undefined) {\n        this.watchId_ = navigator.geolocation.watchPosition(this.positionChange_.bind(this), this.positionError_.bind(this), this.getTrackingOptions());\n      } else if (!tracking && this.watchId_ !== undefined) {\n        navigator.geolocation.clearWatch(this.watchId_);\n        this.watchId_ = undefined;\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {GeolocationPosition} position position event.\n   */\n  positionChange_(position) {\n    const coords = position.coords;\n    this.set(Property.ACCURACY, coords.accuracy);\n    this.set(Property.ALTITUDE, coords.altitude === null ? undefined : coords.altitude);\n    this.set(Property.ALTITUDE_ACCURACY, coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy);\n    this.set(Property.HEADING, coords.heading === null ? undefined : toRadians(coords.heading));\n    if (!this.position_) {\n      this.position_ = [coords.longitude, coords.latitude];\n    } else {\n      this.position_[0] = coords.longitude;\n      this.position_[1] = coords.latitude;\n    }\n    const projectedPosition = this.transform_(this.position_);\n    this.set(Property.POSITION, projectedPosition.slice());\n    this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\n    const geometry = circularPolygon(this.position_, coords.accuracy);\n    geometry.applyTransform(this.transform_);\n    this.set(Property.ACCURACY_GEOMETRY, geometry);\n    this.changed();\n  }\n\n  /**\n   * @private\n   * @param {GeolocationPositionError} error error object.\n   */\n  positionError_(error) {\n    this.dispatchEvent(new GeolocationError(error));\n  }\n\n  /**\n   * Get the accuracy of the position in meters.\n   * @return {number|undefined} The accuracy of the position measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n  getAccuracy() {\n    return (/** @type {number|undefined} */this.get(Property.ACCURACY)\n    );\n  }\n\n  /**\n   * Get a geometry of the position accuracy.\n   * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\n   * @observable\n   * @api\n   */\n  getAccuracyGeometry() {\n    return (/** @type {?import(\"./geom/Polygon.js\").default} */\n      this.get(Property.ACCURACY_GEOMETRY) || null\n    );\n  }\n\n  /**\n   * Get the altitude associated with the position.\n   * @return {number|undefined} The altitude of the position in meters above mean\n   *     sea level.\n   * @observable\n   * @api\n   */\n  getAltitude() {\n    return (/** @type {number|undefined} */this.get(Property.ALTITUDE)\n    );\n  }\n\n  /**\n   * Get the altitude accuracy of the position.\n   * @return {number|undefined} The accuracy of the altitude measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n  getAltitudeAccuracy() {\n    return (/** @type {number|undefined} */\n      this.get(Property.ALTITUDE_ACCURACY)\n    );\n  }\n\n  /**\n   * Get the heading as radians clockwise from North.\n   * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\n   * is set to `true` in the tracking options.\n   * @return {number|undefined} The heading of the device in radians from north.\n   * @observable\n   * @api\n   */\n  getHeading() {\n    return (/** @type {number|undefined} */this.get(Property.HEADING)\n    );\n  }\n\n  /**\n   * Get the position of the device.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\n   *     in the current projection.\n   * @observable\n   * @api\n   */\n  getPosition() {\n    return (/** @type {import(\"./coordinate.js\").Coordinate|undefined} */\n      this.get(Property.POSITION)\n    );\n  }\n\n  /**\n   * Get the projection associated with the position.\n   * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n  getProjection() {\n    return (/** @type {import(\"./proj/Projection.js\").default|undefined} */\n      this.get(Property.PROJECTION)\n    );\n  }\n\n  /**\n   * Get the speed in meters per second.\n   * @return {number|undefined} The instantaneous speed of the device in meters\n   *     per second.\n   * @observable\n   * @api\n   */\n  getSpeed() {\n    return (/** @type {number|undefined} */this.get(Property.SPEED)\n    );\n  }\n\n  /**\n   * Determine if the device location is being tracked.\n   * @return {boolean} The device location is being tracked.\n   * @observable\n   * @api\n   */\n  getTracking() {\n    return (/** @type {boolean} */this.get(Property.TRACKING)\n    );\n  }\n\n  /**\n   * Get the tracking options.\n   * See https://www.w3.org/TR/geolocation-API/#position-options.\n   * @return {PositionOptions|undefined} PositionOptions as defined by\n   *     the [HTML5 Geolocation spec\n   *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n  getTrackingOptions() {\n    return (/** @type {PositionOptions|undefined} */\n      this.get(Property.TRACKING_OPTIONS)\n    );\n  }\n\n  /**\n   * Set the projection to use for transforming the coordinates.\n   * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n  setProjection(projection) {\n    this.set(Property.PROJECTION, getProjection(projection));\n  }\n\n  /**\n   * Enable or disable tracking.\n   * @param {boolean} tracking Enable tracking.\n   * @observable\n   * @api\n   */\n  setTracking(tracking) {\n    this.set(Property.TRACKING, tracking);\n  }\n\n  /**\n   * Set the tracking options.\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\n   * @param {PositionOptions} options PositionOptions as defined by the\n   *     [HTML5 Geolocation spec\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n  setTrackingOptions(options) {\n    this.set(Property.TRACKING_OPTIONS, options);\n  }\n}\nexport default Geolocation;","map":{"version":3,"names":["BaseEvent","BaseObject","circular","circularPolygon","get","getProjection","getTransformFromProjections","identityTransform","toRadians","Property","ACCURACY","ACCURACY_GEOMETRY","ALTITUDE","ALTITUDE_ACCURACY","HEADING","POSITION","PROJECTION","SPEED","TRACKING","TRACKING_OPTIONS","GeolocationErrorType","ERROR","GeolocationError","constructor","error","code","message","Geolocation","options","on","once","un","position_","transform_","watchId_","undefined","addChangeListener","handleProjectionChanged_","handleTrackingChanged_","projection","setProjection","trackingOptions","setTrackingOptions","setTracking","tracking","disposeInternal","set","navigator","getTracking","geolocation","watchPosition","positionChange_","bind","positionError_","getTrackingOptions","clearWatch","position","coords","accuracy","altitude","altitudeAccuracy","heading","longitude","latitude","projectedPosition","slice","speed","geometry","applyTransform","changed","dispatchEvent","getAccuracy","getAccuracyGeometry","getAltitude","getAltitudeAccuracy","getHeading","getPosition","getSpeed"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/ol/Geolocation.js"],"sourcesContent":["/**\n * @module ol/Geolocation\n */\nimport BaseEvent from './events/Event.js';\nimport BaseObject from './Object.js';\nimport {circular as circularPolygon} from './geom/Polygon.js';\nimport {\n  get as getProjection,\n  getTransformFromProjections,\n  identityTransform,\n} from './proj.js';\nimport {toRadians} from './math.js';\n\n/**\n * @enum {string}\n */\nconst Property = {\n  ACCURACY: 'accuracy',\n  ACCURACY_GEOMETRY: 'accuracyGeometry',\n  ALTITUDE: 'altitude',\n  ALTITUDE_ACCURACY: 'altitudeAccuracy',\n  HEADING: 'heading',\n  POSITION: 'position',\n  PROJECTION: 'projection',\n  SPEED: 'speed',\n  TRACKING: 'tracking',\n  TRACKING_OPTIONS: 'trackingOptions',\n};\n\n/**\n * @enum string\n */\nconst GeolocationErrorType = {\n  /**\n   * Triggered when a `GeolocationPositionError` occurs.\n   * @event module:ol/Geolocation.GeolocationError#error\n   * @api\n   */\n  ERROR: 'error',\n};\n\n/**\n * @classdesc\n * Events emitted on [GeolocationPositionError](https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError).\n */\nexport class GeolocationError extends BaseEvent {\n  /**\n   * @param {GeolocationPositionError} error error object.\n   */\n  constructor(error) {\n    super(GeolocationErrorType.ERROR);\n\n    /**\n     * Code of the underlying `GeolocationPositionError`.\n     * @type {number}\n     * @api\n     */\n    this.code = error.code;\n\n    /**\n     * Message of the underlying `GeolocationPositionError`.\n     * @type {string}\n     * @api\n     */\n    this.message = error.message;\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [tracking=false] Start Tracking right after\n * instantiation.\n * @property {PositionOptions} [trackingOptions] Tracking options.\n * See https://www.w3.org/TR/geolocation-API/#position_options_interface.\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\n * is reported in.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|\n *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|\n *    'change:trackingOptions'} GeolocationObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<GeolocationObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'error', GeolocationError, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|GeolocationObjectEventTypes, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return>} GeolocationOnSignature\n */\n\n/**\n * @classdesc\n * Helper class for providing HTML5 Geolocation capabilities.\n * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)\n * is used to locate a user's position.\n *\n * To get notified of position changes and errors, register listeners for the generic\n * `change` event and the `error` event on your instance of {@link module:ol/Geolocation~Geolocation}.\n *\n * Example:\n *\n *     const geolocation = new Geolocation({\n *       // take the projection to use from the map's view\n *       projection: view.getProjection()\n *     });\n *     // listen to changes in position\n *     geolocation.on('change', function(evt) {\n *       console.log(geolocation.getPosition());\n *     });\n *     // listen to error\n *     geolocation.on('error', function(evt) {\n *       window.console.log(evt.message);\n *     });\n *\n * @fires GeolocationError\n * @api\n */\nclass Geolocation extends BaseObject {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {GeolocationOnSignature<void>}\n     */\n    this.un;\n\n    options = options || {};\n\n    /**\n     * The unprojected (EPSG:4326) device position.\n     * @private\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n    this.position_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./proj.js\").TransformFunction}\n     */\n    this.transform_ = identityTransform;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.watchId_ = undefined;\n\n    this.addChangeListener(Property.PROJECTION, this.handleProjectionChanged_);\n    this.addChangeListener(Property.TRACKING, this.handleTrackingChanged_);\n\n    if (options.projection !== undefined) {\n      this.setProjection(options.projection);\n    }\n    if (options.trackingOptions !== undefined) {\n      this.setTrackingOptions(options.trackingOptions);\n    }\n\n    this.setTracking(options.tracking !== undefined ? options.tracking : false);\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.setTracking(false);\n    super.disposeInternal();\n  }\n\n  /**\n   * @private\n   */\n  handleProjectionChanged_() {\n    const projection = this.getProjection();\n    if (projection) {\n      this.transform_ = getTransformFromProjections(\n        getProjection('EPSG:4326'),\n        projection\n      );\n      if (this.position_) {\n        this.set(Property.POSITION, this.transform_(this.position_));\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleTrackingChanged_() {\n    if ('geolocation' in navigator) {\n      const tracking = this.getTracking();\n      if (tracking && this.watchId_ === undefined) {\n        this.watchId_ = navigator.geolocation.watchPosition(\n          this.positionChange_.bind(this),\n          this.positionError_.bind(this),\n          this.getTrackingOptions()\n        );\n      } else if (!tracking && this.watchId_ !== undefined) {\n        navigator.geolocation.clearWatch(this.watchId_);\n        this.watchId_ = undefined;\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {GeolocationPosition} position position event.\n   */\n  positionChange_(position) {\n    const coords = position.coords;\n    this.set(Property.ACCURACY, coords.accuracy);\n    this.set(\n      Property.ALTITUDE,\n      coords.altitude === null ? undefined : coords.altitude\n    );\n    this.set(\n      Property.ALTITUDE_ACCURACY,\n      coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy\n    );\n    this.set(\n      Property.HEADING,\n      coords.heading === null ? undefined : toRadians(coords.heading)\n    );\n    if (!this.position_) {\n      this.position_ = [coords.longitude, coords.latitude];\n    } else {\n      this.position_[0] = coords.longitude;\n      this.position_[1] = coords.latitude;\n    }\n    const projectedPosition = this.transform_(this.position_);\n    this.set(Property.POSITION, projectedPosition.slice());\n    this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\n    const geometry = circularPolygon(this.position_, coords.accuracy);\n    geometry.applyTransform(this.transform_);\n    this.set(Property.ACCURACY_GEOMETRY, geometry);\n    this.changed();\n  }\n\n  /**\n   * @private\n   * @param {GeolocationPositionError} error error object.\n   */\n  positionError_(error) {\n    this.dispatchEvent(new GeolocationError(error));\n  }\n\n  /**\n   * Get the accuracy of the position in meters.\n   * @return {number|undefined} The accuracy of the position measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n  getAccuracy() {\n    return /** @type {number|undefined} */ (this.get(Property.ACCURACY));\n  }\n\n  /**\n   * Get a geometry of the position accuracy.\n   * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\n   * @observable\n   * @api\n   */\n  getAccuracyGeometry() {\n    return /** @type {?import(\"./geom/Polygon.js\").default} */ (\n      this.get(Property.ACCURACY_GEOMETRY) || null\n    );\n  }\n\n  /**\n   * Get the altitude associated with the position.\n   * @return {number|undefined} The altitude of the position in meters above mean\n   *     sea level.\n   * @observable\n   * @api\n   */\n  getAltitude() {\n    return /** @type {number|undefined} */ (this.get(Property.ALTITUDE));\n  }\n\n  /**\n   * Get the altitude accuracy of the position.\n   * @return {number|undefined} The accuracy of the altitude measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n  getAltitudeAccuracy() {\n    return /** @type {number|undefined} */ (\n      this.get(Property.ALTITUDE_ACCURACY)\n    );\n  }\n\n  /**\n   * Get the heading as radians clockwise from North.\n   * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\n   * is set to `true` in the tracking options.\n   * @return {number|undefined} The heading of the device in radians from north.\n   * @observable\n   * @api\n   */\n  getHeading() {\n    return /** @type {number|undefined} */ (this.get(Property.HEADING));\n  }\n\n  /**\n   * Get the position of the device.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\n   *     in the current projection.\n   * @observable\n   * @api\n   */\n  getPosition() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(Property.POSITION)\n    );\n  }\n\n  /**\n   * Get the projection associated with the position.\n   * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n  getProjection() {\n    return /** @type {import(\"./proj/Projection.js\").default|undefined} */ (\n      this.get(Property.PROJECTION)\n    );\n  }\n\n  /**\n   * Get the speed in meters per second.\n   * @return {number|undefined} The instantaneous speed of the device in meters\n   *     per second.\n   * @observable\n   * @api\n   */\n  getSpeed() {\n    return /** @type {number|undefined} */ (this.get(Property.SPEED));\n  }\n\n  /**\n   * Determine if the device location is being tracked.\n   * @return {boolean} The device location is being tracked.\n   * @observable\n   * @api\n   */\n  getTracking() {\n    return /** @type {boolean} */ (this.get(Property.TRACKING));\n  }\n\n  /**\n   * Get the tracking options.\n   * See https://www.w3.org/TR/geolocation-API/#position-options.\n   * @return {PositionOptions|undefined} PositionOptions as defined by\n   *     the [HTML5 Geolocation spec\n   *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n  getTrackingOptions() {\n    return /** @type {PositionOptions|undefined} */ (\n      this.get(Property.TRACKING_OPTIONS)\n    );\n  }\n\n  /**\n   * Set the projection to use for transforming the coordinates.\n   * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n  setProjection(projection) {\n    this.set(Property.PROJECTION, getProjection(projection));\n  }\n\n  /**\n   * Enable or disable tracking.\n   * @param {boolean} tracking Enable tracking.\n   * @observable\n   * @api\n   */\n  setTracking(tracking) {\n    this.set(Property.TRACKING, tracking);\n  }\n\n  /**\n   * Set the tracking options.\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\n   * @param {PositionOptions} options PositionOptions as defined by the\n   *     [HTML5 Geolocation spec\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n  setTrackingOptions(options) {\n    this.set(Property.TRACKING_OPTIONS, options);\n  }\n}\n\nexport default Geolocation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}