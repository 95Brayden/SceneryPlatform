{"ast":null,"code":"import { BaseSource } from './basesource.js';\nclass FileReaderSource extends BaseSource {\n  constructor(file) {\n    super();\n    this.file = file;\n  }\n  async fetchSlice(slice, signal) {\n    return new Promise((resolve, reject) => {\n      const blob = this.file.slice(slice.offset, slice.offset + slice.length);\n      const reader = new FileReader();\n      reader.onload = event => resolve(event.target.result);\n      reader.onerror = reject;\n      reader.onabort = reject;\n      reader.readAsArrayBuffer(blob);\n      if (signal) {\n        signal.addEventListener('abort', () => reader.abort());\n      }\n    });\n  }\n}\n\n/**\n * Create a new source from a given file/blob.\n * @param {Blob} file The file or blob to read from.\n * @returns The constructed source\n */\nexport function makeFileReaderSource(file) {\n  return new FileReaderSource(file);\n}","map":{"version":3,"names":["BaseSource","FileReaderSource","constructor","file","fetchSlice","slice","signal","Promise","resolve","reject","blob","offset","length","reader","FileReader","onload","event","target","result","onerror","onabort","readAsArrayBuffer","addEventListener","abort","makeFileReaderSource"],"sources":["E:/Desktop/SceneryPlatform_v3.0_LTS/node_modules/geotiff/dist-module/source/filereader.js"],"sourcesContent":["import { BaseSource } from './basesource.js';\n\nclass FileReaderSource extends BaseSource {\n  constructor(file) {\n    super();\n    this.file = file;\n  }\n\n  async fetchSlice(slice, signal) {\n    return new Promise((resolve, reject) => {\n      const blob = this.file.slice(slice.offset, slice.offset + slice.length);\n      const reader = new FileReader();\n      reader.onload = (event) => resolve(event.target.result);\n      reader.onerror = reject;\n      reader.onabort = reject;\n      reader.readAsArrayBuffer(blob);\n\n      if (signal) {\n        signal.addEventListener('abort', () => reader.abort());\n      }\n    });\n  }\n}\n\n/**\n * Create a new source from a given file/blob.\n * @param {Blob} file The file or blob to read from.\n * @returns The constructed source\n */\nexport function makeFileReaderSource(file) {\n  return new FileReaderSource(file);\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,iBAAiB;AAE5C,MAAMC,gBAAgB,SAASD,UAAU,CAAC;EACxCE,WAAWA,CAACC,IAAI,EAAE;IAChB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,IAAI,GAAGA,IAAI;EAClB;EAEA,MAAMC,UAAUA,CAACC,KAAK,EAAEC,MAAM,EAAE;IAC9B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,IAAI,GAAG,IAAI,CAACP,IAAI,CAACE,KAAK,CAACA,KAAK,CAACM,MAAM,EAAEN,KAAK,CAACM,MAAM,GAAGN,KAAK,CAACO,MAAM,CAAC;MACvE,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAKR,OAAO,CAACQ,KAAK,CAACC,MAAM,CAACC,MAAM,CAAC;MACvDL,MAAM,CAACM,OAAO,GAAGV,MAAM;MACvBI,MAAM,CAACO,OAAO,GAAGX,MAAM;MACvBI,MAAM,CAACQ,iBAAiB,CAACX,IAAI,CAAC;MAE9B,IAAIJ,MAAM,EAAE;QACVA,MAAM,CAACgB,gBAAgB,CAAC,OAAO,EAAE,MAAMT,MAAM,CAACU,KAAK,CAAC,CAAC,CAAC;MACxD;IACF,CAAC,CAAC;EACJ;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAACrB,IAAI,EAAE;EACzC,OAAO,IAAIF,gBAAgB,CAACE,IAAI,CAAC;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}