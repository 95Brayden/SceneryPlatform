{"ast":null,"code":"/**\n * @module ol/TileRange\n */\n\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nclass TileRange {\n  /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */\n  constructor(minX, maxX, minY, maxY) {\n    /**\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */\n  contains(tileCoord) {\n    return this.containsXY(tileCoord[1], tileCoord[2]);\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */\n  containsTileRange(tileRange) {\n    return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX && this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;\n  }\n\n  /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */\n  containsXY(x, y) {\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */\n  equals(tileRange) {\n    return this.minX == tileRange.minX && this.minY == tileRange.minY && this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   */\n  extend(tileRange) {\n    if (tileRange.minX < this.minX) {\n      this.minX = tileRange.minX;\n    }\n    if (tileRange.maxX > this.maxX) {\n      this.maxX = tileRange.maxX;\n    }\n    if (tileRange.minY < this.minY) {\n      this.minY = tileRange.minY;\n    }\n    if (tileRange.maxY > this.maxY) {\n      this.maxY = tileRange.maxY;\n    }\n  }\n\n  /**\n   * @return {number} Height.\n   */\n  getHeight() {\n    return this.maxY - this.minY + 1;\n  }\n\n  /**\n   * @return {import(\"./size.js\").Size} Size.\n   */\n  getSize() {\n    return [this.getWidth(), this.getHeight()];\n  }\n\n  /**\n   * @return {number} Width.\n   */\n  getWidth() {\n    return this.maxX - this.minX + 1;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */\n  intersects(tileRange) {\n    return this.minX <= tileRange.maxX && this.maxX >= tileRange.minX && this.minY <= tileRange.maxY && this.maxY >= tileRange.minY;\n  }\n}\n\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  }\n  return new TileRange(minX, maxX, minY, maxY);\n}\nexport default TileRange;","map":{"version":3,"names":["TileRange","constructor","minX","maxX","minY","maxY","contains","tileCoord","containsXY","containsTileRange","tileRange","x","y","equals","extend","getHeight","getSize","getWidth","intersects","createOrUpdate","undefined"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/TileRange.js"],"sourcesContent":["/**\n * @module ol/TileRange\n */\n\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nclass TileRange {\n  /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */\n  constructor(minX, maxX, minY, maxY) {\n    /**\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */\n  contains(tileCoord) {\n    return this.containsXY(tileCoord[1], tileCoord[2]);\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */\n  containsTileRange(tileRange) {\n    return (\n      this.minX <= tileRange.minX &&\n      tileRange.maxX <= this.maxX &&\n      this.minY <= tileRange.minY &&\n      tileRange.maxY <= this.maxY\n    );\n  }\n\n  /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */\n  containsXY(x, y) {\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */\n  equals(tileRange) {\n    return (\n      this.minX == tileRange.minX &&\n      this.minY == tileRange.minY &&\n      this.maxX == tileRange.maxX &&\n      this.maxY == tileRange.maxY\n    );\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   */\n  extend(tileRange) {\n    if (tileRange.minX < this.minX) {\n      this.minX = tileRange.minX;\n    }\n    if (tileRange.maxX > this.maxX) {\n      this.maxX = tileRange.maxX;\n    }\n    if (tileRange.minY < this.minY) {\n      this.minY = tileRange.minY;\n    }\n    if (tileRange.maxY > this.maxY) {\n      this.maxY = tileRange.maxY;\n    }\n  }\n\n  /**\n   * @return {number} Height.\n   */\n  getHeight() {\n    return this.maxY - this.minY + 1;\n  }\n\n  /**\n   * @return {import(\"./size.js\").Size} Size.\n   */\n  getSize() {\n    return [this.getWidth(), this.getHeight()];\n  }\n\n  /**\n   * @return {number} Width.\n   */\n  getWidth() {\n    return this.maxX - this.minX + 1;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */\n  intersects(tileRange) {\n    return (\n      this.minX <= tileRange.maxX &&\n      this.maxX >= tileRange.minX &&\n      this.minY <= tileRange.maxY &&\n      this.maxY >= tileRange.minY\n    );\n  }\n}\n\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  }\n  return new TileRange(minX, maxX, minY, maxY);\n}\n\nexport default TileRange;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMA,SAAS,CAAC;EACd;AACF;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE;IAClC;AACJ;AACA;IACI,IAAI,CAACH,IAAI,GAAGA,IAAI;;IAEhB;AACJ;AACA;IACI,IAAI,CAACC,IAAI,GAAGA,IAAI;;IAEhB;AACJ;AACA;IACI,IAAI,CAACC,IAAI,GAAGA,IAAI;;IAEhB;AACJ;AACA;IACI,IAAI,CAACC,IAAI,GAAGA,IAAI;EAClB;;EAEA;AACF;AACA;AACA;EACEC,QAAQA,CAACC,SAAS,EAAE;IAClB,OAAO,IAAI,CAACC,UAAU,CAACD,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;EACpD;;EAEA;AACF;AACA;AACA;EACEE,iBAAiBA,CAACC,SAAS,EAAE;IAC3B,OACE,IAAI,CAACR,IAAI,IAAIQ,SAAS,CAACR,IAAI,IAC3BQ,SAAS,CAACP,IAAI,IAAI,IAAI,CAACA,IAAI,IAC3B,IAAI,CAACC,IAAI,IAAIM,SAAS,CAACN,IAAI,IAC3BM,SAAS,CAACL,IAAI,IAAI,IAAI,CAACA,IAAI;EAE/B;;EAEA;AACF;AACA;AACA;AACA;EACEG,UAAUA,CAACG,CAAC,EAAEC,CAAC,EAAE;IACf,OAAO,IAAI,CAACV,IAAI,IAAIS,CAAC,IAAIA,CAAC,IAAI,IAAI,CAACR,IAAI,IAAI,IAAI,CAACC,IAAI,IAAIQ,CAAC,IAAIA,CAAC,IAAI,IAAI,CAACP,IAAI;EAC7E;;EAEA;AACF;AACA;AACA;EACEQ,MAAMA,CAACH,SAAS,EAAE;IAChB,OACE,IAAI,CAACR,IAAI,IAAIQ,SAAS,CAACR,IAAI,IAC3B,IAAI,CAACE,IAAI,IAAIM,SAAS,CAACN,IAAI,IAC3B,IAAI,CAACD,IAAI,IAAIO,SAAS,CAACP,IAAI,IAC3B,IAAI,CAACE,IAAI,IAAIK,SAAS,CAACL,IAAI;EAE/B;;EAEA;AACF;AACA;EACES,MAAMA,CAACJ,SAAS,EAAE;IAChB,IAAIA,SAAS,CAACR,IAAI,GAAG,IAAI,CAACA,IAAI,EAAE;MAC9B,IAAI,CAACA,IAAI,GAAGQ,SAAS,CAACR,IAAI;IAC5B;IACA,IAAIQ,SAAS,CAACP,IAAI,GAAG,IAAI,CAACA,IAAI,EAAE;MAC9B,IAAI,CAACA,IAAI,GAAGO,SAAS,CAACP,IAAI;IAC5B;IACA,IAAIO,SAAS,CAACN,IAAI,GAAG,IAAI,CAACA,IAAI,EAAE;MAC9B,IAAI,CAACA,IAAI,GAAGM,SAAS,CAACN,IAAI;IAC5B;IACA,IAAIM,SAAS,CAACL,IAAI,GAAG,IAAI,CAACA,IAAI,EAAE;MAC9B,IAAI,CAACA,IAAI,GAAGK,SAAS,CAACL,IAAI;IAC5B;EACF;;EAEA;AACF;AACA;EACEU,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAACV,IAAI,GAAG,IAAI,CAACD,IAAI,GAAG,CAAC;EAClC;;EAEA;AACF;AACA;EACEY,OAAOA,CAAA,EAAG;IACR,OAAO,CAAC,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAACF,SAAS,CAAC,CAAC,CAAC;EAC5C;;EAEA;AACF;AACA;EACEE,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACd,IAAI,GAAG,IAAI,CAACD,IAAI,GAAG,CAAC;EAClC;;EAEA;AACF;AACA;AACA;EACEgB,UAAUA,CAACR,SAAS,EAAE;IACpB,OACE,IAAI,CAACR,IAAI,IAAIQ,SAAS,CAACP,IAAI,IAC3B,IAAI,CAACA,IAAI,IAAIO,SAAS,CAACR,IAAI,IAC3B,IAAI,CAACE,IAAI,IAAIM,SAAS,CAACL,IAAI,IAC3B,IAAI,CAACA,IAAI,IAAIK,SAAS,CAACN,IAAI;EAE/B;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASe,cAAcA,CAACjB,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEK,SAAS,EAAE;EAChE,IAAIA,SAAS,KAAKU,SAAS,EAAE;IAC3BV,SAAS,CAACR,IAAI,GAAGA,IAAI;IACrBQ,SAAS,CAACP,IAAI,GAAGA,IAAI;IACrBO,SAAS,CAACN,IAAI,GAAGA,IAAI;IACrBM,SAAS,CAACL,IAAI,GAAGA,IAAI;IACrB,OAAOK,SAAS;EAClB;EACA,OAAO,IAAIV,SAAS,CAACE,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,CAAC;AAC9C;AAEA,eAAeL,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}