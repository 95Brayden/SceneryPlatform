{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\n/**\n * @module ol/renderer/canvas/TileLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport ImageTile from '../../ImageTile.js';\nimport ReprojTile from '../../reproj/Tile.js';\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport { apply as applyTransform, compose as composeTransform, makeInverse, toString as toTransformString } from '../../transform.js';\nimport { ascending } from '../../array.js';\nimport { containsCoordinate, createEmpty, equals, getHeight, getIntersection, getRotatedViewport, getTopLeft, getWidth, intersects } from '../../extent.js';\nimport { fromUserExtent } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { toSize } from '../../size.js';\n\n/**\n * @classdesc\n * Canvas renderer for tile layers.\n * @api\n * @template {import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default} [LayerType=import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default]\n * @extends {CanvasLayerRenderer<LayerType>}\n */\nclass CanvasTileLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   */\n  constructor(tileLayer) {\n    super(tileLayer);\n\n    /**\n     * Rendered extent has changed since the previous `renderFrame()` call\n     * @type {boolean}\n     */\n    this.extentChanged = true;\n\n    /**\n     * @private\n     * @type {?import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedPixelRatio;\n\n    /**\n     * @protected\n     * @type {import(\"../../proj/Projection.js\").default}\n     */\n    this.renderedProjection = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedRevision;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../../Tile.js\").default>}\n     */\n    this.renderedTiles = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.newTiles_ = false;\n\n    /**\n     * @protected\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.tmpExtent = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../TileRange.js\").default}\n     */\n    this.tmpTileRange_ = new TileRange(0, 0, 0, 0);\n  }\n\n  /**\n   * @protected\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {boolean} Tile is drawable.\n   */\n  isDrawableTile(tile) {\n    const tileLayer = this.getLayer();\n    const tileState = tile.getState();\n    const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\n    return tileState == TileState.LOADED || tileState == TileState.EMPTY || tileState == TileState.ERROR && !useInterimTilesOnError;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {!import(\"../../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const projection = frameState.viewState.projection;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getSource();\n    let tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n    if (tile.getState() == TileState.ERROR) {\n      if (tileLayer.getUseInterimTilesOnError() && tileLayer.getPreload() > 0) {\n        // Preloaded tiles for lower resolutions might have finished loading.\n        this.newTiles_ = true;\n      }\n    }\n    if (!this.isDrawableTile(tile)) {\n      tile = tile.getInterimTile();\n    }\n    return tile;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n    const layer = this.getLayer();\n    const coordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n    const pixelRatio = frameState.pixelRatio;\n    const projection = frameState.viewState.projection;\n    const viewState = frameState.viewState;\n    const source = layer.getRenderSource();\n    const tileGrid = source.getTileGridForProjection(viewState.projection);\n    const tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);\n    for (let z = tileGrid.getZForResolution(viewState.resolution); z >= tileGrid.getMinZoom(); --z) {\n      const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const tile = source.getTile(z, tileCoord[1], tileCoord[2], pixelRatio, projection);\n      if (!(tile instanceof ImageTile || tile instanceof ReprojTile) || tile instanceof ReprojTile && tile.getState() === TileState.EMPTY) {\n        return null;\n      }\n      if (tile.getState() !== TileState.LOADED) {\n        continue;\n      }\n      const tileOrigin = tileGrid.getOrigin(z);\n      const tileSize = toSize(tileGrid.getTileSize(z));\n      const tileResolution = tileGrid.getResolution(z);\n      const col = Math.floor(tilePixelRatio * ((coordinate[0] - tileOrigin[0]) / tileResolution - tileCoord[1] * tileSize[0]));\n      const row = Math.floor(tilePixelRatio * ((tileOrigin[1] - coordinate[1]) / tileResolution - tileCoord[2] * tileSize[1]));\n      const gutter = Math.round(tilePixelRatio * source.getGutterForProjection(viewState.projection));\n      return this.getImageData(tile.getImage(), col + gutter, row + gutter);\n    }\n    return null;\n  }\n\n  /**\n   * @param {Object<number, Object<string, import(\"../../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @param {number} zoom Zoom level.\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {boolean|void} If `false`, the tile will not be considered loaded.\n   */\n  loadedTileCallback(tiles, zoom, tile) {\n    if (this.isDrawableTile(tile)) {\n      return super.loadedTileCallback(tiles, zoom, tile);\n    }\n    return false;\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    return !!this.getLayer().getSource();\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const viewResolution = viewState.resolution;\n    const viewCenter = viewState.center;\n    const rotation = viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getSource();\n    const sourceRevision = tileSource.getRevision();\n    const tileGrid = tileSource.getTileGridForProjection(projection);\n    const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);\n    const tileResolution = tileGrid.getResolution(z);\n    let extent = frameState.extent;\n    const resolution = frameState.viewState.resolution;\n    const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\n    // desired dimensions of the canvas in pixels\n    const width = Math.round(getWidth(extent) / resolution * pixelRatio);\n    const height = Math.round(getHeight(extent) / resolution * pixelRatio);\n    const layerExtent = layerState.extent && fromUserExtent(layerState.extent, projection);\n    if (layerExtent) {\n      extent = getIntersection(extent, fromUserExtent(layerState.extent, projection));\n    }\n    const dx = tileResolution * width / 2 / tilePixelRatio;\n    const dy = tileResolution * height / 2 / tilePixelRatio;\n    const canvasExtent = [viewCenter[0] - dx, viewCenter[1] - dy, viewCenter[0] + dx, viewCenter[1] + dy];\n    const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n\n    /**\n     * @type {Object<number, Object<string, import(\"../../Tile.js\").default>>}\n     */\n    const tilesToDrawByZ = {};\n    tilesToDrawByZ[z] = {};\n    const findLoadedTiles = this.createLoadedTileFinder(tileSource, projection, tilesToDrawByZ);\n    const tmpExtent = this.tmpExtent;\n    const tmpTileRange = this.tmpTileRange_;\n    this.newTiles_ = false;\n    const viewport = rotation ? getRotatedViewport(viewState.center, resolution, rotation, frameState.size) : undefined;\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        if (rotation && !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)) {\n          continue;\n        }\n        const tile = this.getTile(z, x, y, frameState);\n        if (this.isDrawableTile(tile)) {\n          const uid = getUid(this);\n          if (tile.getState() == TileState.LOADED) {\n            tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;\n            let inTransition = tile.inTransition(uid);\n            if (inTransition && layerState.opacity !== 1) {\n              // Skipping transition when layer is not fully opaque avoids visual artifacts.\n              tile.endTransition(uid);\n              inTransition = false;\n            }\n            if (!this.newTiles_ && (inTransition || !this.renderedTiles.includes(tile))) {\n              this.newTiles_ = true;\n            }\n          }\n          if (tile.getAlpha(uid, frameState.time) === 1) {\n            // don't look for alt tiles if alpha is 1\n            continue;\n          }\n        }\n        const childTileRange = tileGrid.getTileCoordChildTileRange(tile.tileCoord, tmpTileRange, tmpExtent);\n        let covered = false;\n        if (childTileRange) {\n          covered = findLoadedTiles(z + 1, childTileRange);\n        }\n        if (!covered) {\n          tileGrid.forEachTileCoordParentTileRange(tile.tileCoord, findLoadedTiles, tmpTileRange, tmpExtent);\n        }\n      }\n    }\n    const canvasScale = tileResolution / viewResolution * pixelRatio / tilePixelRatio;\n\n    // set forward and inverse pixel transforms\n    composeTransform(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / pixelRatio, 1 / pixelRatio, rotation, -width / 2, -height / 2);\n    const canvasTransform = toTransformString(this.pixelTransform);\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n    const context = this.context;\n    const canvas = context.canvas;\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    // set scale transform for calculating tile positions on the canvas\n    composeTransform(this.tempTransform, width / 2, height / 2, canvasScale, canvasScale, 0, -width / 2, -height / 2);\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n    if (layerExtent) {\n      this.clipUnrotated(context, frameState, layerExtent);\n    }\n    if (!tileSource.getInterpolate()) {\n      context.imageSmoothingEnabled = false;\n    }\n    this.preRender(context, frameState);\n    this.renderedTiles.length = 0;\n    /** @type {Array<number>} */\n    let zs = Object.keys(tilesToDrawByZ).map(Number);\n    zs.sort(ascending);\n    let clips, clipZs, currentClip;\n    if (layerState.opacity === 1 && (!this.containerReused || tileSource.getOpaque(frameState.viewState.projection))) {\n      zs = zs.reverse();\n    } else {\n      clips = [];\n      clipZs = [];\n    }\n    for (let i = zs.length - 1; i >= 0; --i) {\n      const currentZ = zs[i];\n      const currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);\n      const currentResolution = tileGrid.getResolution(currentZ);\n      const currentScale = currentResolution / tileResolution;\n      const dx = currentTilePixelSize[0] * currentScale * canvasScale;\n      const dy = currentTilePixelSize[1] * currentScale * canvasScale;\n      const originTileCoord = tileGrid.getTileCoordForCoordAndZ(getTopLeft(canvasExtent), currentZ);\n      const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);\n      const origin = applyTransform(this.tempTransform, [tilePixelRatio * (originTileExtent[0] - canvasExtent[0]) / tileResolution, tilePixelRatio * (canvasExtent[3] - originTileExtent[3]) / tileResolution]);\n      const tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);\n      const tilesToDraw = tilesToDrawByZ[currentZ];\n      for (const tileCoordKey in tilesToDraw) {\n        const tile = /** @type {import(\"../../ImageTile.js\").default} */\n        tilesToDraw[tileCoordKey];\n        const tileCoord = tile.tileCoord;\n\n        // Calculate integer positions and sizes so that tiles align\n        const xIndex = originTileCoord[1] - tileCoord[1];\n        const nextX = Math.round(origin[0] - (xIndex - 1) * dx);\n        const yIndex = originTileCoord[2] - tileCoord[2];\n        const nextY = Math.round(origin[1] - (yIndex - 1) * dy);\n        const x = Math.round(origin[0] - xIndex * dx);\n        const y = Math.round(origin[1] - yIndex * dy);\n        const w = nextX - x;\n        const h = nextY - y;\n        const transition = z === currentZ;\n        const inTransition = transition && tile.getAlpha(getUid(this), frameState.time) !== 1;\n        let contextSaved = false;\n        if (!inTransition) {\n          if (clips) {\n            // Clip mask for regions in this tile that already filled by a higher z tile\n            currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];\n            for (let i = 0, ii = clips.length; i < ii; ++i) {\n              if (z !== currentZ && currentZ < clipZs[i]) {\n                const clip = clips[i];\n                if (intersects([x, y, x + w, y + h], [clip[0], clip[3], clip[4], clip[7]])) {\n                  if (!contextSaved) {\n                    context.save();\n                    contextSaved = true;\n                  }\n                  context.beginPath();\n                  // counter-clockwise (outer ring) for current tile\n                  context.moveTo(currentClip[0], currentClip[1]);\n                  context.lineTo(currentClip[2], currentClip[3]);\n                  context.lineTo(currentClip[4], currentClip[5]);\n                  context.lineTo(currentClip[6], currentClip[7]);\n                  // clockwise (inner ring) for higher z tile\n                  context.moveTo(clip[6], clip[7]);\n                  context.lineTo(clip[4], clip[5]);\n                  context.lineTo(clip[2], clip[3]);\n                  context.lineTo(clip[0], clip[1]);\n                  context.clip();\n                }\n              }\n            }\n            clips.push(currentClip);\n            clipZs.push(currentZ);\n          } else {\n            context.clearRect(x, y, w, h);\n          }\n        }\n        this.drawTileImage(tile, frameState, x, y, w, h, tileGutter, transition);\n        if (clips && !inTransition) {\n          if (contextSaved) {\n            context.restore();\n          }\n          this.renderedTiles.unshift(tile);\n        } else {\n          this.renderedTiles.push(tile);\n        }\n        this.updateUsedTiles(frameState.usedTiles, tileSource, tile);\n      }\n    }\n    this.renderedRevision = sourceRevision;\n    this.renderedResolution = tileResolution;\n    this.extentChanged = !this.renderedExtent_ || !equals(this.renderedExtent_, canvasExtent);\n    this.renderedExtent_ = canvasExtent;\n    this.renderedPixelRatio = pixelRatio;\n    this.renderedProjection = projection;\n    this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, z, tileLayer.getPreload());\n    this.scheduleExpireCache(frameState, tileSource);\n    this.postRender(context, frameState);\n    if (layerState.extent) {\n      context.restore();\n    }\n    context.imageSmoothingEnabled = true;\n    if (canvasTransform !== canvas.style.transform) {\n      canvas.style.transform = canvasTransform;\n    }\n    return this.container;\n  }\n\n  /**\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} x Left of the tile.\n   * @param {number} y Top of the tile.\n   * @param {number} w Width of the tile.\n   * @param {number} h Height of the tile.\n   * @param {number} gutter Tile gutter.\n   * @param {boolean} transition Apply an alpha transition.\n   */\n  drawTileImage(tile, frameState, x, y, w, h, gutter, transition) {\n    const image = this.getTileImage(tile);\n    if (!image) {\n      return;\n    }\n    const uid = getUid(this);\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const alpha = layerState.opacity * (transition ? tile.getAlpha(uid, frameState.time) : 1);\n    const alphaChanged = alpha !== this.context.globalAlpha;\n    if (alphaChanged) {\n      this.context.save();\n      this.context.globalAlpha = alpha;\n    }\n    this.context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);\n    if (alphaChanged) {\n      this.context.restore();\n    }\n    if (alpha !== layerState.opacity) {\n      frameState.animate = true;\n    } else if (transition) {\n      tile.endTransition(uid);\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image\n   */\n  getImage() {\n    const context = this.context;\n    return context ? context.canvas : null;\n  }\n\n  /**\n   * Get the image from a tile.\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @protected\n   */\n  getTileImage(tile) {\n    return tile.getImage();\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @protected\n   */\n  scheduleExpireCache(frameState, tileSource) {\n    if (tileSource.canExpireCache()) {\n      /**\n       * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n       * @param {import(\"../../Map.js\").default} map Map.\n       * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n       */\n      const postRenderFunction = function (tileSource, map, frameState) {\n        const tileSourceKey = getUid(tileSource);\n        if (tileSourceKey in frameState.usedTiles) {\n          tileSource.expireCache(frameState.viewState.projection, frameState.usedTiles[tileSourceKey]);\n        }\n      }.bind(null, tileSource);\n      frameState.postRenderFunctions.push( /** @type {import(\"../../Map.js\").PostRenderFunction} */\n      postRenderFunction);\n    }\n  }\n\n  /**\n   * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import('../../Tile.js').default} tile Tile.\n   * @protected\n   */\n  updateUsedTiles(usedTiles, tileSource, tile) {\n    // FIXME should we use tilesToDrawByZ instead?\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in usedTiles)) {\n      usedTiles[tileSourceKey] = {};\n    }\n    usedTiles[tileSourceKey][tile.getKey()] = true;\n  }\n\n  /**\n   * Manage tile pyramid.\n   * This function performs a number of functions related to the tiles at the\n   * current zoom and lower zoom levels:\n   * - registers idle tiles in frameState.wantedTiles so that they are not\n   *   discarded by the tile queue\n   * - enqueues missing tiles\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\n   * @param {number} currentZ Current Z.\n   * @param {number} preload Load low resolution tiles up to `preload` levels.\n   * @param {function(import(\"../../Tile.js\").default):void} [tileCallback] Tile callback.\n   * @protected\n   */\n  manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, currentZ, preload, tileCallback) {\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in frameState.wantedTiles)) {\n      frameState.wantedTiles[tileSourceKey] = {};\n    }\n    const wantedTiles = frameState.wantedTiles[tileSourceKey];\n    const tileQueue = frameState.tileQueue;\n    const minZoom = tileGrid.getMinZoom();\n    const rotation = frameState.viewState.rotation;\n    const viewport = rotation ? getRotatedViewport(frameState.viewState.center, frameState.viewState.resolution, rotation, frameState.size) : undefined;\n    let tileCount = 0;\n    let tile, tileRange, tileResolution, x, y, z;\n    for (z = minZoom; z <= currentZ; ++z) {\n      tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);\n      tileResolution = tileGrid.getResolution(z);\n      for (x = tileRange.minX; x <= tileRange.maxX; ++x) {\n        for (y = tileRange.minY; y <= tileRange.maxY; ++y) {\n          if (rotation && !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)) {\n            continue;\n          }\n          if (currentZ - z <= preload) {\n            ++tileCount;\n            tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n            if (tile.getState() == TileState.IDLE) {\n              wantedTiles[tile.getKey()] = true;\n              if (!tileQueue.isKeyQueued(tile.getKey())) {\n                tileQueue.enqueue([tile, tileSourceKey, tileGrid.getTileCoordCenter(tile.tileCoord), tileResolution]);\n              }\n            }\n            if (tileCallback !== undefined) {\n              tileCallback(tile);\n            }\n          } else {\n            tileSource.useTile(z, x, y, projection);\n          }\n        }\n      }\n    }\n    tileSource.updateCacheSize(tileCount, projection);\n  }\n}\nexport default CanvasTileLayerRenderer;","map":{"version":3,"names":["CanvasLayerRenderer","ImageTile","ReprojTile","TileRange","TileState","apply","applyTransform","compose","composeTransform","makeInverse","toString","toTransformString","ascending","containsCoordinate","createEmpty","equals","getHeight","getIntersection","getRotatedViewport","getTopLeft","getWidth","intersects","fromUserExtent","getUid","toSize","CanvasTileLayerRenderer","constructor","tileLayer","extentChanged","renderedExtent_","renderedPixelRatio","renderedProjection","renderedRevision","renderedTiles","newTiles_","tmpExtent","tmpTileRange_","isDrawableTile","tile","getLayer","tileState","getState","useInterimTilesOnError","getUseInterimTilesOnError","LOADED","EMPTY","ERROR","getTile","z","x","y","frameState","pixelRatio","projection","viewState","tileSource","getSource","getPreload","getInterimTile","getData","pixel","layer","coordinate","pixelToCoordinateTransform","slice","layerExtent","getExtent","source","getRenderSource","tileGrid","getTileGridForProjection","tilePixelRatio","getTilePixelRatio","getZForResolution","resolution","getMinZoom","tileCoord","getTileCoordForCoordAndZ","tileOrigin","getOrigin","tileSize","getTileSize","tileResolution","getResolution","col","Math","floor","row","gutter","round","getGutterForProjection","getImageData","getImage","loadedTileCallback","tiles","zoom","prepareFrame","renderFrame","target","layerState","layerStatesArray","layerIndex","viewResolution","viewCenter","center","rotation","sourceRevision","getRevision","zDirection","extent","width","height","dx","dy","canvasExtent","tileRange","getTileRangeForExtentAndZ","tilesToDrawByZ","findLoadedTiles","createLoadedTileFinder","tmpTileRange","viewport","size","undefined","minX","maxX","minY","maxY","tileCoordIntersectsViewport","uid","inTransition","opacity","endTransition","includes","getAlpha","time","childTileRange","getTileCoordChildTileRange","covered","forEachTileCoordParentTileRange","canvasScale","pixelTransform","canvasTransform","useContainer","getBackground","context","canvas","inversePixelTransform","tempTransform","containerReused","clearRect","clipUnrotated","getInterpolate","imageSmoothingEnabled","preRender","length","zs","Object","keys","map","Number","sort","clips","clipZs","currentClip","getOpaque","reverse","i","currentZ","currentTilePixelSize","getTilePixelSize","currentResolution","currentScale","originTileCoord","originTileExtent","getTileCoordExtent","origin","tileGutter","tilesToDraw","tileCoordKey","xIndex","nextX","yIndex","nextY","w","h","transition","contextSaved","ii","clip","save","beginPath","moveTo","lineTo","push","drawTileImage","restore","unshift","updateUsedTiles","usedTiles","renderedResolution","manageTilePyramid","scheduleExpireCache","postRender","style","transform","container","image","getTileImage","alpha","alphaChanged","globalAlpha","drawImage","animate","canExpireCache","postRenderFunction","tileSourceKey","expireCache","bind","postRenderFunctions","getKey","preload","tileCallback","wantedTiles","tileQueue","minZoom","tileCount","IDLE","isKeyQueued","enqueue","getTileCoordCenter","useTile","updateCacheSize"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/renderer/canvas/TileLayer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/TileLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport ImageTile from '../../ImageTile.js';\nimport ReprojTile from '../../reproj/Tile.js';\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  makeInverse,\n  toString as toTransformString,\n} from '../../transform.js';\nimport {ascending} from '../../array.js';\nimport {\n  containsCoordinate,\n  createEmpty,\n  equals,\n  getHeight,\n  getIntersection,\n  getRotatedViewport,\n  getTopLeft,\n  getWidth,\n  intersects,\n} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {getUid} from '../../util.js';\nimport {toSize} from '../../size.js';\n\n/**\n * @classdesc\n * Canvas renderer for tile layers.\n * @api\n * @template {import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default} [LayerType=import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default]\n * @extends {CanvasLayerRenderer<LayerType>}\n */\nclass CanvasTileLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   */\n  constructor(tileLayer) {\n    super(tileLayer);\n\n    /**\n     * Rendered extent has changed since the previous `renderFrame()` call\n     * @type {boolean}\n     */\n    this.extentChanged = true;\n\n    /**\n     * @private\n     * @type {?import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedPixelRatio;\n\n    /**\n     * @protected\n     * @type {import(\"../../proj/Projection.js\").default}\n     */\n    this.renderedProjection = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedRevision;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../../Tile.js\").default>}\n     */\n    this.renderedTiles = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.newTiles_ = false;\n\n    /**\n     * @protected\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.tmpExtent = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../TileRange.js\").default}\n     */\n    this.tmpTileRange_ = new TileRange(0, 0, 0, 0);\n  }\n\n  /**\n   * @protected\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {boolean} Tile is drawable.\n   */\n  isDrawableTile(tile) {\n    const tileLayer = this.getLayer();\n    const tileState = tile.getState();\n    const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\n    return (\n      tileState == TileState.LOADED ||\n      tileState == TileState.EMPTY ||\n      (tileState == TileState.ERROR && !useInterimTilesOnError)\n    );\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {!import(\"../../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const projection = frameState.viewState.projection;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getSource();\n    let tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n    if (tile.getState() == TileState.ERROR) {\n      if (tileLayer.getUseInterimTilesOnError() && tileLayer.getPreload() > 0) {\n        // Preloaded tiles for lower resolutions might have finished loading.\n        this.newTiles_ = true;\n      }\n    }\n    if (!this.isDrawableTile(tile)) {\n      tile = tile.getInterimTile();\n    }\n    return tile;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice()\n    );\n\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n\n    const pixelRatio = frameState.pixelRatio;\n    const projection = frameState.viewState.projection;\n    const viewState = frameState.viewState;\n    const source = layer.getRenderSource();\n    const tileGrid = source.getTileGridForProjection(viewState.projection);\n    const tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);\n\n    for (\n      let z = tileGrid.getZForResolution(viewState.resolution);\n      z >= tileGrid.getMinZoom();\n      --z\n    ) {\n      const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const tile = source.getTile(\n        z,\n        tileCoord[1],\n        tileCoord[2],\n        pixelRatio,\n        projection\n      );\n      if (\n        !(tile instanceof ImageTile || tile instanceof ReprojTile) ||\n        (tile instanceof ReprojTile && tile.getState() === TileState.EMPTY)\n      ) {\n        return null;\n      }\n\n      if (tile.getState() !== TileState.LOADED) {\n        continue;\n      }\n\n      const tileOrigin = tileGrid.getOrigin(z);\n      const tileSize = toSize(tileGrid.getTileSize(z));\n      const tileResolution = tileGrid.getResolution(z);\n\n      const col = Math.floor(\n        tilePixelRatio *\n          ((coordinate[0] - tileOrigin[0]) / tileResolution -\n            tileCoord[1] * tileSize[0])\n      );\n\n      const row = Math.floor(\n        tilePixelRatio *\n          ((tileOrigin[1] - coordinate[1]) / tileResolution -\n            tileCoord[2] * tileSize[1])\n      );\n\n      const gutter = Math.round(\n        tilePixelRatio * source.getGutterForProjection(viewState.projection)\n      );\n\n      return this.getImageData(tile.getImage(), col + gutter, row + gutter);\n    }\n\n    return null;\n  }\n\n  /**\n   * @param {Object<number, Object<string, import(\"../../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @param {number} zoom Zoom level.\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {boolean|void} If `false`, the tile will not be considered loaded.\n   */\n  loadedTileCallback(tiles, zoom, tile) {\n    if (this.isDrawableTile(tile)) {\n      return super.loadedTileCallback(tiles, zoom, tile);\n    }\n    return false;\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    return !!this.getLayer().getSource();\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const viewResolution = viewState.resolution;\n    const viewCenter = viewState.center;\n    const rotation = viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getSource();\n    const sourceRevision = tileSource.getRevision();\n    const tileGrid = tileSource.getTileGridForProjection(projection);\n    const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);\n    const tileResolution = tileGrid.getResolution(z);\n\n    let extent = frameState.extent;\n    const resolution = frameState.viewState.resolution;\n    const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\n    // desired dimensions of the canvas in pixels\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\n\n    const layerExtent =\n      layerState.extent && fromUserExtent(layerState.extent, projection);\n    if (layerExtent) {\n      extent = getIntersection(\n        extent,\n        fromUserExtent(layerState.extent, projection)\n      );\n    }\n\n    const dx = (tileResolution * width) / 2 / tilePixelRatio;\n    const dy = (tileResolution * height) / 2 / tilePixelRatio;\n    const canvasExtent = [\n      viewCenter[0] - dx,\n      viewCenter[1] - dy,\n      viewCenter[0] + dx,\n      viewCenter[1] + dy,\n    ];\n\n    const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n\n    /**\n     * @type {Object<number, Object<string, import(\"../../Tile.js\").default>>}\n     */\n    const tilesToDrawByZ = {};\n    tilesToDrawByZ[z] = {};\n\n    const findLoadedTiles = this.createLoadedTileFinder(\n      tileSource,\n      projection,\n      tilesToDrawByZ\n    );\n\n    const tmpExtent = this.tmpExtent;\n    const tmpTileRange = this.tmpTileRange_;\n    this.newTiles_ = false;\n    const viewport = rotation\n      ? getRotatedViewport(\n          viewState.center,\n          resolution,\n          rotation,\n          frameState.size\n        )\n      : undefined;\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        if (\n          rotation &&\n          !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)\n        ) {\n          continue;\n        }\n        const tile = this.getTile(z, x, y, frameState);\n        if (this.isDrawableTile(tile)) {\n          const uid = getUid(this);\n          if (tile.getState() == TileState.LOADED) {\n            tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;\n            let inTransition = tile.inTransition(uid);\n            if (inTransition && layerState.opacity !== 1) {\n              // Skipping transition when layer is not fully opaque avoids visual artifacts.\n              tile.endTransition(uid);\n              inTransition = false;\n            }\n            if (\n              !this.newTiles_ &&\n              (inTransition || !this.renderedTiles.includes(tile))\n            ) {\n              this.newTiles_ = true;\n            }\n          }\n          if (tile.getAlpha(uid, frameState.time) === 1) {\n            // don't look for alt tiles if alpha is 1\n            continue;\n          }\n        }\n\n        const childTileRange = tileGrid.getTileCoordChildTileRange(\n          tile.tileCoord,\n          tmpTileRange,\n          tmpExtent\n        );\n\n        let covered = false;\n        if (childTileRange) {\n          covered = findLoadedTiles(z + 1, childTileRange);\n        }\n        if (!covered) {\n          tileGrid.forEachTileCoordParentTileRange(\n            tile.tileCoord,\n            findLoadedTiles,\n            tmpTileRange,\n            tmpExtent\n          );\n        }\n      }\n    }\n\n    const canvasScale =\n      ((tileResolution / viewResolution) * pixelRatio) / tilePixelRatio;\n\n    // set forward and inverse pixel transforms\n    composeTransform(\n      this.pixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / pixelRatio,\n      1 / pixelRatio,\n      rotation,\n      -width / 2,\n      -height / 2\n    );\n\n    const canvasTransform = toTransformString(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n    const context = this.context;\n    const canvas = context.canvas;\n\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    // set scale transform for calculating tile positions on the canvas\n    composeTransform(\n      this.tempTransform,\n      width / 2,\n      height / 2,\n      canvasScale,\n      canvasScale,\n      0,\n      -width / 2,\n      -height / 2\n    );\n\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    if (layerExtent) {\n      this.clipUnrotated(context, frameState, layerExtent);\n    }\n\n    if (!tileSource.getInterpolate()) {\n      context.imageSmoothingEnabled = false;\n    }\n\n    this.preRender(context, frameState);\n\n    this.renderedTiles.length = 0;\n    /** @type {Array<number>} */\n    let zs = Object.keys(tilesToDrawByZ).map(Number);\n    zs.sort(ascending);\n\n    let clips, clipZs, currentClip;\n    if (\n      layerState.opacity === 1 &&\n      (!this.containerReused ||\n        tileSource.getOpaque(frameState.viewState.projection))\n    ) {\n      zs = zs.reverse();\n    } else {\n      clips = [];\n      clipZs = [];\n    }\n    for (let i = zs.length - 1; i >= 0; --i) {\n      const currentZ = zs[i];\n      const currentTilePixelSize = tileSource.getTilePixelSize(\n        currentZ,\n        pixelRatio,\n        projection\n      );\n      const currentResolution = tileGrid.getResolution(currentZ);\n      const currentScale = currentResolution / tileResolution;\n      const dx = currentTilePixelSize[0] * currentScale * canvasScale;\n      const dy = currentTilePixelSize[1] * currentScale * canvasScale;\n      const originTileCoord = tileGrid.getTileCoordForCoordAndZ(\n        getTopLeft(canvasExtent),\n        currentZ\n      );\n      const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);\n      const origin = applyTransform(this.tempTransform, [\n        (tilePixelRatio * (originTileExtent[0] - canvasExtent[0])) /\n          tileResolution,\n        (tilePixelRatio * (canvasExtent[3] - originTileExtent[3])) /\n          tileResolution,\n      ]);\n      const tileGutter =\n        tilePixelRatio * tileSource.getGutterForProjection(projection);\n      const tilesToDraw = tilesToDrawByZ[currentZ];\n      for (const tileCoordKey in tilesToDraw) {\n        const tile = /** @type {import(\"../../ImageTile.js\").default} */ (\n          tilesToDraw[tileCoordKey]\n        );\n        const tileCoord = tile.tileCoord;\n\n        // Calculate integer positions and sizes so that tiles align\n        const xIndex = originTileCoord[1] - tileCoord[1];\n        const nextX = Math.round(origin[0] - (xIndex - 1) * dx);\n        const yIndex = originTileCoord[2] - tileCoord[2];\n        const nextY = Math.round(origin[1] - (yIndex - 1) * dy);\n        const x = Math.round(origin[0] - xIndex * dx);\n        const y = Math.round(origin[1] - yIndex * dy);\n        const w = nextX - x;\n        const h = nextY - y;\n        const transition = z === currentZ;\n\n        const inTransition =\n          transition && tile.getAlpha(getUid(this), frameState.time) !== 1;\n        let contextSaved = false;\n        if (!inTransition) {\n          if (clips) {\n            // Clip mask for regions in this tile that already filled by a higher z tile\n            currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];\n            for (let i = 0, ii = clips.length; i < ii; ++i) {\n              if (z !== currentZ && currentZ < clipZs[i]) {\n                const clip = clips[i];\n                if (\n                  intersects(\n                    [x, y, x + w, y + h],\n                    [clip[0], clip[3], clip[4], clip[7]]\n                  )\n                ) {\n                  if (!contextSaved) {\n                    context.save();\n                    contextSaved = true;\n                  }\n                  context.beginPath();\n                  // counter-clockwise (outer ring) for current tile\n                  context.moveTo(currentClip[0], currentClip[1]);\n                  context.lineTo(currentClip[2], currentClip[3]);\n                  context.lineTo(currentClip[4], currentClip[5]);\n                  context.lineTo(currentClip[6], currentClip[7]);\n                  // clockwise (inner ring) for higher z tile\n                  context.moveTo(clip[6], clip[7]);\n                  context.lineTo(clip[4], clip[5]);\n                  context.lineTo(clip[2], clip[3]);\n                  context.lineTo(clip[0], clip[1]);\n                  context.clip();\n                }\n              }\n            }\n            clips.push(currentClip);\n            clipZs.push(currentZ);\n          } else {\n            context.clearRect(x, y, w, h);\n          }\n        }\n        this.drawTileImage(\n          tile,\n          frameState,\n          x,\n          y,\n          w,\n          h,\n          tileGutter,\n          transition\n        );\n        if (clips && !inTransition) {\n          if (contextSaved) {\n            context.restore();\n          }\n          this.renderedTiles.unshift(tile);\n        } else {\n          this.renderedTiles.push(tile);\n        }\n        this.updateUsedTiles(frameState.usedTiles, tileSource, tile);\n      }\n    }\n\n    this.renderedRevision = sourceRevision;\n    this.renderedResolution = tileResolution;\n    this.extentChanged =\n      !this.renderedExtent_ || !equals(this.renderedExtent_, canvasExtent);\n    this.renderedExtent_ = canvasExtent;\n    this.renderedPixelRatio = pixelRatio;\n    this.renderedProjection = projection;\n\n    this.manageTilePyramid(\n      frameState,\n      tileSource,\n      tileGrid,\n      pixelRatio,\n      projection,\n      extent,\n      z,\n      tileLayer.getPreload()\n    );\n    this.scheduleExpireCache(frameState, tileSource);\n\n    this.postRender(context, frameState);\n\n    if (layerState.extent) {\n      context.restore();\n    }\n    context.imageSmoothingEnabled = true;\n\n    if (canvasTransform !== canvas.style.transform) {\n      canvas.style.transform = canvasTransform;\n    }\n\n    return this.container;\n  }\n\n  /**\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} x Left of the tile.\n   * @param {number} y Top of the tile.\n   * @param {number} w Width of the tile.\n   * @param {number} h Height of the tile.\n   * @param {number} gutter Tile gutter.\n   * @param {boolean} transition Apply an alpha transition.\n   */\n  drawTileImage(tile, frameState, x, y, w, h, gutter, transition) {\n    const image = this.getTileImage(tile);\n    if (!image) {\n      return;\n    }\n    const uid = getUid(this);\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const alpha =\n      layerState.opacity *\n      (transition ? tile.getAlpha(uid, frameState.time) : 1);\n    const alphaChanged = alpha !== this.context.globalAlpha;\n    if (alphaChanged) {\n      this.context.save();\n      this.context.globalAlpha = alpha;\n    }\n    this.context.drawImage(\n      image,\n      gutter,\n      gutter,\n      image.width - 2 * gutter,\n      image.height - 2 * gutter,\n      x,\n      y,\n      w,\n      h\n    );\n\n    if (alphaChanged) {\n      this.context.restore();\n    }\n    if (alpha !== layerState.opacity) {\n      frameState.animate = true;\n    } else if (transition) {\n      tile.endTransition(uid);\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image\n   */\n  getImage() {\n    const context = this.context;\n    return context ? context.canvas : null;\n  }\n\n  /**\n   * Get the image from a tile.\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @protected\n   */\n  getTileImage(tile) {\n    return tile.getImage();\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @protected\n   */\n  scheduleExpireCache(frameState, tileSource) {\n    if (tileSource.canExpireCache()) {\n      /**\n       * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n       * @param {import(\"../../Map.js\").default} map Map.\n       * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n       */\n      const postRenderFunction = function (tileSource, map, frameState) {\n        const tileSourceKey = getUid(tileSource);\n        if (tileSourceKey in frameState.usedTiles) {\n          tileSource.expireCache(\n            frameState.viewState.projection,\n            frameState.usedTiles[tileSourceKey]\n          );\n        }\n      }.bind(null, tileSource);\n\n      frameState.postRenderFunctions.push(\n        /** @type {import(\"../../Map.js\").PostRenderFunction} */ (\n          postRenderFunction\n        )\n      );\n    }\n  }\n\n  /**\n   * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import('../../Tile.js').default} tile Tile.\n   * @protected\n   */\n  updateUsedTiles(usedTiles, tileSource, tile) {\n    // FIXME should we use tilesToDrawByZ instead?\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in usedTiles)) {\n      usedTiles[tileSourceKey] = {};\n    }\n    usedTiles[tileSourceKey][tile.getKey()] = true;\n  }\n\n  /**\n   * Manage tile pyramid.\n   * This function performs a number of functions related to the tiles at the\n   * current zoom and lower zoom levels:\n   * - registers idle tiles in frameState.wantedTiles so that they are not\n   *   discarded by the tile queue\n   * - enqueues missing tiles\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\n   * @param {number} currentZ Current Z.\n   * @param {number} preload Load low resolution tiles up to `preload` levels.\n   * @param {function(import(\"../../Tile.js\").default):void} [tileCallback] Tile callback.\n   * @protected\n   */\n  manageTilePyramid(\n    frameState,\n    tileSource,\n    tileGrid,\n    pixelRatio,\n    projection,\n    extent,\n    currentZ,\n    preload,\n    tileCallback\n  ) {\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in frameState.wantedTiles)) {\n      frameState.wantedTiles[tileSourceKey] = {};\n    }\n    const wantedTiles = frameState.wantedTiles[tileSourceKey];\n    const tileQueue = frameState.tileQueue;\n    const minZoom = tileGrid.getMinZoom();\n    const rotation = frameState.viewState.rotation;\n    const viewport = rotation\n      ? getRotatedViewport(\n          frameState.viewState.center,\n          frameState.viewState.resolution,\n          rotation,\n          frameState.size\n        )\n      : undefined;\n    let tileCount = 0;\n    let tile, tileRange, tileResolution, x, y, z;\n    for (z = minZoom; z <= currentZ; ++z) {\n      tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);\n      tileResolution = tileGrid.getResolution(z);\n      for (x = tileRange.minX; x <= tileRange.maxX; ++x) {\n        for (y = tileRange.minY; y <= tileRange.maxY; ++y) {\n          if (\n            rotation &&\n            !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)\n          ) {\n            continue;\n          }\n          if (currentZ - z <= preload) {\n            ++tileCount;\n            tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n            if (tile.getState() == TileState.IDLE) {\n              wantedTiles[tile.getKey()] = true;\n              if (!tileQueue.isKeyQueued(tile.getKey())) {\n                tileQueue.enqueue([\n                  tile,\n                  tileSourceKey,\n                  tileGrid.getTileCoordCenter(tile.tileCoord),\n                  tileResolution,\n                ]);\n              }\n            }\n            if (tileCallback !== undefined) {\n              tileCallback(tile);\n            }\n          } else {\n            tileSource.useTile(z, x, y, projection);\n          }\n        }\n      }\n    }\n    tileSource.updateCacheSize(tileCount, projection);\n  }\n}\n\nexport default CanvasTileLayerRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}