{"ast":null,"code":"/**\n * @module ol/Observable\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport { listen, listenOnce, unlistenByKey } from './events.js';\n\n/***\n * @template {string} Type\n * @template {Event|import(\"./events/Event.js\").default} EventClass\n * @template Return\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\n */\n\n/***\n * @template {string} Type\n * @template Return\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\n */\n\n/**\n * @typedef {'change'|'error'} EventTypes\n */\n\n/***\n * @template Return\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").default\n * @api\n */\nclass Observable extends EventTarget {\n  constructor() {\n    super();\n    this.on = /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */\n    this.onInternal;\n    this.once = /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */\n    this.onceInternal;\n    this.un = /** @type {ObservableOnSignature<void>} */this.unInternal;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.revision_ = 0;\n  }\n\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  changed() {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n  getRevision() {\n    return this.revision_;\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onInternal(type, listener) {\n    if (Array.isArray(type)) {\n      const len = type.length;\n      const keys = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n      return keys;\n    }\n    return listen(this, /** @type {string} */type, listener);\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onceInternal(type, listener) {\n    let key;\n    if (Array.isArray(type)) {\n      const len = type.length;\n      key = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        key[i] = listenOnce(this, type[i], listener);\n      }\n    } else {\n      key = listenOnce(this, /** @type {string} */type, listener);\n    }\n    /** @type {Object} */\n    listener.ol_key = key;\n    return key;\n  }\n\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @protected\n   */\n  unInternal(type, listener) {\n    const key = /** @type {Object} */listener.ol_key;\n    if (key) {\n      unByKey(key);\n    } else if (Array.isArray(type)) {\n      for (let i = 0, ii = type.length; i < ii; ++i) {\n        this.removeEventListener(type[i], listener);\n      }\n    } else {\n      this.removeEventListener(type, listener);\n    }\n  }\n}\n\n/**\n * Listen for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.on;\n\n/**\n * Listen once for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.once;\n\n/**\n * Unlisten for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @api\n */\nObservable.prototype.un;\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (let i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey( /** @type {import(\"./events.js\").EventsKey} */key);\n  }\n}\nexport default Observable;","map":{"version":3,"names":["EventTarget","EventType","listen","listenOnce","unlistenByKey","Observable","constructor","on","onInternal","once","onceInternal","un","unInternal","revision_","changed","dispatchEvent","CHANGE","getRevision","type","listener","Array","isArray","len","length","keys","i","key","ol_key","unByKey","ii","removeEventListener","prototype"],"sources":["E:/Desktop/scenerymonitor/node_modules/ol/Observable.js"],"sourcesContent":["/**\n * @module ol/Observable\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport {listen, listenOnce, unlistenByKey} from './events.js';\n\n/***\n * @template {string} Type\n * @template {Event|import(\"./events/Event.js\").default} EventClass\n * @template Return\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\n */\n\n/***\n * @template {string} Type\n * @template Return\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\n */\n\n/**\n * @typedef {'change'|'error'} EventTypes\n */\n\n/***\n * @template Return\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").default\n * @api\n */\nclass Observable extends EventTarget {\n  constructor() {\n    super();\n\n    this.on =\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\n        this.onInternal\n      );\n\n    this.once =\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\n        this.onceInternal\n      );\n\n    this.un = /** @type {ObservableOnSignature<void>} */ (this.unInternal);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.revision_ = 0;\n  }\n\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  changed() {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n  getRevision() {\n    return this.revision_;\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onInternal(type, listener) {\n    if (Array.isArray(type)) {\n      const len = type.length;\n      const keys = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n      return keys;\n    }\n    return listen(this, /** @type {string} */ (type), listener);\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onceInternal(type, listener) {\n    let key;\n    if (Array.isArray(type)) {\n      const len = type.length;\n      key = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        key[i] = listenOnce(this, type[i], listener);\n      }\n    } else {\n      key = listenOnce(this, /** @type {string} */ (type), listener);\n    }\n    /** @type {Object} */ (listener).ol_key = key;\n    return key;\n  }\n\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @protected\n   */\n  unInternal(type, listener) {\n    const key = /** @type {Object} */ (listener).ol_key;\n    if (key) {\n      unByKey(key);\n    } else if (Array.isArray(type)) {\n      for (let i = 0, ii = type.length; i < ii; ++i) {\n        this.removeEventListener(type[i], listener);\n      }\n    } else {\n      this.removeEventListener(type, listener);\n    }\n  }\n}\n\n/**\n * Listen for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.on;\n\n/**\n * Listen once for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.once;\n\n/**\n * Unlisten for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @api\n */\nObservable.prototype.un;\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (let i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\n  }\n}\n\nexport default Observable;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}